.. index:: 
	single: General Information; Introduction

===================
General Information
===================

This chapter contains general information about the Ring programming language

(1) Ring Architecture
(2) Memory Management
(3) Data Representation

.. index:: 
	pair: General Information; Ring Architecture

Ring Architecture
=================

We have the next architecture

(1) Ring Applications (Your Code)  - Written in Ring - See folder : ring/applications
(2) Ring Libraries (StdLib, WebLib, GameEngine, etc) - Written in Ring - See folder : ring/ringlibs
(3) Ring Extensions (RingAllegro, RingQt, etc) - Written in C/C++ (may include Ring code) - See folder : ring/extensions
(4) Ring Virtual Machine (Ring VM) - Written in C language
(5) Operating System (Current Platform) - (Windows, Linux, macOS, Android, etc)

The extensions are just dynamic libraries (DLL, So, Dylib)
You can update the extensions without the need to update your code.


ring\libdepwin ====> C libraries used for building Ring Extensions (written in C) on Windows platform.

ring\ringlibs ====> Ring libraries written in Ring itself (StdLib, WebLib, GameEngine, etc)

ring\rnoteexe ====> Just C source file to create executable file that will run rnote.ring

ring\visualsrc ====> The Visual Source Code of the Ring Compiler & Ring VM developed using Programming Without Coding Technology (PWCT)

We use the term Ring Library ---> When the library code is written in Ring
We use the term Ring Extension ---> When the library code is Written in C or C++

.. index:: 
	pair: General Information; Memory Management

Memory Management
=================

(1) When we call function, we get a new scope for this function, inside this scope we store variables.

Also we get Temp. memory for this function. Inside this temp. memory we store temp. lists

All of this will be deleted directly after the end of the function call (end of scope)

(2) In Ring to delete memory, you have the next options

2.1 Wait until the end of the function scope

2.2 Use the Assignment operator

2.3 Use callgc() function (delete temp. lists only)

(3) Ring garbage collection uses Escape Analysis and Reference Counting

In 90% of cases, the escape analysis is used so we don't waste time in running the garbage collection
We directly know what will be deleted and what will remain in the memory.

https://en.wikipedia.org/wiki/Escape_analysis

In 10% of cases (or less than that) Ring may use Reference Counting.

For example when we pass a list and sub list to a function
Ring will pass the lists by reference, but what will happens if we deleted the parent list?
In this case, the sub list will use Reference Counting, and when deleting the parent list, it will stay in memory until the end of the called function.

Remember that Ring encourage us to avoid using references, and the
assignment operator will copy lists by value, so Ring usage of reference counting is
very limited to special cases and in most cases Escape Analysis is enough which is very fast.

Starting from Ring 1.9 we extended the reference counting support to Ring Extensions and low level C pointers.
So we don't have to care about using fclose() when we use fopen() for example. and the same for
other extensions like RingODBC, RingSQLite, RingMySQL, RingQt, etc.

All of the allocated resources will be cleaned by the Garbage Collector when we finish using it (when we lost the last reference).


