============
What is new?
============

In this chapter we will learn about the changes in each Ring release.

What is new in Ring 1.1?
========================

Ring 1.1  comes with many new features 

* Better Natural Language Programming Support
* Generate/Execute Ring Object Files (*.ringo)
* Syntax Flexibility and differnt styles for I/O and Control Structures
* New Functions and Changes
* StdLib functions and classes written in Ring
* RingLibSDL 
* Demo Project - Game Engine for 2D Games
* RingSQLite
* Better Code Generator for Extensions 
* Better Documentation

Better Natural Language Programming Support
===========================================

Ring is an innovative language because of it's compact syntax, smart implementation (small, transparent & visual)
and it's ability to create declarative and natural domain specific languages in a fraction of time.

This release add support for calling methods when an expression is evaluated

check this example:

.. code-block:: none

	# Natural Code
	new program {
		get 2 numbers then print the sum
	}

	# Natural Code Implementation
	class program
		# Keywords
			get=0 numbers=0 then=0 print=0 the=0 sum=0

		# Execution
		func braceexpreval x
			value = x
		func getnumbers
			for x=1 to value
				see "Enter Number ("+x+") :" give nNumber
				aNumbers + nNumber
			next
		func getsum
			nSUm = 0
			for x in aNumbers nSum+= x next
			see "The Sum : " + nSum
		private
			value=0	aNumbers=[]
		
Output: 

.. code-block:: none

	Enter Number (1) :3
	Enter Number (2) :4
	The Sum : 7

for more information see the "Natural Language Programming" chapter.


Generate/Execute Ring Object Files (*.ringo)
============================================

This feature enable you to distribute your applications without distributing
the source code. Also it makes application distribution a simple process where
you get one Ring object file for the complete project (many source code files).
Also using Ring object file remove the loading time required for compiling the application.

Check the "command line options" chapter to know more about this feature.


Syntax Flexibility and different styles for I/O and Control Structures
======================================================================

Programmers are sensitive to the programming language syntax. Great programmers know to how work
using many different styles but each programmer may have his/her favorite style.

Each programming language comes with a style that you may like or not. Ring is just one of these
languages, but as a respone to many programmers asking for a better syntax we decided to provide
more options.

Example :

.. code-block:: none

	Put "What is your name? "
	Get cName
	Put "Hello " + cName

Example : 

.. code-block:: none

	Load "stdlib.ring"

	Print("What is your name? ") 	# print message on screen
	cName=GetString()		# get input from the user
	print("Hello #{cName}")		# say hello!

Example :

.. code-block:: none

	While True

		Put " 
			Main Menu
			---------
			(1) Say Hello
			(2) About
			(3) Exit

		    " Get nOption

		Switch nOption
		Case 1 
			Put "Enter your name : " 
			Get name 
			Put "Hello " + name + nl
		Case 2 
			Put "Sample : using while loop" + nl
		Case 3 
			Bye
		Else 
			Put "bad option..." + nl
		End
	End

Example :

.. code-block:: none

	Load "stdlib.ring"

	While True {

		print(" 
			Main Menu
			---------
			(1) Say Hello
			(2) About
			(3) Exit

			  ")

		nOption = GetString()

		switch nOption {
		case 1 
			print("Enter your name : ")
			name = getstring()
			print("Hello #{name}\n")
		case 2 
			print("Sample : using switch statement\n")
		case 3 
			Bye
		else 
			print("bad option...\n")
		}

	}

Check the next chapters:-

* Getting Started - Second Style
* Getting Started - Third Style
* Control Structures - Second Style - May looks like Lua and Ruby
* Control Structures - Third Style - May looks like C (uses braces)

.. note:: All of these styles are provided automatically by the compiler at the same time, It's better to select one style for the same project (you can create your style as a mix from these styles) for example you can use Put/Get and Braces.

 
New Functions and Changes
=========================

Changed:

* get() function : changed to sysget()
* sort() function : can now work on list of objects
* find() function : can now work on list of objects

Added:

* CurrentDir()
* ExeFileName()
* ChDir()
* ExeFolder()
* varptr()
* space()
* nullpointer()
* object2pointer()
* pointer2object()

Check the next chapters 

* System Functions
* Object Oriented Programming (OOP) 
* Low Level Functions

StdLib functions and classes written in Ring
============================================

Ring 1.1 comes with a library called StdLib, it's written in Ring by the help of Ring Team

The library provide a useful group of new functions and classes

Example:

.. code-block:: none

	Load "stdlib.ring"

	Puts("Test Times()")
	Times ( 3 , func { see "Hello, World!" + nl } )

Example:

.. code-block:: none

	Load "stdlib.ring"

	Puts("Test Map()")
	See Map( 1:10, func x { return x*x } )

Example:

.. code-block:: none

	Load "stdlib.ring"

	Puts("Test Filter()")
	See Filter( 1:10 , func x { if x <= 5 return true else return false ok } )

Example:

.. code-block:: none

	Load "stdlib.ring"

	See "Testing the String Class" + nl
	oString = new string("Hello, World!")
	oString.println()
	oString.upper().println()
	oString.lower().println()
	oString.left(5).println()
	oString.right(6).println()

example:

.. code-block:: none

	Load "stdlib.ring"

	oList = new list ( [1,2,3] )
	oList.Add(4)
	oList.print()

example:

.. code-block:: none

	Load "stdlib.ring"

	oStack = new Stack
	oStack.push(1)
	oStack.push(2)
	oStack.push(3)
	see oStack.pop() + nl

example:

.. code-block:: none

	Load "stdlib.ring"

	oQueue = new Queue
	oQueue.add(1)
	oQueue.add(2)
	oQueue.add(3)
	see oQueue.remove() + nl


example:

.. code-block:: none

	Load "stdlib.ring"

	ohashtable = new hashtable
	See "Test the hashtable Class Methods" + nl
	ohashtable { 
		Add("Egypt","Cairo")
		Add("KSA","Riyadh")
		see self["Egypt"] + nl
		see self["KSA"] + nl
		see contains("Egypt") + nl
		see contains("USA") + nl
		see index("KSA")  + NL
		print()
		delete(index("KSA"))
		see copy("*",60) + nl
		print()
	}

example:

.. code-block:: none

	Load "stdlib.ring"

	otree = new tree
	See "Test the tree Class Methods" + nl
	otree {
		set("The first step")	# set the root node value
		see value() + nl
		Add("one")
		Add("two")
		Add("three") {
			Add("3.1")
			Add("3.2")
			Add("3.3")
			see children
		}
		see children
		oTree.children[2] {
			Add("2.1") Add("2.2") Add("2.3") {
				Add("2.3.1") Add("2.3.2") Add("test")
			}
		}
		oTree.children[2].children[3].children[3].set("2.3.3")
	}
	see copy("*",60) + nl
	oTree.print()

Check the next chapters:

* StdLib Functions
* StdLib Classes

RingLibSDL 
==========

Ring 1.0 provided RingAllegro to be able to create games using the Allegro game programming library

Now Ring 1.1 provide RingLibSDL also so we can have the choice between Allegro or LibSDL

Example:

.. code-block:: none

	Load "libsdl.ring"

	SDL_Init(SDL_INIT_EVERYTHING)
	win = SDL_CreateWindow("Hello World!", 100, 100, 640, 480, SDL_WINDOW_SHOWN)
	SDL_Delay(2000)
	SDL_DestroyWindow(win)
	SDL_Quit()


See RingLibSDL Chapter.

