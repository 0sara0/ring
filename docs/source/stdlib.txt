=======
Stdlib
=======

In this chapter we are going to learn about functions and classes in the stdlib.ring

puts() function
===============

print the value then print new line (nl)

Syntax:

.. code-block:: none

	puts(expr)

Example:

.. code-block:: none

	Load "stdlib.ring"

	Puts("Hello, World!")

printf() function
=================

print string - support \\n,\\t and \\r

Also we can use #{variable_name} to insert variables values.

Syntax:

.. code-block:: none

	printf(string)

Example:

.. code-block:: none

	Load "stdlib.ring"

	printf("\nHello, World\n\nHow are you? \t\t I'm fine!\n")
	x=10 y=20
	printf("\nx value = #{x} , y value = #{y} \n")


apppath() function
==================

Get the path of the application folder

Syntax:

.. code-block:: none

	AppPath() ---> The path as String

Example:

.. code-block:: none

	Load "stdlib.ring"

	# Application Path
	Puts("Test AppPath()")
	See AppPath() + nl

value() function
================

create a copy from a list or object

Syntax:

.. code-block:: none

	value(List) ---> new list 

Example:

.. code-block:: none

	Load "stdlib.ring"

	aList = 1:10
	del(value(aList),1) # delete first item
	see aList 	    # print numbers from 1 to 10

times() function
================

Execute a Function nCount times

Syntax:

.. code-block:: none

	Times(nCount,function)

Example:

.. code-block:: none

	Load "stdlib.ring"

	Puts("Test Times()")
	Times ( 3 , func { see "Hello, World!" + nl } )

map() function
==============

Execute a Function on each list item

Syntax:

.. code-block:: none

	 Map(alist,function)

Example:

.. code-block:: none

	Load "stdlib.ring"

	Puts("Test Map()")
	See Map( 1:10, func x { return x*x } )

filter() function
=================

Execute a Function on each list item to filter items

Syntax:

.. code-block:: none

	Filter(alist,function)

Example:

.. code-block:: none

	Load "stdlib.ring"

	Puts("Test Filter()")
	See Filter( 1:10 , func x { if x <= 5 return true else return false ok } )


split() function
================

Convert string words to list items

Syntax:

.. code-block:: none

	Split(cstring,delimiter)

Example:

.. code-block:: none

	Load "stdlib.ring"

	Puts("Test Split()")
	See Split("one two three four five"," ")


newlist() function
==================

Create a two dimensional list


Syntax:

.. code-block:: none

	NewList(nRows,nColumns) ---> new list 

Example:

.. code-block:: none

	Load "stdlib.ring"

	Puts("Test Newlist()")
	a1 = 3
	a2 = 5
	chrArray = newlist(a1,a2)
	numArray = newlist(a1,a2)
	chrArray[1][1] = "Hello"
	numArray[1][1]  = 987.2
	See chrArray[1][1] + nl
	See numArray[1][1] + nl

capitalized() function
======================

Return a copy of a string with the first letter capitalized

Syntax:

.. code-block:: none

	Capitalized(string) ---> string

Example:

.. code-block:: none

	Load "stdlib.ring"

	Puts("Test Capitalized()")
	See capitalized("welcome to the Ring Programming Language")

isspecial() function
====================

Check whether a character is special or not


Syntax:

.. code-block:: none

	IsSpecial(char) ---> True/False

Example:

.. code-block:: none

	Load "stdlib.ring"

	Puts("Test Isspecial()")
	See "Isspecial  = " + isSpecial("%") + nl

isvowel() function
==================

Check whether a character is vowel or not

Syntax:

.. code-block:: none

	IsVowel(char) ---> True/False

Example:

.. code-block:: none

	Load "stdlib.ring"

	Puts("Test Isvowel()")
	See "Isvowel = " + isVowel("c") + nl


linecount() function
====================

Return the lines count in a text file.

Syntax:

.. code-block:: none

	LineCount(cFileName) ---> Lines Count as number

Example:

.. code-block:: none

	Load "stdlib.ring"

	Puts("Test Linecount()")
	See "the number of lines = " + lineCount("test.ring")

factorial() function
====================

Return the factorial of a number

Syntax:

.. code-block:: none

	Factorial(number) ---> number

Example:

.. code-block:: none

	Load "stdlib.ring"

	Puts("Test Factorial()")
	see "6 factorial is : " + Factorial(6)

fibonacci() function
====================

Return the fibonacci number

Syntax:

.. code-block:: none

	Fibonacci(number) ---> number

Example:

.. code-block:: none

	Load "stdlib.ring"

	Puts("Test Fibonacci()")
	see "6 Fibonacci is : " + Fibonacci(6)

isprime() function
==================

Check whether a number is prime or not

Syntax:

.. code-block:: none

	isprime(number) ---> Number

Example:

.. code-block:: none

	Load "stdlib.ring"

	Puts("Test Isprime()")
	if isPrime(16) see "16 is a prime number"
	else see "16 is not a prime number" ok

sign() function
===============

Returns an integer value indicating the sign of a number.

Syntax:

.. code-block:: none

	Sign(number) ---> number ( -1 = negative , 0 , 1 (positive) )

Example:

.. code-block:: none

	Load "stdlib.ring"

	Puts("Test Sign()")
	see "sign of 12 is = " + sign(12) + nl


list2file() function
====================

Write list items to text file (each item in new line).

Syntax:

.. code-block:: none

	List2File(aList,cFileName)

Example:

.. code-block:: none

	Load "stdlib.ring"

	# Test List2File
	Puts("Test List2File()")
	list2file(1:100,"myfile.txt")