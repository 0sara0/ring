.. index:: 
	Single: Using Qt3D;  Introduction

==========
Using Qt3D
==========

In this chapter we will learn how to use Qt3D through many samples.


.. index:: 
	pair: Using Qt3D; Drawing Cube

Drawing Cube
============

.. code-block:: ring

	load "guilib.ring"

	new qApp {

		oView = new Qt3dwindow() 

		oWidget = new QWidget()	
		oContainer = oWidget.createWindowContainer(oView,oWidget,0)

		oRootEntity = new QEntity(oContainer) 

		oInput = new QInputAspect(oRootEntity)
			oView.registerAspect(oInput)

		oCameraEntity = oView.Camera()

		oCameraEntity.lens().setPerspectiveProjection(45.0, 16.0/9.0, 0.1, 1000.0)
			oCameraEntity.setPosition(new QVector3D(0, 0, 20.0))
			oCameraEntity.setUpVector(new QVector3D(0, 1, 0))
			oCameraEntity.setViewCenter(new QVector3D(0, 0, 0))	

		oLightEntity = new QEntity(oRootEntity)
			oLight = new QPointLight(oLightEntity)
		oLight.setColor(new QColor() { setRGB(255,255,255,255) })
		oLight.setIntensity(1)
		oLightEntity.addComponent(oLight)

		oLightTransform = new QTransform(oLightEntity)
		oLightTransform.setTranslation(oCameraEntity.position())
		oLightEntity.addComponent(oLightTransform)

		oCamController = new  QFirstPersonCameraController(oRootEntity)
			oCamController.setCamera(oCameraEntity)

		oCube = new  QCuboidMesh(oRootEntity) {
			setXextent(2)
			setYextent(2)
			setZextent(3)
		}

		oCubeTransform = new  QTransform(oCube)
		oCubeTransform.setScale(2)
		oCubeTransform.setTranslation(new QVector3D(3, 3, 3))

		oCubeMaterial = new QPhongMaterial(oCube)
		oCubeMaterial.setDiffuse(new QColor() {setRGB(200,100,100,100)})

		oCubeEntity = new QEntity(oRootEntity)
		oCubeEntity.addComponent(oCube)
		oCubeEntity.addComponent(oCubeMaterial)
		oCubeEntity.addComponent(oCubeTransform)
	 
		oView.setRootEntity(oRootEntity)

		oLayout = new QVBoxLayout()
		oLayout.AddWidget(oContainer)

		oWidget { 
			setwindowtitle("Using Qt3D - Cube") 
			resize(800,600)
			setLayout(oLayout) 
			showMaximized() 
		}

		exec()
	}

.. image:: qt3d_ex1.png
	:alt: Qt3D Example - Drawing Cube


.. index:: 
	pair: Using Qt3D; Drawing Torus

Drawing Torus
=============

.. code-block:: ring

	load "guilib.ring"

	new qApp {

		oView = new Qt3dwindow() 

		oWidget = new QWidget()	
		oContainer = oWidget.createWindowContainer(oView,oWidget,0)

		oRootEntity = new QEntity(oContainer) 

		oInput = new QInputAspect(oRootEntity)
			oView.registerAspect(oInput)

		oCameraEntity = oView.Camera()

		oCameraEntity.lens().setPerspectiveProjection(45.0, 16.0/9.0, 0.1, 1000.0)
			oCameraEntity.setPosition(new QVector3D(0, 0, 20.0))
			oCameraEntity.setUpVector(new QVector3D(0, 1, 0))
			oCameraEntity.setViewCenter(new QVector3D(0, 0, 0))	

		oLightEntity = new QEntity(oRootEntity)
			oLight = new QPointLight(oLightEntity)
		oLight.setColor(new QColor() { setRGB(255,255,255,255) })
		oLight.setIntensity(1)
		oLightEntity.addComponent(oLight)

		oLightTransform = new QTransform(oLightEntity)
		oLightTransform.setTranslation(oCameraEntity.position())
		oLightEntity.addComponent(oLightTransform)

		oCamController = new  QFirstPersonCameraController(oRootEntity)
			oCamController.setCamera(oCameraEntity)

		oTorus = new  QTorusMesh(oRootEntity)
			oTorus.setRadius(1.0)
			oTorus.setMinorRadius(0.4)
			oTorus.setRings(100)
			oTorus.setSlices(20)

		oTorusTransform = new  QTransform(oTorus)
		oTorusTransform.setScale(2)
		oTorusTransform.setTranslation(new QVector3D(3, 3, 3))

		oTorusMaterial = new QPhongMaterial(oTorus)
		oTorusMaterial.setDiffuse(new QColor() {setRGB(200,100,100,100)})

		oTorusEntity = new QEntity(oRootEntity)
		oTorusEntity.addComponent(oTorus)
		oTorusEntity.addComponent(oTorusMaterial)
		oTorusEntity.addComponent(oTorusTransform)
	 
		oView.setRootEntity(oRootEntity)

		oLayout = new QVBoxLayout()
		oLayout.AddWidget(oContainer)

		oWidget { 
			setwindowtitle("Using Qt3D - Torus") 
			resize(800,600)
			setLayout(oLayout) 
			showMaximized() 
		}

		exec()
	}

.. image:: qt3d_ex2.png
	:alt: Qt3D Example - Drawing Torus

.. index:: 
	pair: Using Qt3D; Drawing Sphere

Drawing Sphere
==============

.. code-block:: ring

	load "guilib.ring"

	new qApp {

		oView = new Qt3dwindow() 

		oWidget = new QWidget()	
		oContainer = oWidget.createWindowContainer(oView,oWidget,0)

		oRootEntity = new QEntity(oContainer) 

		oInput = new QInputAspect(oRootEntity)
			oView.registerAspect(oInput)

		oCameraEntity = oView.Camera()

		oCameraEntity.lens().setPerspectiveProjection(45.0, 16.0/9.0, 0.1, 1000.0)
			oCameraEntity.setPosition(new QVector3D(0, 0, 20.0))
			oCameraEntity.setUpVector(new QVector3D(0, 1, 0))
			oCameraEntity.setViewCenter(new QVector3D(0, 0, 0))	

		oLightEntity = new QEntity(oRootEntity)
			oLight = new QPointLight(oLightEntity)
		oLight.setColor(new QColor() { setRGB(255,255,255,255) })
		oLight.setIntensity(1)
		oLightEntity.addComponent(oLight)

		oLightTransform = new QTransform(oLightEntity)
		oLightTransform.setTranslation(oCameraEntity.position())
		oLightEntity.addComponent(oLightTransform)

		oCamController = new  QFirstPersonCameraController(oRootEntity)
			oCamController.setCamera(oCameraEntity)

		oSphere = new  QSphereMesh(oRootEntity)
			oSphere.setRadius(1.0)
			oSphere.setRings(100)
			oSphere.setSlices(20)

		oSphereTransform = new  QTransform(oSphere)
		oSphereTransform.setScale(2)
		oSphereTransform.setTranslation(new QVector3D(3, 3, 3))

		oSphereMaterial = new QPhongMaterial(oSphere)
		oSphereMaterial.setDiffuse(new QColor() {setRGB(200,100,100,100)})

		oSphereEntity = new QEntity(oRootEntity)
		oSphereEntity.addComponent(oSphere)
		oSphereEntity.addComponent(oSphereMaterial)
		oSphereEntity.addComponent(oSphereTransform)
	 
		oView.setRootEntity(oRootEntity)

		oLayout = new QVBoxLayout()
		oLayout.AddWidget(oContainer)

		oWidget { 
			setwindowtitle("Using Qt3D - Sphere") 
			resize(800,600)
			setLayout(oLayout) 
			showMaximized() 
		}

		exec()
	}

.. image:: qt3d_ex3.png
	:alt: Qt3D Example - Drawing Sphere

.. index:: 
	pair: Using Qt3D; Drawing Cylinder

Drawing Cylinder
================

.. code-block:: ring

	load "guilib.ring"

	new qApp {

		oView = new Qt3dwindow() 

		oWidget = new QWidget()	
		oContainer = oWidget.createWindowContainer(oView,oWidget,0)

		oRootEntity = new QEntity(oContainer) 

		oInput = new QInputAspect(oRootEntity)
			oView.registerAspect(oInput)

		oCameraEntity = oView.Camera()

		oCameraEntity.lens().setPerspectiveProjection(45.0, 16.0/9.0, 0.1, 1000.0)
			oCameraEntity.setPosition(new QVector3D(0, 0, 20.0))
			oCameraEntity.setUpVector(new QVector3D(0, 1, 0))
			oCameraEntity.setViewCenter(new QVector3D(0, 0, 0))	

		oLightEntity = new QEntity(oRootEntity)
			oLight = new QPointLight(oLightEntity)
		oLight.setColor(new QColor() { setRGB(255,255,255,255) })
		oLight.setIntensity(1)
		oLightEntity.addComponent(oLight)

		oLightTransform = new QTransform(oLightEntity)
		oLightTransform.setTranslation(oCameraEntity.position())
		oLightEntity.addComponent(oLightTransform)

		oCamController = new  QFirstPersonCameraController(oRootEntity)
			oCamController.setCamera(oCameraEntity)


		oCylinder = new  QCylinderMesh(oRootEntity)
			oCylinder.setRadius(1)
			oCylinder.setRings(100)
			oCylinder.setSlices(20)
		oCylinder.setLength(5)

		oCylinderTransform = new  QTransform(oCylinder)
		oCylinderTransform.setScale(2)
		oCylinderTransform.setTranslation(new QVector3D(1, 0, 3))

		oCylinderMaterial = new QPhongMaterial(oCylinder)
		oCylinderMaterial.setDiffuse(new QColor() {setRGB(200,100,100,100)})

		oCylinderEntity = new QEntity(oRootEntity)
		oCylinderEntity.addComponent(oCylinder)
		oCylinderEntity.addComponent(oCylinderMaterial)
		oCylinderEntity.addComponent(oCylinderTransform)
	 
		oView.setRootEntity(oRootEntity)

		oLayout = new QVBoxLayout()
		oLayout.AddWidget(oContainer)

		oWidget { 
			setwindowtitle("Using Qt3D - Cylinder") 
			resize(800,600)
			setLayout(oLayout) 
			showMaximized() 
		}

		exec()
	}

.. image:: qt3d_ex4.png
	:alt: Qt3D Example - Drawing Cylinder

.. index:: 
	pair: Using Qt3D; Drawing Cone

Drawing Cone
============

.. code-block:: ring

	load "guilib.ring"

	new qApp {

		oView = new Qt3dwindow() 

		oWidget = new QWidget()	
		oContainer = oWidget.createWindowContainer(oView,oWidget,0)

		oRootEntity = new QEntity(oContainer) 

		oInput = new QInputAspect(oRootEntity)
			oView.registerAspect(oInput)

		oCameraEntity = oView.Camera()

		oCameraEntity.lens().setPerspectiveProjection(45.0, 16.0/9.0, 0.1, 1000.0)
			oCameraEntity.setPosition(new QVector3D(0, 0, 20.0))
			oCameraEntity.setUpVector(new QVector3D(0, 1, 0))
			oCameraEntity.setViewCenter(new QVector3D(0, 0, 0))	

		oLightEntity = new QEntity(oRootEntity)
			oLight = new QPointLight(oLightEntity)
		oLight.setColor(new QColor() { setRGB(255,255,255,255) })
		oLight.setIntensity(1)
		oLightEntity.addComponent(oLight)

		oLightTransform = new QTransform(oLightEntity)
		oLightTransform.setTranslation(oCameraEntity.position())
		oLightEntity.addComponent(oLightTransform)

		oCamController = new  QFirstPersonCameraController(oRootEntity)
			oCamController.setCamera(oCameraEntity)


		oCone = new  QConeMesh(oRootEntity)
			oCone.setRings(100)
			oCone.setSlices(20)
		oCone.setLength(5)

		oConeTransform = new  QTransform(oCone)
		oConeTransform.setScale(2)
		oConeTransform.setTranslation(new QVector3D(1, 0, 3))

		oConeMaterial = new QPhongMaterial(oCone)
		oConeMaterial.setDiffuse(new QColor() {setRGB(200,100,100,100)})

		oConeEntity = new QEntity(oRootEntity)
		oConeEntity.addComponent(oCone)
		oConeEntity.addComponent(oConeMaterial)
		oConeEntity.addComponent(oConeTransform)
	 
		oView.setRootEntity(oRootEntity)

		oLayout = new QVBoxLayout()
		oLayout.AddWidget(oContainer)

		oWidget { 
			setwindowtitle("Using Qt3D - Cone") 
			resize(800,600)
			setLayout(oLayout) 
			showMaximized() 
		}

		exec()
	}

.. image:: qt3d_ex5.png
	:alt: Qt3D Example - Drawing Cone

.. index:: 
	pair: Using Qt3D; Drawing Plane

Drawing Plane
=============

.. code-block:: ring

	load "guilib.ring"

	new qApp {

		oView = new Qt3dwindow() 

		oWidget = new QWidget()	
		oContainer = oWidget.createWindowContainer(oView,oWidget,0)

		oRootEntity = new QEntity(oContainer) 

		oInput = new QInputAspect(oRootEntity)
			oView.registerAspect(oInput)

		oCameraEntity = oView.Camera()

		oCameraEntity.lens().setPerspectiveProjection(45.0, 16.0/9.0, 0.1, 1000.0)
			oCameraEntity.setPosition(new QVector3D(0, 0, 20.0))
			oCameraEntity.setUpVector(new QVector3D(0, 1, 0))
			oCameraEntity.setViewCenter(new QVector3D(0, 0, 0))	

		oLightEntity = new QEntity(oRootEntity)
			oLight = new QPointLight(oLightEntity)
		oLight.setColor(new QColor() { setRGB(255,255,255,255) })
		oLight.setIntensity(1)
		oLightEntity.addComponent(oLight)

		oLightTransform = new QTransform(oLightEntity)
		oLightTransform.setTranslation(oCameraEntity.position())
		oLightEntity.addComponent(oLightTransform)

		oCamController = new  QFirstPersonCameraController(oRootEntity)
			oCamController.setCamera(oCameraEntity)


		oPlane = new  QPlaneMesh(oRootEntity)
		oPlane.setHeight(5)
		oPlane.setWidth(5)
		oPlane.setmeshresolution(new qSize(10,10))

		oPlaneTransform = new  QTransform(oPlane)
		oPlaneTransform.setScale(2)
		oPlaneTransform.setTranslation(new QVector3D(0, -4, 4))

		oPlaneMaterial = new QPhongMaterial(oPlane)
		oPlaneMaterial.setDiffuse(new QColor() {setRGB(200,100,100,100)})

		oPlaneEntity = new QEntity(oRootEntity)
		oPlaneEntity.addComponent(oPlane)
		oPlaneEntity.addComponent(oPlaneMaterial)
		oPlaneEntity.addComponent(oPlaneTransform)
	 
		oView.setRootEntity(oRootEntity)

		oLayout = new QVBoxLayout()
		oLayout.AddWidget(oContainer)

		oWidget { 
			setwindowtitle("Using Qt3D - Plane") 
			resize(800,600)
			setLayout(oLayout) 
			showMaximized() 
		}

		exec()
	}

.. image:: qt3d_ex6.png
	:alt: Qt3D Example - Drawing Plane

	
.. index:: 
	pair: Using Qt3D; Texture

Texture
=======

.. code-block:: ring

	load "guilib.ring"

	new qApp {

		oView = new Qt3dwindow() 

		oWidget = new QWidget()	
		oContainer = oWidget.createWindowContainer(oView,oWidget,0)

		oRootEntity = new QEntity(oContainer) 

		oInput = new QInputAspect(oRootEntity)
			oView.registerAspect(oInput)

		oCameraEntity = oView.Camera()

		oCameraEntity.lens().setPerspectiveProjection(45.0, 16.0/9.0, 0.1, 1000.0)
			oCameraEntity.setPosition(new QVector3D(0, 0, 20.0))
			oCameraEntity.setUpVector(new QVector3D(0, 1, 0))
			oCameraEntity.setViewCenter(new QVector3D(0, 0, 0))	

		oLightEntity = new QEntity(oRootEntity)
			oLight = new QPointLight(oLightEntity)
		oLight.setColor(new QColor() { setRGB(255,255,255,255) })
		oLight.setIntensity(1)
		oLightEntity.addComponent(oLight)

		oLightTransform = new QTransform(oLightEntity)
		oLightTransform.setTranslation(oCameraEntity.position())
		oLightEntity.addComponent(oLightTransform)

		oCamController = new  QFirstPersonCameraController(oRootEntity)
			oCamController.setCamera(oCameraEntity)

		oCube = new  QCuboidMesh(oRootEntity) {
			setXextent(2)
			setYextent(2)
			setZextent(3)
		}

		oCubeTransform = new  QTransform(oCube)
		oCubeTransform.setScale(2)
		oCubeTransform.setTranslation(new QVector3D(3, 3, 3))

		oTextureLoader = new  QTextureLoader(oCube);
		oTextureLoader.setSource(new QUrl("file:///"+currentdir()+"/assets/texture/gold.jpg") )
		oCubeMaterial = new QTextureMaterial(oCube)
		oCubeMaterial.setTexture(oTextureLoader)

		oCubeEntity = new QEntity(oRootEntity)
		oCubeEntity.addComponent(oCube)
		oCubeEntity.addComponent(oCubeMaterial)
		oCubeEntity.addComponent(oCubeTransform)
	 
		oView.setRootEntity(oRootEntity)

		oLayout = new QVBoxLayout()
		oLayout.AddWidget(oContainer)

		oWidget { 
			setwindowtitle("Using Qt3D - Adding Texture") 
			resize(800,600)
			setLayout(oLayout) 
			showMaximized() 
		}

		exec()
	}

.. image:: qt3d_ex7.png
	:alt: Qt3D Example - Texture

.. index:: 
	pair: Using Qt3D; Key Press

Key Press
=========

.. code-block:: ring

	load "guilib.ring"

	new qApp {

		oView = new Qt3dwindow() 

		oWidget = new QWidget()	
		oContainer = oWidget.createWindowContainer(oView,oWidget,0)

		oRootEntity = new QEntity(oContainer) 

			oFilter = new qallevents(oView)
			oFilter.setKeyPressEvent("pKeyPress()")
			oView.installeventfilter(oFilter)

		oInput = new QInputAspect(oRootEntity)
			oView.registerAspect(oInput)

		oCameraEntity = oView.Camera()

		oCameraEntity.lens().setPerspectiveProjection(45.0, 16.0/9.0, 0.1, 1000.0)
			oCameraEntity.setPosition(new QVector3D(0, 0, 20.0))
			oCameraEntity.setUpVector(new QVector3D(0, 1, 0))
			oCameraEntity.setViewCenter(new QVector3D(0, 0, 0))	

		oLightEntity = new QEntity(oRootEntity)
			oLight = new QPointLight(oLightEntity)
		oLight.setColor(new QColor() { setRGB(255,255,255,255) })
		oLight.setIntensity(1)
		oLightEntity.addComponent(oLight)

		oLightTransform = new QTransform(oLightEntity)
		oLightTransform.setTranslation(oCameraEntity.position())
		oLightEntity.addComponent(oLightTransform)

		oCamController = new  QFirstPersonCameraController(oRootEntity)
			oCamController.setCamera(oCameraEntity)
		oCamController.setEnabled(False)

		oCube = new  QCuboidMesh(oRootEntity) {
			setXextent(2)
			setYextent(2)
			setZextent(3)
		}

		oCubeTransform = new  QTransform(oCube)
		oCubeTransform.setScale(2)
		oCubeTransform.setTranslation(new QVector3D(3, 3, 3))

		oTextureLoader = new  QTextureLoader(oCube);
		oTextureLoader.setSource(new QUrl("file:///"+currentdir()+"/assets/texture/gold.jpg") )
		oCubeMaterial = new QTextureMaterial(oCube)
		oCubeMaterial.setTexture(oTextureLoader)

		oCubeEntity = new QEntity(oRootEntity)
		oCubeEntity.addComponent(oCube)
		oCubeEntity.addComponent(oCubeMaterial)
		oCubeEntity.addComponent(oCubeTransform)
	 
		oView.setRootEntity(oRootEntity)

		oLayout = new QVBoxLayout()
		oLayout.AddWidget(oContainer)

		oWidget { 
			setwindowtitle("Using Qt3D - Moving Cube using the Keyboard") 
			resize(800,600)
			setLayout(oLayout) 
			showMaximized() 
		}

		oContainer.setfocus(0)

		exec()
	}

	func pKeyPress
		nKey = oFilter.getkeycode()
		oX = oCubeTransform.translation().x()
		oY = oCubeTransform.translation().y() 
		oZ = oCubeTransform.translation().z()
		switch nKey
			on Qt_Key_Right
				oX++
			on Qt_Key_Left
				oX--
			on Qt_Key_Up
				oY++
			on Qt_Key_Down
				oY--
		off
		oCubeTransform.setTranslation(new QVector3D(oX, oY, oZ))

.. image:: qt3d_ex8.png
	:alt: Qt3D Example - Key Press


.. index:: 
	pair: Using Qt3D; Object Picker

Object Picker
=============

.. code-block:: ring

	load "guilib.ring"

	new qApp {

		oView = new Qt3dwindow() 

		oWidget = new QWidget()	
		oContainer = oWidget.createWindowContainer(oView,oWidget,0)

		oRootEntity = new QEntity(oContainer) 

			oFilter = new qallevents(oView)
			oFilter.setKeyPressEvent("pKeyPress()")
			oView.installeventfilter(oFilter)

		oInput = new QInputAspect(oRootEntity)
			oView.registerAspect(oInput)

		oCameraEntity = oView.Camera()

		oCameraEntity.lens().setPerspectiveProjection(45.0, 16.0/9.0, 0.1, 1000.0)
			oCameraEntity.setPosition(new QVector3D(0, 0, 20.0))
			oCameraEntity.setUpVector(new QVector3D(0, 1, 0))
			oCameraEntity.setViewCenter(new QVector3D(0, 0, 0))	

		oLightEntity = new QEntity(oRootEntity)
			oLight = new QPointLight(oLightEntity)
		oLight.setColor(new QColor() { setRGB(255,255,255,255) })
		oLight.setIntensity(1)
		oLightEntity.addComponent(oLight)

		oLightTransform = new QTransform(oLightEntity)
		oLightTransform.setTranslation(oCameraEntity.position())
		oLightEntity.addComponent(oLightTransform)

		oCamController = new  QFirstPersonCameraController(oRootEntity)
			oCamController.setCamera(oCameraEntity)
		oCamController.setEnabled(False)

		oCube = new  QCuboidMesh(oRootEntity) {
			setXextent(2)
			setYextent(2)
			setZextent(3)
		}

		oCubeTransform = new  QTransform(oCube)
		oCubeTransform.setScale(2)
		oCubeTransform.setTranslation(new QVector3D(3, 3, 3))

		oTextureLoader = new  QTextureLoader(oCube);
		oTextureLoader.setSource(new QUrl("file:///"+currentdir()+"/assets/texture/gold.jpg") )
		oCubeMaterial = new QTextureMaterial(oCube)
		oCubeMaterial.setTexture(oTextureLoader)

		oCubeEntity = new QEntity(oRootEntity)
		oCubeEntity.addComponent(oCube)
		oCubeEntity.addComponent(oCubeMaterial)
		oCubeEntity.addComponent(oCubeTransform)
	 
		oPicker = new qObjectPicker(oCube) {
			setclickedevent("pClick()")
		}
		oCubeEntity.addComponent(oPicker)

		oView.setRootEntity(oRootEntity)

		oLayout = new QVBoxLayout()
		oLayout.AddWidget(oContainer)

		oWidget { 
			setwindowtitle("Using Qt3D - Object Picker - Click on the Cube using the Mouse") 
			resize(800,600)
			setLayout(oLayout) 
			showMaximized() 
		}

		oContainer.setfocus(0)

		exec()
	}

	func pKeyPress
		nKey = oFilter.getkeycode()
		oX = oCubeTransform.translation().x()
		oY = oCubeTransform.translation().y() 
		oZ = oCubeTransform.translation().z()
		switch nKey
			on Qt_Key_Right
				oX++
			on Qt_Key_Left
				oX--
			on Qt_Key_Up
				oY++
			on Qt_Key_Down
				oY--
		off
		oCubeTransform.setTranslation(new QVector3D(oX, oY, oZ))

	func pClick
		msginfo("Event","Click")
		oContainer.setfocus(0)


.. image:: qt3d_ex9.png
	:alt: Qt3D Example - Object Picker

.. index:: 
	pair: Using Qt3D; Frame Action

Frame Action
============

.. code-block:: ring

	load "guilib.ring"

	new qApp {

		oView = new Qt3dwindow() 

		oWidget = new QWidget()	
		oContainer = oWidget.createWindowContainer(oView,oWidget,0)

		oRootEntity = new QEntity(oContainer) 

		oInput = new QInputAspect(oRootEntity)
			oView.registerAspect(oInput)

		oCameraEntity = oView.Camera()

		oCameraEntity.lens().setPerspectiveProjection(45.0, 16.0/9.0, 0.1, 1000.0)
			oCameraEntity.setPosition(new QVector3D(0, 0, 20.0))
			oCameraEntity.setUpVector(new QVector3D(0, 1, 0))
			oCameraEntity.setViewCenter(new QVector3D(0, 0, 0))	

		oLightEntity = new QEntity(oRootEntity)
			oLight = new QPointLight(oLightEntity)
		oLight.setColor(new QColor() { setRGB(255,255,255,255) })
		oLight.setIntensity(1)
		oLightEntity.addComponent(oLight)

		oLightTransform = new QTransform(oLightEntity)
		oLightTransform.setTranslation(oCameraEntity.position())
		oLightEntity.addComponent(oLightTransform)

		oCamController = new  QFirstPersonCameraController(oRootEntity)
			oCamController.setCamera(oCameraEntity)
		oCamController.setEnabled(False)

		oCube = new  QCuboidMesh(oRootEntity) {
			setXextent(1)
			setYextent(1)
			setZextent(1)
		}

		oCubeTransform = new  QTransform(oCube)
		oCubeTransform.setScale(2)
		oCubeTransform.setTranslation(new QVector3D(-5, -5, -5))

		oTextureLoader = new  QTextureLoader(oCube);
		oTextureLoader.setSource(new QUrl("file:///"+currentdir()+"/assets/texture/gold.jpg") )
		oCubeMaterial = new QTextureMaterial(oCube)
		oCubeMaterial.setTexture(oTextureLoader)

		oCubeEntity = new QEntity(oRootEntity)
		oCubeEntity.addComponent(oCube)
		oCubeEntity.addComponent(oCubeMaterial)
		oCubeEntity.addComponent(oCubeTransform)
	 
		nAngle=0	nSpeed=0.1
		oFrameAction = new qFrameAction(oRootEntity) {
			settriggeredevent("pEvent()")
		}

		oView.setRootEntity(oRootEntity)

		oLayout = new QVBoxLayout()
		oLayout.AddWidget(oContainer)

		oWidget { 
			setwindowtitle("Using Qt3D - Frame Action") 
			resize(800,600)
			setLayout(oLayout) 
			showMaximized() 
		}

		exec()
	}

	func pEvent

		# Move the Cube
			oX = oCubeTransform.translation().x()
			oY = oCubeTransform.translation().y() 
			oZ = oCubeTransform.translation().z()
			if oX >= 4
				nSpeed=-0.1
			but oX <= -10
				nSpeed=0.1
			ok
			oCubeTransform.setTranslation(new QVector3D(oX+nSpeed, oY+nSpeed, oZ+nSpeed))

		# Rotate the Cube
			nAngle+=5  if nAngle=360  nAngle=0 ok
			oQ = new QQuaternion(0,0,0,0)
			oCubeTransform.setRotation(oQ.fromAxisAndAngle(new QVector3D(0, 1, 0), nAngle))

.. image:: qt3d_ex10.png
	:alt: Qt3D Example - Frame Action
