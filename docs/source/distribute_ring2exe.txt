.. index:: 
	single: Distributing Ring Application using Ring2EXE; Introduction

=============================================
Distributing Ring Applications using Ring2EXE
=============================================

In this chapter we will learn about distributing Ring applications.

Starting from Ring 1.6 we have a nice tool called Ring2EXE

Using Ring2EXE we can distribute applications quickly for Windows, Linux and macOS 


.. index:: 
	pair: Distributing Ring Application using Ring2EXE; Using Ring2EXE

Using Ring2EXE
==============

.. code-block:: none

		ring2exe filename.ring [Options]

This will set filename.ring as input to the program 	

The next files will be generated 

.. code-block:: none

		filename.ringo	  	(The Ring Object File - by Ring Compiler)
		filename.c	  	(The C Source code file
					 Contains the ringo file content
					 Will be generated by this program)
		filename_buildvc.bat 	(Will be executed to build filename.c using Visual C/C++)
		filename_buildgcc.bat 	(Will be executed to build filename.c using GNU C/C++)
		filename_buildclang.bat (Will be executed to build filename.c using CLang C/C++)
		filename.obj	  	(Will be generated by the Visual C/C++ compiler) 
		filename.exe 	  	(Will ge generated by the Visual C/C++ Linker)
		filename	  	(Executable File - On Linux & MacOS X platforms)


.. index:: 
	pair: Distributing Ring Application using Ring2EXE; Example

Example 
=======

We have test.ring contains the next code

.. code-block:: ring

	see "Hello, World!" + nl

To build th executable file for Windows 

.. code-block:: none
	
		ring2exe test.ring 

To run the program

.. code-block:: none

		test 

To build the executable file for Linux & macOS

.. code-block:: none

		ring2exe test.ring 

To run the program

.. code-block:: none

		./test


.. index:: 
	pair: Distributing Ring Application using Ring2EXE; Options

Options
=======

.. code-block:: none

		-keep       	 : Don't delete Temp. Files
		-static     	 : Build Standalone Executable File (Don't use ring.dll/ring.so/ring.dylib)
		-gui        	 : Build GUI Application (Hide the Console Window)
		-dist	    	 : Prepare application for distribution 
		-allruntime 	 : Include all libraries in distribution
		-mobileqt	 : Prepare Qt Project to distribute Ring Application for Mobile
		-noqt	    	 : Remove RingQt from distribution
		-noallegro 	 : Remove RingAllegro from distribution
		-noopenssl  	 : Remove RingOpenSSL from distribution
		-nolibcurl  	 : Remove RingLibCurl from distribution
		-nomysql    	 : Remove RingMySQL from distribution
		-noodbc     	 : Remove RingODBC from distribution
		-nosqlite   	 : Remove RingSQLite from distribution
		-noopengl   	 : Remove RingOpenGL from distribution
		-nofreeglut 	 : Remove RingFreeGLUT from distribution
		-nolibzip   	 : Remove RingLibZip from distribution
		-noconsolecolors : Remove RingConsoleColors from distribution
		-nocruntime	 : Remove C Runtime from distribution
		-qt	    	 : Add RingQt to distribution
		-allegro 	 : Add RingAllegro to distribution
		-openssl  	 : Add RingOpenSSL to distribution
		-libcurl  	 : Add RingLibCurl to distribution
		-mysql    	 : Add RingMySQL to distribution
		-odbc     	 : Add RingODBC to distribution
		-sqlite   	 : Add RingSQLite to distribution
		-opengl   	 : Add RingOpenGL to distribution
		-freeglut 	 : Add RingFreeGLUT to distribution
		-libzip   	 : Add RingLibZip to distribution
		-consolecolors   : Add RingConsoleColors to distribution
		-cruntime	 : Add C Runtime to distribution

.. index:: 
	pair: Distributing Ring Application using Ring2EXE; Building standalone console application

Building standalone console application
=======================================

Using the "-static" option we can build executable console application

So we don't have to use ring.dll, ring.so or ring.dylib 

This avoid only the need to Ring dynamic link library

If you are using another libraries, You will need to include it with your application. 

.. code-block:: none

		ring2exe test.ring -static


.. index:: 
	pair: Distributing Ring Application using Ring2EXE; Distributing RingAllegro Applications

Distributing RingAllegro Applications
=====================================

We have test2.ring contains the next code

.. code-block:: ring


	# Just a simple program to test Ring2EXE Tool!
	# Using RingAllegro

	load "gameengine.ring"  # Give Control to the Game Engine

	func main               # Called by the Game Engine

	        oGame = New Game        # Create the Game Object
        	{
                	title = "My First Game"
        	}     


To build the executable file and prepare for distributing the Game

We use "-dist" option and "-allruntime" to include all libraries

.. code-block:: none

	ring2exe test2.ring -dist -allruntime

After executing the previous command

On Windows we will have : target/windows folder
On Linux we will have : target/linux folder
On macOS we will have : target/macos folder

The previous command will add all of the Ring runtime libraries to our distribution

But we may need only RingAllegro, So it's better to use the next command

.. code-block:: none

	ring2exe test2.ring -dist -allegro -cruntime

This will produce small size distribution and will avoid the runtime files that we don't need!


.. index:: 
	pair: Distributing Ring Application using Ring2EXE; Distributing RingAllegro Applications

Distributing RingQt Applications
================================

We have test3.ring contains the next code

.. code-block:: ring

	# Just a simple program to test Ring2EXE Tool!
	# Using RingQt

	load "guilib.ring"

	new qApp {
		new qWidget() {
			setwindowtitle("Hello, World!")
			resize(400,400)
			show()
		}
		exec()
	}


To build the executable file and prepare for distributing the GUI application

We use "-dist" option and "-allruntime" to include all libraries

.. code-block:: none

	ring2exe test3.ring -dist -allruntime

After executing the previous command

On Windows we will have : target/windows folder
On Linux we will have : target/linux folder
On macOS we will have : target/macos folder

The previous command will add all of the Ring runtime libraries to our distribution

But we may need only RingQt, So it's better to use the next command

.. code-block:: none

	ring2exe test3.ring -dist -qt -cruntime

This will produce small size distribution and will avoid the runtime files that we don't need!