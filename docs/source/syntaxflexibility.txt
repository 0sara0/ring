==================
Syntax Flexibility
==================

In this chapter we will learn about some options that are provided automatically by the Ring
compiler for syntax flexibility.

Using "()" around the function parameters
=========================================

We can use () around the function parameters (optional).

Example:

.. code-block:: none

	hello()
	sum(3,4)

	func hello()
		see "Hello" + nl

	func sum(x,y)
		see x+y+nl
	
Output:

.. code-block:: none

	Hello
	7

Example:

.. code-block:: none

	myfunc = func x,y { see x + y + nl }

	call myfunc (3,4)

	myfunc2 = func (x,y) { see x+y+nl }

	call myfunc(3,4)

Output:

.. code-block:: none

	7
	7

Using Semi-colon after and between statements
=============================================

In Ring we can use semi-colon after and between statements (optional).

Example:

.. code-block:: none

	# Using semi-colon is optional

	see "Hello" + nl ; see "How are you?" + nl  ; see "Welcome to Ring" + nl ;
	one() ; two() ; three() ;
	func one ; see "one" + nl ;
	func two ; see "two" + nl ;
	func three ; see "three" + nl ;


Output:

.. code-block:: none


	Hello
	How are you?
	Welcome to Ring
	one
	two
	three

Using $ and @ in the start of the variable name
===============================================

You can use any unicode character in the variable name also we can use $ and @ in the name.

This feature may help, for example we can start global variables with $ and the object attributes
with @. 

In other languages like Ruby this is the rule, In the Ring language this is just an option without
any force from the Compiler.

example:

.. code-block:: none

	$global_variable = 5

	new test { hello() }	

	class test

		@instance_variable = 10

		func hello

			local_variable = 15

			see "Global   : " + $global_variable + nl + 
			    "Instance : " + @instance_variable + nl +
			    "Local    : " + local_variable + nl

Output:


.. code-block:: none

	Global   : 5
	Instance : 10
	Local    : 15

Using the 'elseif' keyword as 'but' in if statement
===================================================

if you don't like the 'but' keyword in if statement
Then you can use the 'elseif' keyword.

Example:

.. code-block:: none

	give x
	if x = 1 see "one"
	elseif x=2 see "two"
	elseif x=3 see "three"
	elseif x=4 see "four"
	else see "other"
	ok
	see nl

Using the 'end' keyword in different control structures
=======================================================

We can use the 'end' keyword to close differnt control structures
* If statement
* For loop
* Switch 
* While
* Try-Catch

Example:

.. code-block:: none

	see "if statement.." + nl
	x = 1
	if x = 1 
		see "one" + nl
	elseif x=2 
		see "two" + nl
	elseif x=3 
		see "three" + nl
	end
	see "for loop.." + nl
	for t = 1 to 10
		see t 
	end
	see nl
	see "switch..." + nl
	x = 1

	switch x
		on 1 see "one" + nl
		on 2 see "two" + nl
	end

	see "try catch..." + nl
	try
		x = 1 / 0
	catch
		see "catching error" + nl
	end

Output::

.. code-block:: none

	if statement..
	one
	for loop..
	12345678910
	switch...
	one
	try catch...
	catching error



