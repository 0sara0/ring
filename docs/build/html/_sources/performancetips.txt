.. index:: 
     single: Performance Tips; Introduction

================
Performance Tips
================

In this chapter we will learn more about the Ring performance.

.. index:: 
     pair: Performance Tips; Introduction

Introduction
============

Ring is designed to be a simple, small and flexible language in the first place, but also it is fast enough for many applications.

Ring can do each of the next tasks in around 1 second using normal computers in the market during the last 5 years

(1) Compiling 100,000 lines of code
(2) Executing empty loop that count from 1 to 10,000,000
(3) Executing 1000 search operation using linear search in a list contains 100,000 items, trying to find the last item (The worst case)
(4) Creating list contains 1,000,000 items then summing all of the list items
(5) Adding 20,000 items to the ListWidget in GUI applications
(6) Adding 5,000 nodes to the TreeWidget in GUI applications
(7) Printing 10,000 messages to the terminal in Console applications

Also when we need more speed we can use C/C++ extensions! 

.. index:: 
     pair: Performance Tips; Search Operation

Search Operation
================

Example:

.. code-block:: ring

	? "Create list contains 100,000 items"
	aList = 1:100000

	? "Do 1000 search operation - Find the last item (Worst Case!)"
	c = clock() 

	for t = 1 to 1000
		find(alist,100000)
	next

	? "Time: " + ( clock() - c ) / clockspersecond() + " seconds"

Output:

.. code-block:: none

	Create list contains 100,000 items
	Do 1000 search operation - Find the last item (Worst Case!)
	Time: 0.87 seconds


Many Tree Items
===============

Example:

.. code-block:: ring

	load "guilib.ring"

	func main

	new qApp {
		win = new qWidget() { 
			move(100,100) resize(500,500)
			setWindowTitle("Many Tree Items - Testing Performance")
			tree = new qTreeWidget(win) { 
				blocksignals(True) setUpdatesEnabled(False)
				root = new qTreeWidgetItem()
				root.setText(0,"The Root Node")
				t1 = clock()
				for t = 1 to 5000
					oItem = new qTreeWidgetItem()
					oItem.settext(0,"Item " + t)
					root.addchild(oItem)
				next
				cTime = (clock()-t1)/clockspersecond()
				setHeaderLabel("Creating 5000 nodes in " + cTime + " seconds.")
				addTopLevelItem(root)
				expanditem(root)
				blocksignals(False) setUpdatesEnabled(True)
			}
			oLayout = new qVBoxLayout() {
				addWidget(tree)
			}
			setLayout(oLayout)
			show() 
		}
		exec()
	}
	

Output:

.. image:: manytreeitems.png
	:alt: Many Tree Items
