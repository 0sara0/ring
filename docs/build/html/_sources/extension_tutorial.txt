.. index:: 
	single: Tutorial: Ring Extensions in C/C++; Introduction

============
Introduction
============

In this chapter we will see simple examples about using C code in Ring programs

.. index:: 
	pair: Tutorial: Ring Extensions in C/C++; Hello World

Hello World
===========

Sample : ring/extensions/tutorial/helloworld

The file mylib.c contains

.. code-block:: c

	#include "ring.h"

	#include "stdlib.h"

	RING_FUNC(ring_myfunction)
	{	
		printf("Hello, World!");
	}

	RING_API void ringlib_init(RingState *pRingState)
	{
		ring_vm_funcregister("myfunction",ring_myfunction);
	}

As we see in the source code, we start with including the ring.h file which contains the definitions for Ring API

Then we use the RING_FUNC macro to define new functions, it's a good idea to start the function definition with ring_ to make these definitions unique and different than normal C functions

Then we have the function ringlib_init that will be called when the extension is loaded by the Ring VM

In this function we use the ring_vm_funcregister() function to register the new functions in Ring VM

Then we build the extension using :

buildvc.bat

The file buildvc.bat contains the next commands to build the extension using Visual C/C++


.. code-block:: none

	cls
	call ../../../src/locatevc.bat
	cl /c /DEBUG mylib.c -I"..\..\..\include"
	link /DEBUG mylib.obj  ..\..\..\lib\ring.lib /DLL /OUT:mylib.dll /SUBSYSTEM:CONSOLE,"5.01" 
	del mylib.obj

Then we test the function using

.. code-block:: none

	ring test.ring

The file test.ring contains

.. code-block:: ring

	? "Loading Library"
	loadlib("mylib.dll")

	? "Calling a C Function"
	myfunction()

Output

.. code-block:: none

	Loading Library
	Calling a C Function
	Hello, World!

.. index:: 
	pair: Tutorial: Ring Extensions in C/C++; Build the extension on different platforms

Build the extension on different platforms
==========================================

Sample : ring/extensions/tutorial/helloworld2

This extension is the same as the first one but in this time, we support Windows, Linux and macOS.

We will use the next files

.. code-block:: none

	buildvc.bat
	buildgcc.sh
	buildclang.sh

Where we use buildvc.bat in Windows, buildgcc.sh in Linux and buildclang.sh in macOS

The file buildgcc.sh contains the next commands

.. code-block:: none

	gcc -c -fpic mylib.c -I $PWD/../../../include 
	gcc -shared -o libmylib.so mylib.o -L $PWD/../../../lib -lring
	sudo cp libmylib.so /usr/lib
	sudo cp libmylib.so /usr/lib64

The file buildclang.sh contains 

.. code-block:: none

	clang -c -fpic mylib.c -I $PWD/../../../include
	clang -dynamiclib -o libmylib.dylib mylib.o  -L $PWD/../../../lib  -lring
	cp libmylib.dylib /usr/local/lib

This time we use mylib.ring instead of using LoadLib() function directly

In mylib.ring we have the next code

.. code-block:: ring

	if iswindows()
		LoadLib("mylib.dll")
	but ismacosx()
		LoadLib("libmylib.dylib")
	else
		LoadLib("libmylib.so")
	ok

The file test.ring contains

.. code-block:: ring

	? "Loading Library"
	load "mylib.ring"

	? "Calling a C Function"
	myfunction()

Then we test the function using

.. code-block:: none

	ring test.ring

Output

.. code-block:: none

	Loading Library
	Calling a C Function
	Hello, World!

.. index:: 
	pair: Tutorial: Ring Extensions in C/C++; Sum Two Numbers

Sum Two Numbers
===============

Sample : ring/extensions/tutorial/sumtwonumbers

In this extension we learn how to create a C function to sum two numbers

This extension is an update to the (Hello World 2) extension in : ring/extensions/tutorial/helloworld2 folder

In mylib.c we update the file to add

.. code-block:: c

	RING_FUNC(ring_sumtwonumbers)
	{
		double nNum1,nNum2,nSum;
		// Check Parameters Count
			if (RING_API_PARACOUNT != 2) {
				RING_API_ERROR(RING_API_MISS2PARA);
				return;
			}
		// Check Parameters Type
			if ( ! (RING_API_ISNUMBER(1) && RING_API_ISNUMBER(2)) ) {
				RING_API_ERROR(RING_API_BADPARATYPE);
				return;
			}
		// Sum Numbers 
			nNum1 = RING_API_GETNUMBER(1);
			nNum2 = RING_API_GETNUMBER(2);
			nSum  = nNum1 + nNum2 ;
		// Return Output
			RING_API_RETNUMBER(nSum);
	}

Then we register the new function

.. code-block:: c

	ring_vm_funcregister("sumtwonumbers",ring_sumtwonumbers);

The previous code is written to check errors, and to be easy to understand

We can write short code like

.. code-block:: c

		RING_API_RETNUMBER(RING_API_GETNUMBER(1) + RING_API_GETNUMBER(2));

The file test.ring contains

.. code-block:: ring

	? "Loading Library"
	load "mylib.ring"

	? "Calling a C Function"
	myfunction()

	? "Sum Two Numbers (3,5)"
	? SumTwoNumbers(3,5)

Then we test the function using

.. code-block:: none

	ring test.ring

Output

.. code-block:: none

	Loading Library
	Calling a C Function
	Hello, World!
	Sum Two Numbers (3,5)
	8


.. index:: 
	pair: Tutorial: Ring Extensions in C/C++; Say Hello

Say Hello
=========

Sample : ring/extensions/tutorial/sayhello

In this extension we learn how to create a C function that get a name as string then say hello.

This extension is an update to the (sumtwonumbers) extension in : ring/extensions/tutorial/sumtwonumbers folder

In mylib.c we update the file to add

.. code-block:: c

	RING_FUNC(ring_sayhello)
	{
		// Check Parameters Count
			if (RING_API_PARACOUNT != 1) {
				RING_API_ERROR(RING_API_MISS1PARA);
				return;
			}
		// Check Parameters Type
			if ( ! RING_API_ISSTRING(1) ) {
				RING_API_ERROR(RING_API_BADPARATYPE);
				return;
			}
		printf("Hello %s\n",RING_API_GETSTRING(1));
	}

Then we register the new function

.. code-block:: c

	ring_vm_funcregister("sayhello",ring_sayhello);

The file test.ring contains

.. code-block:: ring

	? "Loading Library"
	load "mylib.ring"

	? "Calling a C Function"
	myfunction()

	? "Sum Two Numbers (3,5)"
	? SumTwoNumbers(3,5)

	? "Say Hello"
	SayHello("Mahmoud")

Then we test the function using

.. code-block:: none

	ring test.ring

Output

.. code-block:: none

	Loading Library
	Calling a C Function
	Hello, World!
	Sum Two Numbers (3,5)
	8
	Say Hello
	Hello Mahmoud


.. index:: 
	pair: Tutorial: Ring Extensions in C/C++; Sum List of Numbers

Sum List of Numbers
===================

Sample : ring/extensions/tutorial/sumlist

In this extension we learn how to create a C function that sum list of numbers.

This extension is an update to the (sayhello) extension in : ring/extensions/tutorial/sayhello folder

In mylib.c we update the file to add

.. code-block:: c

	RING_FUNC(ring_sumlist)
	{
		List *pList;
		int x,nSum;
		// Check Parameters Count
			if (RING_API_PARACOUNT != 1) {
				RING_API_ERROR(RING_API_MISS1PARA);
				return;
			}
		// Check Parameters Type
			if ( ! RING_API_ISLIST(1) ) {
				RING_API_ERROR(RING_API_BADPARATYPE);
				return;
			}
		// Sum List Numbers 
			nSum = 0;
			pList = RING_API_GETLIST(1);
			for(x=1 ; x <= ring_list_getsize(pList) ; x++) {
				if ( ring_list_isdouble(pList,x) ) {
					nSum += (int) ring_list_getdouble(pList,x) ;
				}
			}
		// Return Output 
			RING_API_RETNUMBER(nSum);
	}

Then we register the new function

.. code-block:: c

	ring_vm_funcregister("sumlist",ring_sumlist);

The file test.ring contains

.. code-block:: ring

	? "Loading Library"
	load "mylib.ring"

	? "Calling a C Function"
	myfunction()

	? "Sum Two Numbers (3,5)"
	? SumTwoNumbers(3,5)

	? "Say Hello"
	SayHello("Mahmoud")

	? "Sum List contains numbers from 1 to 10"
	aList = 1:10
	? SumList(aList)

Then we test the function using

.. code-block:: none

	ring test.ring

Output

.. code-block:: none

	Loading Library
	Calling a C Function
	Hello, World!
	Sum Two Numbers (3,5)
	8
	Say Hello
	Hello Mahmoud
	Sum List contains numbers from 1 to 10
	55
