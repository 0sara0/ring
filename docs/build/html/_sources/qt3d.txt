.. index:: 
	Single: Using Qt3D;  Introduction

==========
Using Qt3D
==========

In this chapter we will learn how to use Qt3D through many samples.


.. index:: 
	pair: Using Qt3D; Drawing Cube

Drawing Cube
============

.. code-block:: ring

	load "guilib.ring"

	new qApp {

		oView = new Qt3dwindow() 

		oWidget = new QWidget()	
		oContainer = oWidget.createWindowContainer(oView,oWidget,0)

		oRootEntity = new QEntity(oContainer) 

		oInput = new QInputAspect(oRootEntity)
			oView.registerAspect(oInput)

		oCameraEntity = oView.Camera()

		oCameraEntity.lens().setPerspectiveProjection(45.0, 16.0/9.0, 0.1, 1000.0)
			oCameraEntity.setPosition(new QVector3D(0, 0, 20.0))
			oCameraEntity.setUpVector(new QVector3D(0, 1, 0))
			oCameraEntity.setViewCenter(new QVector3D(0, 0, 0))	

		oLightEntity = new QEntity(oRootEntity)
			oLight = new QPointLight(oLightEntity)
		oLight.setColor(new QColor() { setRGB(255,255,255,255) })
		oLight.setIntensity(1)
		oLightEntity.addComponent(oLight)

		oLightTransform = new QTransform(oLightEntity)
		oLightTransform.setTranslation(oCameraEntity.position())
		oLightEntity.addComponent(oLightTransform)

		oCamController = new  QFirstPersonCameraController(oRootEntity)
			oCamController.setCamera(oCameraEntity)

		oCube = new  QCuboidMesh(oRootEntity) {
			setXextent(2)
			setYextent(2)
			setZextent(3)
		}

		oCubeTransform = new  QTransform(oCube)
		oCubeTransform.setScale(2)
		oCubeTransform.setTranslation(new QVector3D(3, 3, 3))

		oCubeMaterial = new QPhongMaterial(oCube)
		oCubeMaterial.setDiffuse(new QColor() {setRGB(200,100,100,100)})

		oCubeEntity = new QEntity(oRootEntity)
		oCubeEntity.addComponent(oCube)
		oCubeEntity.addComponent(oCubeMaterial)
		oCubeEntity.addComponent(oCubeTransform)
	 
		oView.setRootEntity(oRootEntity)

		oLayout = new QVBoxLayout()
		oLayout.AddWidget(oContainer)

		oWidget { 
			setwindowtitle("Using Qt3D - Cube") 
			resize(800,600)
			setLayout(oLayout) 
			showMaximized() 
		}

		exec()
	}

.. image:: qt3d_ex1.png
	:alt: Qt3D Example - Drawing Cube


.. index:: 
	pair: Using Qt3D; Drawing Torus

Drawing Torus
=============

.. code-block:: ring

	load "guilib.ring"

	new qApp {

		oView = new Qt3dwindow() 

		oWidget = new QWidget()	
		oContainer = oWidget.createWindowContainer(oView,oWidget,0)

		oRootEntity = new QEntity(oContainer) 

		oInput = new QInputAspect(oRootEntity)
			oView.registerAspect(oInput)

		oCameraEntity = oView.Camera()

		oCameraEntity.lens().setPerspectiveProjection(45.0, 16.0/9.0, 0.1, 1000.0)
			oCameraEntity.setPosition(new QVector3D(0, 0, 20.0))
			oCameraEntity.setUpVector(new QVector3D(0, 1, 0))
			oCameraEntity.setViewCenter(new QVector3D(0, 0, 0))	

		oLightEntity = new QEntity(oRootEntity)
			oLight = new QPointLight(oLightEntity)
		oLight.setColor(new QColor() { setRGB(255,255,255,255) })
		oLight.setIntensity(1)
		oLightEntity.addComponent(oLight)

		oLightTransform = new QTransform(oLightEntity)
		oLightTransform.setTranslation(oCameraEntity.position())
		oLightEntity.addComponent(oLightTransform)

		oCamController = new  QFirstPersonCameraController(oRootEntity)
			oCamController.setCamera(oCameraEntity)

		oTorus = new  QTorusMesh(oRootEntity)
			oTorus.setRadius(1.0)
			oTorus.setMinorRadius(0.4)
			oTorus.setRings(100)
			oTorus.setSlices(20)

		oTorusTransform = new  QTransform(oTorus)
		oTorusTransform.setScale(2)
		oTorusTransform.setTranslation(new QVector3D(3, 3, 3))

		oTorusMaterial = new QPhongMaterial(oTorus)
		oTorusMaterial.setDiffuse(new QColor() {setRGB(200,100,100,100)})

		oTorusEntity = new QEntity(oRootEntity)
		oTorusEntity.addComponent(oTorus)
		oTorusEntity.addComponent(oTorusMaterial)
		oTorusEntity.addComponent(oTorusTransform)
	 
		oView.setRootEntity(oRootEntity)

		oLayout = new QVBoxLayout()
		oLayout.AddWidget(oContainer)

		oWidget { 
			setwindowtitle("Using Qt3D - Torus") 
			resize(800,600)
			setLayout(oLayout) 
			showMaximized() 
		}

		exec()
	}

.. image:: qt3d_ex2.png
	:alt: Qt3D Example - Drawing Torus

.. index:: 
	pair: Using Qt3D; Drawing Sphere

Drawing Sphere
==============

.. code-block:: ring

	load "guilib.ring"

	new qApp {

		oView = new Qt3dwindow() 

		oWidget = new QWidget()	
		oContainer = oWidget.createWindowContainer(oView,oWidget,0)

		oRootEntity = new QEntity(oContainer) 

		oInput = new QInputAspect(oRootEntity)
			oView.registerAspect(oInput)

		oCameraEntity = oView.Camera()

		oCameraEntity.lens().setPerspectiveProjection(45.0, 16.0/9.0, 0.1, 1000.0)
			oCameraEntity.setPosition(new QVector3D(0, 0, 20.0))
			oCameraEntity.setUpVector(new QVector3D(0, 1, 0))
			oCameraEntity.setViewCenter(new QVector3D(0, 0, 0))	

		oLightEntity = new QEntity(oRootEntity)
			oLight = new QPointLight(oLightEntity)
		oLight.setColor(new QColor() { setRGB(255,255,255,255) })
		oLight.setIntensity(1)
		oLightEntity.addComponent(oLight)

		oLightTransform = new QTransform(oLightEntity)
		oLightTransform.setTranslation(oCameraEntity.position())
		oLightEntity.addComponent(oLightTransform)

		oCamController = new  QFirstPersonCameraController(oRootEntity)
			oCamController.setCamera(oCameraEntity)

		oSphere = new  QSphereMesh(oRootEntity)
			oSphere.setRadius(1.0)
			oSphere.setRings(100)
			oSphere.setSlices(20)

		oSphereTransform = new  QTransform(oSphere)
		oSphereTransform.setScale(2)
		oSphereTransform.setTranslation(new QVector3D(3, 3, 3))

		oSphereMaterial = new QPhongMaterial(oSphere)
		oSphereMaterial.setDiffuse(new QColor() {setRGB(200,100,100,100)})

		oSphereEntity = new QEntity(oRootEntity)
		oSphereEntity.addComponent(oSphere)
		oSphereEntity.addComponent(oSphereMaterial)
		oSphereEntity.addComponent(oSphereTransform)
	 
		oView.setRootEntity(oRootEntity)

		oLayout = new QVBoxLayout()
		oLayout.AddWidget(oContainer)

		oWidget { 
			setwindowtitle("Using Qt3D - Sphere") 
			resize(800,600)
			setLayout(oLayout) 
			showMaximized() 
		}

		exec()
	}

.. image:: qt3d_ex3.png
	:alt: Qt3D Example - Drawing Sphere

.. index:: 
	pair: Using Qt3D; Drawing Cylinder

Drawing Cylinder
================

.. code-block:: ring

	load "guilib.ring"

	new qApp {

		oView = new Qt3dwindow() 

		oWidget = new QWidget()	
		oContainer = oWidget.createWindowContainer(oView,oWidget,0)

		oRootEntity = new QEntity(oContainer) 

		oInput = new QInputAspect(oRootEntity)
			oView.registerAspect(oInput)

		oCameraEntity = oView.Camera()

		oCameraEntity.lens().setPerspectiveProjection(45.0, 16.0/9.0, 0.1, 1000.0)
			oCameraEntity.setPosition(new QVector3D(0, 0, 20.0))
			oCameraEntity.setUpVector(new QVector3D(0, 1, 0))
			oCameraEntity.setViewCenter(new QVector3D(0, 0, 0))	

		oLightEntity = new QEntity(oRootEntity)
			oLight = new QPointLight(oLightEntity)
		oLight.setColor(new QColor() { setRGB(255,255,255,255) })
		oLight.setIntensity(1)
		oLightEntity.addComponent(oLight)

		oLightTransform = new QTransform(oLightEntity)
		oLightTransform.setTranslation(oCameraEntity.position())
		oLightEntity.addComponent(oLightTransform)

		oCamController = new  QFirstPersonCameraController(oRootEntity)
			oCamController.setCamera(oCameraEntity)


		oCylinder = new  QCylinderMesh(oRootEntity)
			oCylinder.setRadius(1)
			oCylinder.setRings(100)
			oCylinder.setSlices(20)
		oCylinder.setLength(5)

		oCylinderTransform = new  QTransform(oCylinder)
		oCylinderTransform.setScale(2)
		oCylinderTransform.setTranslation(new QVector3D(1, 0, 3))

		oCylinderMaterial = new QPhongMaterial(oCylinder)
		oCylinderMaterial.setDiffuse(new QColor() {setRGB(200,100,100,100)})

		oCylinderEntity = new QEntity(oRootEntity)
		oCylinderEntity.addComponent(oCylinder)
		oCylinderEntity.addComponent(oCylinderMaterial)
		oCylinderEntity.addComponent(oCylinderTransform)
	 
		oView.setRootEntity(oRootEntity)

		oLayout = new QVBoxLayout()
		oLayout.AddWidget(oContainer)

		oWidget { 
			setwindowtitle("Using Qt3D - Cylinder") 
			resize(800,600)
			setLayout(oLayout) 
			showMaximized() 
		}

		exec()
	}

.. image:: qt3d_ex3.png
	:alt: Qt3D Example - Drawing Cylinder
