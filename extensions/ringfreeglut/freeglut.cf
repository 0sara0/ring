<code>

/* 
	RingFreeGLUT Extension
	Copyright (c) 2017 Mahmoud Fayed <msfclipper@yahoo.com> 
*/

<filter> ismacosx()
#include <GLUT/glut.h>
</filter>

<filter> not ismacosx()
#include <GL/glut.h>
</filter>


VM *pRingVMObject ;
char cDisplayFunction[250];
char cReshapeFunction[250];
int nReshapeWidth ;
int nReshapeHeight ;
char cIdleFunction[250];
char cKeyboardFunction[250];
char cSpecialFunction[250];
int nGLUTEventKey ;
int nGLUTEventX ;
int nGLUTEventY ;

</code>

<runcode>
aNumberTypes + "GLint"
aEnumTypes + "GLbitfield"
aEnumTypes + "GLenum"
aEnumTypes + "GLfloat"
</runcode>


<register>
void glutInit(void)
void glutDisplayFunc(const char *)
void glutReshapeFunc(const char *)
int glutReshapeWidth(void)
int glutReshapeHeight(void)
void glutIdleFunc(const char *)
void glutKeyboardFunc(const char *)
void glutSpecialFunc(const char *)
int glutEventKey(void)
int glutEventX(void)
int glutEventY(void)
</register>

<code>

RING_FUNC(ring_glutInit)
{
	VM *pVM ;
	if ( RING_API_PARACOUNT != 0 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	pVM = (VM *) pPointer ;
	glutInit( & pVM->pRingState->argc, pVM->pRingState->argv);
}

void displayFunction(void)
{
	ring_vm_runcode(pRingVMObject,cDisplayFunction) ;
}

RING_FUNC(ring_glutDisplayFunc)
{
	if ( RING_API_PARACOUNT != 1 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	if ( RING_API_ISSTRING(1) ) {
		strcpy(cDisplayFunction, RING_API_GETSTRING(1) ) ;
		pRingVMObject = (VM *) pPointer ;
		glutDisplayFunc(displayFunction);
	}
}

void reshapeFunction(int w, int h)
{
	nReshapeWidth = w;
	nReshapeHeight = h ;
	ring_vm_runcode(pRingVMObject,cReshapeFunction) ;
}

RING_FUNC(ring_glutReshapeFunc)
{
	if ( RING_API_PARACOUNT != 1 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	if ( RING_API_ISSTRING(1) ) {
		strcpy(cReshapeFunction, RING_API_GETSTRING(1) ) ;
		pRingVMObject = (VM *) pPointer ;
		glutReshapeFunc(reshapeFunction);
	}
}

RING_FUNC(ring_glutReshapeWidth)
{
	RING_API_RETNUMBER(nReshapeWidth);
}

RING_FUNC(ring_glutReshapeHeight)
{
	RING_API_RETNUMBER(nReshapeHeight);
}

void IdleFunction(void)
{
	ring_vm_runcode(pRingVMObject,cIdleFunction) ;
}

RING_FUNC(ring_glutIdleFunc)
{
	if ( RING_API_PARACOUNT != 1 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	if ( RING_API_ISSTRING(1) ) {
		strcpy(cIdleFunction, RING_API_GETSTRING(1) ) ;
		pRingVMObject = (VM *) pPointer ;
		glutIdleFunc(IdleFunction);
	}
}

void KeyboardFunction(unsigned char key, int x, int y)
{
	nGLUTEventKey = (int) key ;
	nGLUTEventX = x ;
	nGLUTEventY = y ;
	ring_vm_runcode(pRingVMObject,cKeyboardFunction) ;
}

RING_FUNC(ring_glutKeyboardFunc)
{
	if ( RING_API_PARACOUNT != 1 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	if ( RING_API_ISSTRING(1) ) {
		strcpy(cKeyboardFunction, RING_API_GETSTRING(1) ) ;
		pRingVMObject = (VM *) pPointer ;
		glutKeyboardFunc(KeyboardFunction);
	}
}

void SpecialFunction(int key, int x, int y)
{
	nGLUTEventKey = key ;
	nGLUTEventX = x ;
	nGLUTEventY = y ;
	ring_vm_runcode(pRingVMObject,cSpecialFunction) ;
}

RING_FUNC(ring_glutSpecialFunc)
{
	if ( RING_API_PARACOUNT != 1 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	if ( RING_API_ISSTRING(1) ) {
		strcpy(cSpecialFunction, RING_API_GETSTRING(1) ) ;
		pRingVMObject = (VM *) pPointer ;
		glutSpecialFunc(SpecialFunction);
	}
}

RING_FUNC(ring_glutEventKey) {
	RING_API_RETNUMBER(nGLUTEventKey);
}

RING_FUNC(ring_glutEventX) {
	RING_API_RETNUMBER(nGLUTEventX);
}

RING_FUNC(ring_glutEventY) {
	RING_API_RETNUMBER(nGLUTEventY);
}

</code>

<comment>
FreeGLUT Constants and Functions
</comment>

<constant>
GLUT_RGB                           
GLUT_RGBA                         
GLUT_INDEX                         
GLUT_SINGLE                        
GLUT_DOUBLE                        
GLUT_ACCUM                     
GLUT_ALPHA                     
GLUT_DEPTH                     
GLUT_STENCIL                    
GLUT_MULTISAMPLE                
GLUT_STEREO                    
GLUT_LUMINANCE                     
GLUT_KEY_F1
GLUT_KEY_F2
GLUT_KEY_F3
GLUT_KEY_F4
GLUT_KEY_F5
GLUT_KEY_F6
GLUT_KEY_F7
GLUT_KEY_F8
GLUT_KEY_F9
GLUT_KEY_F10
GLUT_KEY_F11
GLUT_KEY_F12
GLUT_KEY_LEFT
GLUT_KEY_UP
GLUT_KEY_RIGHT
GLUT_KEY_DOWN
GLUT_KEY_PAGE_UP
GLUT_KEY_PAGE_DOWN
GLUT_KEY_HOME
GLUT_KEY_END
GLUT_KEY_INSERT
GLUT_LEFT_BUTTON
GLUT_MIDDLE_BUTTON
GLUT_RIGHT_BUTTON 
GLUT_DOWN 
GLUT_UP  
GLUT_LEFT
GLUT_ENTERED
GLUT_MENU_NOT_IN_USE      
GLUT_MENU_IN_USE                 
GLUT_NOT_VISIBLE                
GLUT_VISIBLE              
GLUT_HIDDEN                    
GLUT_FULLY_RETAINED            
GLUT_PARTIALLY_RETAINED           
GLUT_FULLY_COVERED 
GLUT_WINDOW_X                      
GLUT_WINDOW_Y                      
GLUT_WINDOW_WIDTH               
GLUT_WINDOW_HEIGHT               
GLUT_WINDOW_BUFFER_SIZE            
GLUT_WINDOW_STENCIL_SIZE          
GLUT_WINDOW_DEPTH_SIZE             
GLUT_WINDOW_RED_SIZE             
GLUT_WINDOW_GREEN_SIZE              
GLUT_WINDOW_BLUE_SIZE              
GLUT_WINDOW_ALPHA_SIZE             
GLUT_WINDOW_ACCUM_RED_SIZE       
GLUT_WINDOW_ACCUM_GREEN_SIZE      
GLUT_WINDOW_ACCUM_BLUE_SIZE        
GLUT_WINDOW_ACCUM_ALPHA_SIZE       
GLUT_WINDOW_DOUBLEBUFFER          
GLUT_WINDOW_RGBA                   
GLUT_WINDOW_PARENT               
GLUT_WINDOW_NUM_CHILDREN           
GLUT_WINDOW_COLORMAP_SIZE        
GLUT_WINDOW_NUM_SAMPLES          
GLUT_WINDOW_STEREO                
GLUT_WINDOW_CURSOR                 
GLUT_SCREEN_WIDTH                  
GLUT_SCREEN_HEIGHT                 
GLUT_SCREEN_WIDTH_MM             
GLUT_SCREEN_HEIGHT_MM             
GLUT_MENU_NUM_ITEMS                
GLUT_DISPLAY_MODE_POSSIBLE         
GLUT_INIT_WINDOW_X                 
GLUT_INIT_WINDOW_Y                 
GLUT_INIT_WINDOW_WIDTH             
GLUT_INIT_WINDOW_HEIGHT            
GLUT_INIT_DISPLAY_MODE             
GLUT_ELAPSED_TIME                  
GLUT_WINDOW_FORMAT_ID             
GLUT_HAS_KEYBOARD                  
GLUT_HAS_MOUSE                    
GLUT_HAS_SPACEBALL                
GLUT_HAS_DIAL_AND_BUTTON_BOX       
GLUT_HAS_TABLET                  
GLUT_NUM_MOUSE_BUTTONS             
GLUT_NUM_SPACEBALL_BUTTONS      
GLUT_NUM_BUTTON_BOX_BUTTONS      
GLUT_NUM_DIALS                  
GLUT_NUM_TABLET_BUTTONS          
GLUT_DEVICE_IGNORE_KEY_REPEAT    
GLUT_DEVICE_KEY_REPEAT            
GLUT_HAS_JOYSTICK                
GLUT_OWNS_JOYSTICK                 
GLUT_JOYSTICK_BUTTONS            
GLUT_JOYSTICK_AXES                
GLUT_JOYSTICK_POLL_RATE           
GLUT_OVERLAY_POSSIBLE             
GLUT_LAYER_IN_USE               
GLUT_HAS_OVERLAY                  
GLUT_TRANSPARENT_INDEX           
GLUT_NORMAL_DAMAGED            
GLUT_OVERLAY_DAMAGED           
GLUT_VIDEO_RESIZE_POSSIBLE      
GLUT_VIDEO_RESIZE_IN_USE      
GLUT_VIDEO_RESIZE_X_DELTA        
GLUT_VIDEO_RESIZE_Y_DELTA       
GLUT_VIDEO_RESIZE_WIDTH_DELTA    
GLUT_VIDEO_RESIZE_HEIGHT_DELTA    
GLUT_VIDEO_RESIZE_X             
GLUT_VIDEO_RESIZE_Y             
GLUT_VIDEO_RESIZE_WIDTH         
GLUT_VIDEO_RESIZE_HEIGHT       
GLUT_NORMAL                   
GLUT_OVERLAY                   
GLUT_ACTIVE_SHIFT              
GLUT_ACTIVE_CTRL             
GLUT_ACTIVE_ALT              
GLUT_CURSOR_RIGHT_ARROW       
GLUT_CURSOR_LEFT_ARROW       
GLUT_CURSOR_INFO               
GLUT_CURSOR_DESTROY         
GLUT_CURSOR_HELP               
GLUT_CURSOR_CYCLE               
GLUT_CURSOR_SPRAY            
GLUT_CURSOR_WAIT               
GLUT_CURSOR_TEXT             
GLUT_CURSOR_CROSSHAIR          
GLUT_CURSOR_UP_DOWN             
GLUT_CURSOR_LEFT_RIGHT          
GLUT_CURSOR_TOP_SIDE           
GLUT_CURSOR_BOTTOM_SIDE        
GLUT_CURSOR_LEFT_SIDE          
GLUT_CURSOR_RIGHT_SIDE        
GLUT_CURSOR_TOP_LEFT_CORNER      
GLUT_CURSOR_TOP_RIGHT_CORNER     
GLUT_CURSOR_BOTTOM_RIGHT_CORNER 
GLUT_CURSOR_BOTTOM_LEFT_CORNER   
GLUT_CURSOR_INHERIT               
GLUT_CURSOR_NONE                 
GLUT_CURSOR_FULL_CROSSHAIR       
GLUT_RED                         
GLUT_GREEN                      
GLUT_BLUE                         
GLUT_KEY_REPEAT_OFF            
GLUT_KEY_REPEAT_ON             
GLUT_KEY_REPEAT_DEFAULT     
GLUT_JOYSTICK_BUTTON_A            
GLUT_JOYSTICK_BUTTON_B          
GLUT_JOYSTICK_BUTTON_C          
GLUT_JOYSTICK_BUTTON_D          
GLUT_GAME_MODE_ACTIVE            
GLUT_GAME_MODE_POSSIBLE         
GLUT_GAME_MODE_WIDTH             
GLUT_GAME_MODE_HEIGHT            
GLUT_GAME_MODE_PIXEL_DEPTH       
GLUT_GAME_MODE_REFRESH_RATE       
GLUT_GAME_MODE_DISPLAY_CHANGED 

</constant>

void glutInitWindowSize(int, int)
void glutInitWindowPosition(int, int)
void glutMainLoop(void)
void glutSetWindowTitle(const char* title)
void glutSetIconTitle(const char* title)
void glutFullScreen(void)
void glutEstablishOverlay(void)
void glutRemoveOverlay(void)
void glutUseLayer(GLenum)
void glutPostOverlayRedisplay(void)
void glutPostWindowOverlayRedisplay(int window)
void glutShowOverlay(void)
void glutHideOverlay(void) 
int glutGet(int)
void glutBitmapCharacter(void *font, int character)
int glutBitmapWidth(void *font,int character)
int glutBitmapLength(void *font, char *string)
void glutStrokeCharacter(void *font,int character)
int glutStrokeWidth(void *font,int character)
GLfloat glutStrokeWidthf(void *font,int character)
int glutStrokeLength(void *font,char *string)
GLfloat glutStrokeLengthf(void *font,char *string)
void glutWireSphere(double dRadius,GLint slices,GLint stacks)
void glutSolidSphere(double dRadius,GLint slices,GLint stacks)
void glutWireTorus(double dInnerRadius, double dOuterRadius, GLint nSides, GLint nRings)
void glutSolidTorus(double dInnerRadius, double dOuterRadius, GLint nSides, GLint nRings)
void glutWireCone(double base, double height, GLint slices, GLint stacks)
void glutSolidCone(double base, double height, GLint slices, GLint stacks)
void glutWireCube(double dSize)
void glutSolidCube(double dSize)
void glutWireTetrahedron(void)
void glutSolidTetrahedron(void)
void glutWireOctahedron(void)
void glutSolidOctahedron(void)
void glutWireDodecahedron(void)
void glutSolidDodecahedron(void)
void glutWireIcosahedron(void)
void glutSolidIcosahedron(void)
void glutWireTeapot(double dSize)
void glutSolidTeapot(double dSize)
void glutSetKeyRepeat(int repeatMode)
void glutIgnoreKeyRepeat(int ignore)

void glutInitDisplayMode(int)
void glutCreateWindow(const char *)

<comment>
OpenGL  Constants and Functions
</comment>

<constant>
GL_COLOR_BUFFER_BIT
GL_DEPTH_BUFFER_BIT
GL_POLYGON
GL_TRIANGLES
GL_PROJECTION
GL_MODELVIEW
GL_QUADS
GL_DEPTH_TEST
GL_CW
GL_CCW
</constant>

void glClear(GLbitfield)
void glColor3f(float,float,float)
void glBegin(int)
void glVertex3f(float,float,float)
void glEnd(void)
void glFlush(void)
void glutSwapBuffers(void)
void glMatrixMode(int)
void glLoadIdentity(void)
void glViewport(int,int,int,int)
void gluPerspective(int,float,int,int)
void gluLookAt(float,float,float,float,float,float,float,float,float)
void glRotatef(float,float,float,float)
void glTranslatef(float,float,float)
void glPushMatrix(void)
void glPopMatrix(void)
void glEnable(int)
void glDisable(int)
void glFrontFace(int)