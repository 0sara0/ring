<ignorecpointertype>

<code>
/* Copyright (c) 2021 Mahmoud Fayed <msfclipper@yahoo.com> */

#include "tinycthread/tinycthread.h"
#include "tinycthread/tinycthread.c"
</code>

<constant>
TIME_UTC
TINYCTHREAD_VERSION_MAJOR
TINYCTHREAD_VERSION_MINOR
TINYCTHREAD_VERSION
thrd_error
thrd_success
thrd_timedout
thrd_busy
thrd_nomem
mtx_plain
mtx_timed
mtx_recursive
</constant>

<comment>
once_flag
ONCE_FLAG_INIT
</comment>

<struct>
mtx_t
cnd_t
</struct>

<runcode>
aNumberTypes + "size_t"
aNumberTypes + "char"
</runcode>

int mtx_init(mtx_t *mtx, int type)
void mtx_destroy(mtx_t *mtx)
int mtx_lock(mtx_t *mtx)
int mtx_timedlock(mtx_t *mtx, const struct timespec *ts)
int mtx_trylock(mtx_t *mtx)
int mtx_unlock(mtx_t *mtx)

int cnd_init(cnd_t *cond)
void cnd_destroy(cnd_t *cond)
int cnd_signal(cnd_t *cond)
int cnd_broadcast(cnd_t *cond)
int cnd_wait(cnd_t *cond, mtx_t *mtx)
int cnd_timedwait(cnd_t *cond, mtx_t *mtx, const struct timespec *ts)

<comment>
typedef int (*thrd_start_t)(void *arg);
int thrd_create(thrd_t *thr, thrd_start_t func, void *arg);
</comment>

thrd_t thrd_current(void)
int thrd_detach(thrd_t thr)
int thrd_equal(thrd_t thr0, thrd_t thr1)
void thrd_exit(int res)
int thrd_join(thrd_t thr, int *res)
int thrd_sleep(const struct timespec *duration, struct timespec *remaining)
void thrd_yield(void)

<comment>
typedef void (*tss_dtor_t)(void *val)
int tss_create(tss_t *key, tss_dtor_t dtor)
</comment>

void tss_delete(tss_t key)
void *tss_get(tss_t key)
int tss_set(tss_t key, void *val)

<comment>
void call_once(once_flag *flag, void (*func)(void))
</comment>