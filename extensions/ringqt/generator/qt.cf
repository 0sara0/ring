<nodllstartup>

<libinitfunc> ring_qt_start

<ignorecpointertype>

<code>
/* Copyright (c) 2013-2018 Mahmoud Fayed <msfclipper@yahoo.com> */

extern "C" {
	#include "ring.h"
}

#include "gpushbutton.h"
#include "gaction.h"
#include "glineedit.h"
#include "gtextedit.h"
#include "glistwidget.h"
#include "gtreeview.h"
#include "gtreewidget.h"
#include "gcombobox.h"
#include "gtabwidget.h"
#include "gtablewidget.h"
#include "gprogressbar.h"
#include "gspinbox.h"
#include "gslider.h"
#include "gdial.h"
#include "gnetworkaccessmanager.h"
#include "gcheckbox.h"
#include "gradiobutton.h"
#include "gbuttongroup.h"
#include "gvideowidget.h"
#include "gtimer.h"
#include "gtcpserver.h"
#include "giodevice.h"
#include "gabstractsocket.h"
#include "gtcpsocket.h"
#include "gcolordialog.h"
#include "gallevents.h"
#include "gthread.h"
#include "gplaintextedit.h"
#include "gheaderview.h"
#include "gprocess.h"
#include "codeeditor.h"
#include "highlighter.h"
#include "gtoolbutton.h"
#include "gbluetoothdevicediscoveryagent.h"
#include "gbluetoothlocaldevice.h"
#include "gbluetoothserver.h"
#include "gbluetoothservicediscoveryagent.h"
#include "gbluetoothsocket.h"
#include "gbluetoothtransfermanager.h"
#include "gbluetoothtransferreply.h"
#include "gwindow.h"
#include "gguiapplication.h"
#include "gtextbrowser.h"
#include "gdockwidget.h"
#include "gstackedwidget.h"
#include "gcalendarwidget.h"
<filter> ((iswindows() or ismacosx()) and sysget("RINGQT_ANDROID") = "")
#include "openglwidget.h"
</filter>

#include <QApplication>
#include <QObject>
#include <QWidget>
#include <QLabel>
#include <QPixmap>
#include <QIcon>
#include <QSize>
#include <QPushButton>
#include <QMainWindow>
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QLineEdit>
#include <QTextEdit>
#include <QListWidget>
#include <QTreeView>
#include <QDir>
#include <QFileSystemModel>
#include <QTreeWidget>
#include <QTreeWidgetItem>
#include <QComboBox>
#include <QVariant>
#include <QMenuBar>
#include <QMenu>
#include <QToolBar>
#include <QMainWindow>
#include <QStatusBar>
#include <QDockWidget>
#include <QTabWidget>
#include <QTableWidget>
#include <QTableWidgetItem>
#include <QSizePolicy>
#include <QFrame>
#include <QAbstractScrollArea>
#include <QAbstractItemView>
#include <QProgressBar>
#include <QSpinBox>
#include <QSlider>
#include <QAbstractSlider>
#include <QDateEdit>
#include <QDateTimeEdit>
#include <QAbstractSpinBox>
#include <QDial>
#include <QUrl>
#include <QCheckBox>
#include <QRadioButton>
#include <QButtonGroup>
#include <QMediaPlayer>
#include <QMediaPlaylist>
#include <QVideoWidget>
#include <QPrinter>
#include <QAction>
#include <QEvent>
#include <QMessageBox>
#include <QTimer>
#include <QFileDialog>
#include <QPainter>
#include <QPicture>
#include <QPen>
#include <QColor>
#include <QPrinter>
#include <QFont>
#include <QBrush>
#include <QByteArray>
#include <QIODevice>
#include <QAbstractSocket>
#include <QTcpSocket>
#include <QTcpServer>
#include <QNetworkProxy>
#include <QHostAddress>
#include <QHostInfo>
#include <QList>
#include <QFileInfo>
#include <QDirModel>
#include <QModelIndex>
#include <QFontDialog>
#include <QDialog>
#include <QTextCursor>
#include <QTextBlock>
#include <QTextDocumentFragment>
#include <QColorDialog>
#include <QHeaderView>
#include <QStringList>
#include <QKeySequence>
#include <QLCDNumber>
#include <QInputDialog>
#include <QDesktopWidget>
#include <QRect>
#include <QTextDocument>
#include <QTime>
#include <QTest>
#include <QListWidgetItem>
#include <QSystemTrayIcon>
#include <QDate>
#include <QTextCodec>
#include <QtSql>
#include <QSqlDatabase>
#include <QSqlDriver>
#include <QSqlQuery>
#include <QSqlError>
#include <QSqlIndex>
#include <QSqlRecord>
#include <QSqlField>
#include <QSqlDriverCreatorBase>
#include <QNetworkRequest>
#include <QNetworkAccessManager>
#include <QNetworkReply>
#include <QPainterPath>
#include <QImage>
#include <QBitmap>
#include <QMediaContent>
#include <QTableView>
#include <QXmlStreamReader>
#include <QXmlStreamWriter>
#include <QXmlStreamNotationDeclaration>
#include <QXmlStreamNamespaceDeclaration>
#include <QXmlStreamEntityResolver>
#include <QXmlStreamEntityDeclaration>
#include <QXmlStreamAttributes>
#include <QXmlStreamAttribute>
#include <QThread>
#include <QThreadPool>
#include <QRegularExpression>
#include <QRegularExpressionMatch>
#include <QRegularExpressionMatchIterator>
#include <QJsonValue>
#include <QJsonParseError>
#include <QJsonObject>
#include <QJsonDocument>
#include <QJsonArray>
#include <iterator>
#include <QPlainTextEdit>
#include <QGridLayout>
#include <QTextCharFormat>
#include <QCameraViewfinder>
#include <QGraphicsVideoItem>
#include <QVideoWidgetControl>
#include <QCamera>
#include <QCameraImageCapture>
#include <QFontMetrics>
#include <QList>
#include <QSplashScreen>
#include <QBoxLayout>
#include <QLayout>
#include <QLinearGradient>
#include <QGradient>
#include <QPointF>
#include <QPoint>
#include <QStyleFactory>
#include <QScrollArea>
#include <QSplitter>
#include <QCompleter>
#include <QString>
#include <QProcess>
#include <QMdiArea>
#include <QMdiSubWindow>
#include <QCursor>
#include <QListView>
#include <QUuid>
#include <QDesktopServices>
#include <QToolButton>
#include <QStringRef>
#include <QMutex>
#include <QMutexLocker>
#include <QBuffer>
#include <QBluetoothAddress>
#include <QBluetoothDeviceDiscoveryAgent>
#include <QBluetoothDeviceInfo>
#include <QBluetoothUuid>
#include <QBluetoothHostInfo>
#include <QBluetoothLocalDevice>
#include <QBluetoothServer>
#include <QBluetoothServiceDiscoveryAgent>
#include <QBluetoothServiceInfo>
#include <QBluetoothSocket>
#include <QBluetoothTransferManager>
#include <QBluetoothTransferReply>
#include <QBluetoothTransferRequest>
#include <QBluetoothUuid>
#include <QDateTime>
#include <QScreen>
#include <QWindow>
#include <QGuiApplication>
#include <QTextBrowser>
#include <QRegion>
#include <QStackedWidget>
#include <QCalendarWidget>
#include <QVector2D>
#include <QVector3D>
#include <QVector4D>
#include <QQuaternion>
#include <QMatrix4x4>

#include <QTabBar>
#include "gtabbar.h"
#include <QFile>
#include <QFileDevice>
#include <QStandardPaths>

#include <QDrag>
#include "gdrag.h"
#include <QMimeData>
#include <QDropEvent>
#include <QDragMoveEvent>
#include <QDragEnterEvent>
#include <QDragLeaveEvent>
#include <QClipboard>
#include <QChar>
#include <QChildEvent>

#include <QGeoPositionInfo>
#include <QGeoCoordinate>
#include <QGeoAddress>
#include <QGeoAreaMonitorInfo>
#include <QGeoAreaMonitorSource>
#include <QGeoCircle>
#include <QGeoPositionInfoSource>
#include "ggeopositioninfosource.h"
#include <QGeoRectangle>
#include <QGeoShape>
#include <QGeoSatelliteInfo>
#include <QGeoSatelliteInfoSource>
#include <QNmeaPositionInfoSource>

<filter> (iswindows() or ismacosx())
#include <QQuickWidget>
#include <QQmlError>
#include "gquickwidget.h"
</filter>

<filter> ((iswindows() or ismacosx()) and sysget("RINGQT_ANDROID") = "")

#include <QOpenGLFunctions>
#include <QOpenGLContext>
#include <QSurfaceFormat>
#include <QOpenGLFunctions_3_2_Core>
#include <QOpenGLVersionProfile>
#include <QOpenGLPaintDevice>
#include <QPaintDevice>
#include <QOpenGLTimerQuery>
#include <QOpenGLDebugLogger>
#include <QOpenGLFramebufferObject>
#include <QOpenGLVertexArrayObject>
#include <QOpenGLBuffer>
#include <QOpenGLShaderProgram>
#include <QOpenGLShader>
#include <QOpenGLTexture>
</filter>

<filter> (sysget("RINGQT_ANDROID") = "")

#include "gserialport.h"
#include <QSerialPort>
#include <QSerialPortInfo>

</filter>

<filter> (sysget("RINGQT_ANDROID") = "" and sysget("RINGQT_NOWEBKIT") = "")
#include "gwebview.h"
#include <QWebSettings>
#include <QWebView>
</filter>

<filter> (sysget("RINGQT_ANDROID") = "" and sysget("RINGQT_NOWEBKIT") = "1")
#include "gwebengineview.h"
#include <QWebEngineSettings>
#include <QWebEngineView>
#include <QWebEnginePage>
#include <QWebEngineHistory>
</filter>


<filter> (iswindows() and sysget("RINGQT_ANDROID") = "")

#include <QAxObject>
#include <QAxBase>

</filter>

extern "C" {

	RING_API void ring_qt_start(RingState *pRingState);

	RING_API void ringlib_init(RingState *pRingState)
	{

		new QApplication(pRingState->argc,pRingState->argv);
 	   	ring_qt_start(pRingState) ;
	}

}
</code>


<runcode>

aStringTypes + "QString"

aBeforeReturn + ["QString",".toStdString().c_str()"]

aNewMethodName + ["QWebView","load","loadpage"]
aNewMethodName + ["QMediaPlaylist","load","loadfile"]
aNewMethodName + ["QMediaPlaylist","next","movenext"]
aNewMethodName + ["QPainter","end","endpaint"]
aNewMethodName + ["QPicture","load","loadfile"]
aNewMethodName + ["QLineEdit","end","endtext"]
aNewMethodName + ["QDialog","done","donedialog"]
aNewMethodName + ["QTextDocument","end","enddoc"]
aNewMethodName + ["QTextBlock","next","nextblock"]
aNewMethodName + ["QSqlQuery","next","movenext"]
aNewMethodName + ["QImage","load","loadimage"]
aNewMethodName + ["QNetworkAccessManager","get","getvalue"]
aNewMethodName + ["QNetworkAccessManager","put","putvalue"]
aNewMethodName + ["QThread","exit","exitfromthread"]
aNewMethodName + ["QRegularExpressionMatchIterator","next","nextitem"]
aNewMethodName + ["QCamera","load","loadcamera"]
aNewMethodName + ["QPixmap","load","loadpixmap"]
aNewMethodName + ["QBluetoothTransferManager","put","putdata"]
aNewMethodName + ["QCoreApplication","exit","exitfromapplication"]
aNewMethodName + ["QOpenGLTimerQuery","end","endtimer"]

aNumberTypes + "qreal"
aNumberTypes + "qint64"
aNumberTypes + "ushort"
aNumberTypes + "ulong"

aEnumTypes + "Qt::GestureType"
aEnumTypes + "Qt::GestureFlag"
aEnumTypes + "Qt::ShortcutContext"
aEnumTypes + "Qt::InputMethodQuery"
aEnumTypes + "Qt::WindowType"
aEnumTypes + "QWidget::RenderFlag"
aEnumTypes + "Qt::WidgetAttribute"
aEnumTypes + "QPalette::ColorRole"
aEnumTypes + "Qt::ContextMenuPolicy"
aEnumTypes + "Qt::FocusReason"
aEnumTypes + "Qt::FocusPolicy"
aEnumTypes + "Qt::InputMethodHint"
aEnumTypes + "Qt::LayoutDirection"
aEnumTypes + "QSizePolicy::Policy"
aEnumTypes + "Qt::WindowType"
aEnumTypes + "Qt::WindowModality"
aEnumTypes + "Qt::WindowState"
aEnumTypes + "Qt::AlignmentFlag"
aEnumTypes + "Qt::Alignment"
aEnumTypes + "Qt::TextFormat"
aEnumTypes + "Qt::TextInteractionFlag"
aEnumTypes + "Qt::AspectRatioMode"
aEnumTypes + "Qt::TransformationMode"
aEnumTypes + "Qt::CursorMoveStyle"
aEnumTypes + "QLineEdit::EchoMode"
aEnumTypes + "QTextDocument::FindFlag"
aEnumTypes + "QTextCursor::MoveOperation"
aEnumTypes + "QTextCursor::MoveMode"
aEnumTypes + "QTextEdit::LineWrapMode"
aEnumTypes + "QTextOption::WrapMode"
aEnumTypes + "QItemSelectionModel::SelectionFlag"
aEnumTypes + "Qt::SortOrder"
aEnumTypes + "QAbstractItemView::ScrollHint"
aEnumTypes + "QDir::Filter"
aEnumTypes + "Qt::DropAction"
aEnumTypes + "Qt::Orientation"
aEnumTypes + "Qt::CheckState"
aEnumTypes + "QTreeWidgetItem::ChildIndicatorPolicy"
aEnumTypes + "Qt::ItemFlag"
aEnumTypes + "Qt::MatchFlag"
aEnumTypes + "Qt::Corner"
aEnumTypes + "Qt::ToolBarArea"
aEnumTypes + "Qt::ToolButtonStyle"
aEnumTypes + "Qt::DockWidgetArea"
aEnumTypes + "QMainWindow::DockOption"
aEnumTypes + "QTabWidget::TabPosition"
aEnumTypes + "QTabWidget::TabShape"
aEnumTypes + "QDockWidget::DockWidgetFeature"
aEnumTypes + "Qt::TextElideMode"
aEnumTypes + "Qt::DockWidgetAreas"
aEnumTypes + "QFrame::Shadow"
aEnumTypes + "QFrame::Shape"
aEnumTypes + "Qt::ScrollBarPolicy"
aEnumTypes + "QAbstractItemView::DragDropMode"
aEnumTypes + "QAbstractItemView::ScrollMode"
aEnumTypes + "QAbstractItemView::EditTrigger"
aEnumTypes + "QAbstractItemView::SelectionBehavior"
aEnumTypes + "QAbstractItemView::SelectionMode"
aEnumTypes + "QProgressBar::Direction"
aEnumTypes + "QAbstractSlider::SliderAction"
aEnumTypes + "QSlider::TickPosition"
aEnumTypes + "QDateTimeEdit::Section"
aEnumTypes + "Qt::TimeSpec"
aEnumTypes + "QAbstractSpinBox::ButtonSymbols"
aEnumTypes + "QAbstractSpinBox::CorrectionMode"
aEnumTypes + "QWebPage::FindFlag"
aEnumTypes + "QWebPage::WebAction"
aEnumTypes + "QWebEnginePage::FindFlag"
aEnumTypes + "QWebEnginePage::WebAction"
aEnumTypes + "QPainter::RenderHint"
aEnumTypes + "QUrl::ComponentFormattingOption"
aEnumTypes + "QUrl::ParsingMode"
aEnumTypes + "QMediaPlaylist::PlaybackMode"
aEnumTypes + "QAction::ActionEvent"
aEnumTypes + "QAction::MenuRole"
aEnumTypes + "QAction::Priority"
aEnumTypes + "QKeySequence::StandardKey"
aEnumTypes + "QMessageBox::ButtonRole"
aEnumTypes + "QMessageBox::StandardButton"
aEnumTypes + "QFileDialog::DialogLabel"
aEnumTypes + "QFileDialog::AcceptMode"
aEnumTypes + "QFileDialog::FileMode"
aEnumTypes + "QFileDialog::Option"
aEnumTypes + "QFileDialog::ViewMode"
aEnumTypes + "Qt::ImageConversionFlag"
aEnumTypes + "Qt::FillRule"
aEnumTypes + "Qt::SizeMode"
aEnumTypes + "Qt::BGMode"
aEnumTypes + "Qt::ClipOperation"
aEnumTypes + "QPainter::CompositionMode"
aEnumTypes + "Qt::PenCapStyle"
aEnumTypes + "Qt::PenJoinStyle"
aEnumTypes + "Qt::PenStyle"
aEnumTypes + "QColor::Spec"
aEnumTypes + "QPrinter::Unit"
aEnumTypes + "QPrinter::ColorMode"
aEnumTypes + "QPrinter::DuplexMode"
aEnumTypes + "QPrinter::OutputFormat"
aEnumTypes + "QPageLayout::Unit"
aEnumTypes + "QPrinter::PageOrder"
aEnumTypes + "QPageLayout::Orientation"
aEnumTypes + "QPrinter::PaperSource"
aEnumTypes + "QPrinter::PrintRange"
aEnumTypes + "QFont::Capitalization"
aEnumTypes + "QFont::HintingPreference"
aEnumTypes + "QFont::SpacingType"
aEnumTypes + "QFont::Style"
aEnumTypes + "QFont::StyleHint"
aEnumTypes + "QFont::StyleStrategy"
aEnumTypes + "QWebSettings::FontFamily"
aEnumTypes + "QWebSettings::FontSize"
aEnumTypes + "QWebSettings::WebAttribute"
aEnumTypes + "QWebSettings::ThirdPartyCookiePolicy"
aEnumTypes + "QWebSettings::WebGraphic"
aEnumTypes + "Qt::BrushStyle"
aEnumTypes + "QAbstractSocket::BindFlag"
aEnumTypes + "QIODevice::OpenModeFlag"
aEnumTypes + "QIODevice::OpenMode"
aEnumTypes + "QAbstractSocket::NetworkLayerProtocol"
aEnumTypes + "QAbstractSocket::PauseMode"
aEnumTypes + "QAbstractSocket::SocketState"
aEnumTypes + "QAbstractSocket::SocketOption"
aEnumTypes + "QNetworkRequest::KnownHeaders"
aEnumTypes + "QNetworkProxy::Capability"
aEnumTypes + "QNetworkProxy::ProxyType"
aEnumTypes + "QHostInfo::HostInfoError"
aEnumTypes + "QFileDevice::Permission"
aEnumTypes + "QDir::SortFlag"
aEnumTypes + "QFontDialog::FontDialogOption"
aEnumTypes + "QTextCursor::SelectionType"
aEnumTypes + "QColorDialog::ColorDialogOption"
aEnumTypes + "QLCDNumber::Mode"
aEnumTypes + "QLCDNumber::SegmentStyle"
aEnumTypes + "QInputDialog::InputMode"
aEnumTypes + "QInputDialog::InputDialogOption"
aEnumTypes + "QTextDocument::Stacks"
aEnumTypes + "QTextDocument::FindFlag"
aEnumTypes + "QTextDocument::MetaInformation"
aEnumTypes + "Qt::InputMethodHints"
aEnumTypes + "Qt::WindowFlags"
aEnumTypes + "QEvent::Type"
aEnumTypes + "QPrinter::PrinterMode"
aEnumTypes + "Qt::ItemFlags"
aEnumTypes + "QSystemTrayIcon::MessageIcon"
aEnumTypes + "Qt::DateFormat"
aEnumTypes + "MonthNameType"
aEnumTypes + "QTextCodec::ConversionFlag"
aEnumTypes + "ConverterState"
aEnumTypes + "QSql::NumericalPrecisionPolicy"
aEnumTypes + "QVariant::Type"
aEnumTypes + "DbmsType"
aEnumTypes + "QSqlQuery::BatchExecutionMode"
aEnumTypes + "RequiredStatus"
aEnumTypes + "QSql::ParamType"
aEnumTypes + "QSqlError::ErrorType"
aEnumTypes + "QSqlField::RequiredStatus"
aEnumTypes + "Qt::CaseSensitivity"
aEnumTypes + "QNetworkRequest::Attribute"
aEnumTypes + "QNetworkRequest::KnownHeaders"
aEnumTypes + "QNetworkRequest::Priority"
aEnumTypes + "QNetworkRequest::KnownHeaders" 
aEnumTypes + "QNetworkRequest::Priority"
aEnumTypes + "QNetworkAccessManager::NetworkAccessibility"
aEnumTypes + "QNetworkReply::NetworkError"
aEnumTypes + "Qt::SizeMode"
aEnumTypes + "Qt::ImageConversionFlags"
aEnumTypes + "Qt::MaskMode"
aEnumTypes + "QImage::Format"
aEnumTypes + "QImage::InvertMode"
aEnumTypes + "Error"
aEnumTypes + "ReadElementTextBehaviour"
aEnumTypes + "TokenType"
aEnumTypes + "QXmlStreamReader::ReadElementTextBehaviour"
aEnumTypes + "QThread::Priority"
aEnumTypes + "QRegularExpression::MatchOption"
aEnumTypes + "QRegularExpression::MatchType"
aEnumTypes + "QRegularExpression::PatternOption"
aEnumTypes + "QRegularExpression::MatchOptions"
aEnumTypes + "QRegularExpression::PatternOptions"
aEnumTypes + "QJsonDocument::DataValidation"
aEnumTypes + "QJsonDocument::JsonFormat"
aEnumTypes + "QPlainTextEdit::LineWrapMode"
aEnumTypes + "QTextCharFormat::FontPropertiesInheritanceBehavior"
aEnumTypes + "QTextCharFormat::UnderlineStyle"
aEnumTypes + "QTextCharFormat::VerticalAlignment"
aEnumTypes + "QCamera::FrameRateRange"
aEnumTypes + "QCamera::CaptureMode"
aEnumTypes + "QCamera::CaptureModes"
aEnumTypes + "QCamera::Error"
aEnumTypes + "QCamera::LockChangeReason"
aEnumTypes + "QCamera::LockQCamera::Status"
aEnumTypes + "QCamera::LockType"
aEnumTypes + "QCamera::LockTypes"
aEnumTypes + "QCamera::Position"
aEnumTypes + "QCamera::State"
aEnumTypes + "QCamera::Status"
aEnumTypes + "QCameraImageCapture::CaptureDestination"
aEnumTypes + "QCameraImageCapture::CaptureDestinations"
aEnumTypes + "QCameraImageCapture::DriveMode"
aEnumTypes + "QCameraImageCapture::Error"
aEnumTypes + "QHeaderView::ResizeMode"
aEnumTypes + "QLayout::SizeConstraint"
aEnumTypes + "QGradient::CoordinateMode"
aEnumTypes + "QGradient::Spread"
aEnumTypes + "QGradient::Type"
aEnumTypes + "Qt::MatchFlags"
aEnumTypes + "QCompleter::CompletionMode"
aEnumTypes + "QCompleter::ModelSorting"
aEnumTypes + "QString::SplitBehavior"
aEnumTypes + "QProcess::ExitStatus"
aEnumTypes + "QProcess::InputChannelMode"
aEnumTypes + "QProcess::ProcessChannel"
aEnumTypes + "QProcess::ProcessChannelMode"
aEnumTypes + "QProcess::ProcessError"
aEnumTypes + "QProcess::ProcessState"
aEnumTypes + "QMdiArea::ViewMode"
aEnumTypes + "QMdiArea::WindowOrder"
aEnumTypes + "QMdiArea::AreaOption"
aEnumTypes + "QMdiSubWindow::SubWindowOption"
aEnumTypes + "Qt::CursorShape"
aEnumTypes + "QListView::LayoutMode"
aEnumTypes + "QListView::Movement"
aEnumTypes + "QListView::ResizeMode"
aEnumTypes + "QListView::ViewMode"
aEnumTypes + "QListView::Flow"
aEnumTypes + "QAxBase::PropertyBag"
aEnumTypes + "QToolButton::ToolButtonPopupMode"
aEnumTypes + "QMutex::RecursionMode"
aEnumTypes + "QBluetoothDeviceDiscoveryAgent::DiscoveryMethod"
aEnumTypes + "QBluetoothDeviceDiscoveryAgent::DiscoveryMethods"
aEnumTypes + "QBluetoothDeviceDiscoveryAgent::Error"
aEnumTypes + "QBluetoothDeviceDiscoveryAgent::InquiryType"
aEnumTypes + "QBluetoothDeviceInfo::CoreConfiguration"
aEnumTypes + "QBluetoothDeviceInfo::CoreConfigurations"
aEnumTypes + "QBluetoothDeviceInfo::DataCompleteness"
aEnumTypes + "QBluetoothDeviceInfo::MajorDeviceClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorAudioVideoClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorComputerClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorHealthClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorImagingClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorMiscellaneousClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorNetworkClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorPeripheralClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorPhoneClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorToyClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorWearableClass"
aEnumTypes + "QBluetoothDeviceInfo::ServiceClass"
aEnumTypes + "QBluetoothDeviceInfo::ServiceClasses"
aEnumTypes + "QBluetoothLocalDevice::Error"
aEnumTypes + "QBluetoothLocalDevice::HostMode"
aEnumTypes + "QBluetoothLocalDevice::Pairing"
aEnumTypes + "QBluetoothServer::Error"
aEnumTypes + "QBluetoothServiceDiscoveryAgent::DiscoveryMode"
aEnumTypes + "QBluetoothServiceDiscoveryAgent::Error"
aEnumTypes + "QBluetoothServiceInfo::AttributeId"
aEnumTypes + "QBluetoothServiceInfo::Protocol"
aEnumTypes + "QBluetoothSocket::SocketError"
aEnumTypes + "QBluetoothSocket::SocketState"
aEnumTypes + "QBluetoothTransferReply::TransferError"
aEnumTypes + "QBluetoothTransferRequest::Attribute"
aEnumTypes + "QBluetoothUuid::CharacteristicType"
aEnumTypes + "QBluetoothUuid::DescriptorType"
aEnumTypes + "QBluetoothUuid::ProtocolUuid"
aEnumTypes + "QBluetoothUuid::ServiceClassUuid"
aEnumTypes + "QDockWidget::DockWidgetFeature"
aEnumTypes + "QDockWidget::DockWidgetFeatures"
aEnumTypes + "QRegion::RegionType"
aEnumTypes + "QEventLoop::ProcessEventsFlags"
aEnumTypes + "Qt::ApplicationAttribute"
aEnumTypes + "QCalendarWidget::HorizontalHeaderFormat"
aEnumTypes + "QCalendarWidget::VerticalHeaderFormat"
aEnumTypes + "QCalendarWidget::SelectionMode"
aEnumTypes + "QOpenGLFunctions::OpenGLFeature"
aEnumTypes + "QOpenGLFunctions::OpenGLFeatures"
aEnumTypes + "QOpenGLContext::OpenGLModuleType"
aEnumTypes + "QSurfaceFormat::ColorSpace"
aEnumTypes + "QSurfaceFormat::FormatOption"
aEnumTypes + "QSurfaceFormat::FormatOptions"
aEnumTypes + "QSurfaceFormat::OpenGLContextProfile"
aEnumTypes + "QSurfaceFormat::RenderableType"
aEnumTypes + "QSurfaceFormat::SwapBehavior"
aEnumTypes + "QOpenGLWidget::UpdateBehavior"
aEnumTypes + "QOpenGLTexture::BindingTarget"
aEnumTypes + "QOpenGLTexture::ComparisonFunction"
aEnumTypes + "QOpenGLTexture::ComparisonMode"
aEnumTypes + "QOpenGLTexture::CoordinateDirection"
aEnumTypes + "QOpenGLTexture::CubeMapFace"
aEnumTypes + "QOpenGLTexture::DepthStencilMode"
aEnumTypes + "QOpenGLTexture::Feature"
aEnumTypes + "QOpenGLTexture::Features"
aEnumTypes + "QOpenGLTexture::Filter"
aEnumTypes + "QOpenGLTexture::MipMapGeneration"
aEnumTypes + "QOpenGLTexture::PixelFormat"
aEnumTypes + "QOpenGLTexture::PixelType"
aEnumTypes + "QOpenGLTexture::SwizzleComponent"
aEnumTypes + "QOpenGLTexture::SwizzleValue"
aEnumTypes + "QOpenGLTexture::Target"
aEnumTypes + "QOpenGLTexture::TextureFormat"
aEnumTypes + "QOpenGLTexture::TextureUnitReset"
aEnumTypes + "QOpenGLTexture::WrapMode"
aEnumTypes + "QPaintDevice::PaintDeviceMetric"
aEnumTypes + "QOpenGLDebugLogger::LoggingMode"
aEnumTypes + "QOpenGLFramebufferObject::Attachment"
aEnumTypes + "QOpenGLBuffer::Access"
aEnumTypes + "QOpenGLBuffer::RangeAccessFlag"
aEnumTypes + "QOpenGLBuffer::RangeAccessFlags"
aEnumTypes + "QOpenGLBuffer::Type"
aEnumTypes + "QOpenGLBuffer::UsagePattern"
aEnumTypes + "QOpenGLShader::ShaderType"
aEnumTypes + "QOpenGLShader::ShaderTypeBit"
aEnumTypes + "QTabBar::ButtonPosition"
aEnumTypes + "QTabBar::SelectionBehavior"
aEnumTypes + "QTabBar::Shape"
aEnumTypes + "QFileDevice::FileError"
aEnumTypes + "QFileDevice::FileHandleFlag"
aEnumTypes + "QFileDevice::FileHandleFlags"
aEnumTypes + "QFileDevice::FileTime"
aEnumTypes + "QFileDevice::MemoryMapFlags"
aEnumTypes + "QFileDevice::Permission"
aEnumTypes + "QFileDevice::Permissions"
aEnumTypes + "QStandardPaths::LocateOption"
aEnumTypes + "QStandardPaths::LocateOptions"
aEnumTypes + "QStandardPaths::StandardLocation"
aEnumTypes + "QFile::FileHandleFlags"
aEnumTypes + "QFile::Permissions"
aEnumTypes + "QDir::Filter"
aEnumTypes + "QDir::Filters"
aEnumTypes + "QDir::SortFlag"
aEnumTypes + "QDir::SortFlags"
aEnumTypes + "QQuickWidget::ResizeMode"
aEnumTypes + "QQuickWidget::Status"
aEnumTypes + "Qt::DropActions"
aEnumTypes + "Qt::MouseButtons"
aEnumTypes + "Qt::KeyboardModifiers"
aEnumTypes + "QClipboard::Mode"
aEnumTypes + "QChar::Category"
aEnumTypes + "QChar::Decomposition"
aEnumTypes + "QChar::Direction"
aEnumTypes + "QChar::JoiningType"
aEnumTypes + "QChar::Script"
aEnumTypes + "QChar::SpecialCharacter"
aEnumTypes + "QChar::UnicodeVersion"
aEnumTypes + "QGeoPositionInfo::Attribute"
aEnumTypes + "QGeoCoordinate::CoordinateFormat"
aEnumTypes + "QGeoCoordinate::CoordinateType"
aEnumTypes + "QGeoPositionInfoSource::Error"
aEnumTypes + "QGeoPositionInfoSource::PositioningMethod"
aEnumTypes + "QGeoPositionInfoSource::PositioningMethods"
aEnumTypes + "QGeoShape::ShapeType"
aEnumTypes + "QGeoSatelliteInfo::Attribute"
aEnumTypes + "QGeoSatelliteInfo::SatelliteSystem"
aEnumTypes + "QNmeaPositionInfoSource::UpdateMode"

$aMallocClassesList + "QModelIndex"

</runcode>

<addfreefunctionsprototype>

<loadfile> qapp.cf
<loadfile> qdesktopservices.cf
<loadfile> qtest.cf
<loadfile> qobject.cf
<loadfile> qwidget.cf
<loadfile> qlabel.cf
<loadfile> qpushbutton.cf
<loadfile> qbitmap.cf
<loadfile> qpixmap.cf
<loadfile> qpixmap2.cf
<loadfile> qicon.cf
<loadfile> qsize.cf
<loadfile> qlineedit.cf
<loadfile> qvboxlayout.cf
<loadfile> qhboxlayout.cf
<loadfile> qtextedit.cf
<loadfile> qlistwidget.cf
<loadfile> qtreeview.cf
<loadfile> qdir.cf
<loadfile> qfilesystemmodel.cf
<loadfile> qtreewidget.cf
<loadfile> qtreewidgetitem.cf
<loadfile> qcombobox.cf
<loadfile> qmenubar.cf
<loadfile> qmenu.cf
<loadfile> qtoolbar.cf
<loadfile> qmainwindow.cf
<loadfile> qstatusbar.cf
<loadfile> qdockwidget.cf
<loadfile> qtabwidget.cf
<loadfile> qtablewidgetitem.cf
<loadfile> qframe.cf
<loadfile> qframe2.cf
<loadfile> qframe3.cf
<loadfile> qabstractscrollarea.cf
<loadfile> qabstractitemview.cf
<loadfile> qtableview.cf
<loadfile> qtablewidget.cf
<loadfile> qprogressbar.cf
<loadfile> qspinbox.cf
<loadfile> qabstractslider.cf
<loadfile> qslider.cf
<loadfile> qdateedit.cf
<loadfile> qdatetimeedit.cf
<loadfile> qabstractspinbox.cf
<loadfile> qdial.cf

<filter> (sysget("RINGQT_ANDROID") = "" and sysget("RINGQT_NOWEBKIT") = "")
<loadfile> qwebview.cf
</filter>

<loadfile> qurl.cf
<loadfile> qcheckbox.cf
<loadfile> qabstractbutton.cf
<loadfile> qradiobutton.cf
<loadfile> qbuttongroup.cf
<loadfile> qmediaplayer.cf
<loadfile> qmediaplaylist.cf
<loadfile> qvideowidget.cf
<loadfile> qaction.cf
<loadfile> qevent.cf
<loadfile> qmessagebox.cf
<loadfile> qtimer.cf
<loadfile> qfiledialog.cf
<loadfile> qpainter.cf
<loadfile> qpainter2.cf
<loadfile> qpicture.cf
<loadfile> qpen.cf
<loadfile> qcolor.cf
<loadfile> qprinter.cf
<loadfile> qfont.cf
<loadfile> qbrush.cf
<loadfile> qbytearray.cf
<loadfile> qiodevice.cf
<loadfile> qabstractsocket.cf
<loadfile> qnetworkproxy.cf
<loadfile> qtcpsocket.cf
<loadfile> qtcpserver.cf
<loadfile> qhostaddress.cf
<loadfile> qhostinfo.cf
<loadfile> qfileinfo.cf
<loadfile> qdirmodel.cf
<loadfile> qfontdialog.cf
<loadfile> qdialog.cf
<loadfile> qtextcursor.cf
<loadfile> qcolordialog.cf
<loadfile> qstringlist.cf
<loadfile> qkeysequence.cf
<loadfile> qlcdnumber.cf
<loadfile> qinputdialog.cf
<loadfile> qallevents.cf
<loadfile> qdesktopwidget.cf
<loadfile> qrect.cf
<loadfile> qtextdocument.cf
<loadfile> qtextblock.cf
<loadfile> qtime.cf
<loadfile> qlistwidgetitem.cf
<loadfile> qsystemtrayicon.cf
<loadfile> qdate.cf
<loadfile> qtextcodec.cf
<loadfile> qsqldatabase.cf
<loadfile> qsqldriver.cf
<loadfile> qsqlquery.cf
<loadfile> qsqlerror.cf
<loadfile> qsqlindex.cf
<loadfile> qsqlrecord.cf
<loadfile> qsqlfield.cf
<loadfile> qsqldrivercreatorbase.cf
<loadfile> qvariant.cf
<loadfile> qnetworkrequest.cf
<loadfile> qnetworkaccessmanager.cf
<loadfile> qnetworkreply.cf
<loadfile> qpainterpath.cf
<loadfile> qimage.cf
<loadfile> ringcodehighlighter.cf
<loadfile> qxmlstreamreader.cf
<loadfile> qxmlstreamwriter.cf
<loadfile> qxmlstreamnotationdeclaration.cf
<loadfile> qxmlstreamnamespacedeclaration.cf
<loadfile> qxmlstreamentitydeclaration.cf
<loadfile> qxmlstreamentityresolver.cf
<loadfile> qxmlstreamattributes.cf
<loadfile> qxmlstreamattribute.cf
<loadfile> qthread.cf
<loadfile> qthreadpool.cf
<loadfile> qregularexpression.cf
<loadfile> qregularexpressionmatch.cf
<loadfile> qregularexpressionmatchiterator.cf
<loadfile> qjsonarray.cf
<loadfile> qjsondocument.cf
<loadfile> qjsonobject.cf
<loadfile> qjsonparseerror.cf
<loadfile> qjsonvalue.cf
<loadfile> qplaintextedit.cf
<loadfile> codeeditor.cf
<loadfile> qgridlayout.cf
<loadfile> qtextcharformat.cf
<loadfile> qcameraviewfinder.cf
<loadfile> qgraphicsvideoitem.cf
<loadfile> qvideowidgetcontrol.cf
<loadfile> qcamera.cf
<loadfile> qcameraimagecapture.cf
<loadfile> qmediaobject.cf
<loadfile> qheaderview.cf
<loadfile> qfontmetrics.cf
<loadfile> qsplashscreen.cf
<loadfile> qboxlayout.cf
<loadfile> qlayout.cf
<loadfile> qlineargradient.cf
<loadfile> qgradient.cf
<loadfile> qpointf.cf
<loadfile> qpoint.cf

<comment>

//<class>
name: QModelIndex
para: void
//</class>

QModelIndex child(int row, int column)
int column(void)
QVariant data(int role )
Qt::ItemFlags flags(void)
qint64 internalId(void)
void *internalPointer(void)
bool isValid(void)
QAbstractItemModel *model(void)
QModelIndex parent(void)
int row(void)
QModelIndex sibling(int row, int column)

</comment>

<loadfile> qscrollarea.cf
<loadfile> qsplitter.cf
<loadfile> qcompleter.cf
<loadfile> qcompleter2.cf
<loadfile> qcompleter3.cf
<loadfile> qstring2.cf
<loadfile> qprocess.cf
<loadfile> qmdiarea.cf
<loadfile> qmdisubwindow.cf
<loadfile> qcursor.cf
<loadfile> qlistview.cf


<filter> (iswindows() and sysget("RINGQT_ANDROID") = "")
<loadfile> qaxobject.cf
<loadfile> qaxbase.cf
</filter>

<loadfile> quuid.cf
<loadfile> qtoolbutton.cf

<filter> (sysget("RINGQT_ANDROID") = "")
<loadfile> qserialport.cf
<loadfile> qserialportinfo.cf
</filter>

<loadfile> qstringref.cf
<loadfile> qmutex.cf
<loadfile> qmutexlocker.cf

<loadfile> qbuffer.cf
<loadfile> qbluetoothaddress.cf
<loadfile> qbluetoothdevicediscoveryagent.cf
<loadfile> qbluetoothdeviceinfo.cf
<loadfile> qbluetoothhostinfo.cf
<loadfile> qbluetoothlocaldevice.cf
<loadfile> qbluetoothserver.cf
<loadfile> qbluetoothservicediscoveryagent.cf
<loadfile> qbluetoothserviceinfo.cf
<loadfile> qbluetoothsocket.cf
<loadfile> qbluetoothtransfermanager.cf
<loadfile> qbluetoothtransferreply.cf
<loadfile> qbluetoothtransferrequest.cf
<loadfile> qbluetoothuuid.cf

<loadfile> qdatetime.cf
<loadfile> qscreen.cf
<loadfile> qwindow.cf
<loadfile> qguiapplication.cf
<loadfile> qcoreapplication.cf
<loadfile> qtextbrowser.cf
<loadfile> qregion.cf
<loadfile> qstackedwidget.cf
<loadfile> qcalenderwidget.cf


<filter> ((iswindows() or ismacosx()) and sysget("RINGQT_ANDROID") = "")

<loadfile> qopenglfunctions.cf
<loadfile> qopenglcontext.cf
<loadfile> qopenglfunctions_3_2_core.cf
<loadfile> qsurfaceformat.cf
<loadfile> qopenglwidget.cf
<loadfile> qopenglversionprofile.cf


</filter>

<class>
name: QVector2D
para: float,float
</class>

float distanceToLine(QVector2D point, QVector2D direction)
float distanceToPoint(QVector2D point)
bool isNull(void)
float length(void)
float lengthSquared(void)
void normalize(void)
QVector2D normalized(void)
void setX(float x)
void setY(float y)
QPoint toPoint(void)
QPointF toPointF(void)
QVector3D toVector3D(void)
QVector4D toVector4D(void)
float x(void)
float y(void)
float dotProduct(QVector2D v1, QVector2D v2)

<class>
name: QVector3D
para: float,float,float
</class>

float distanceToLine(QVector3D point, QVector3D direction)
float distanceToPlane(QVector3D plane, QVector3D normal)
float distanceToPlane@2(QVector3D plane1, QVector3D plane2, QVector3D plane3)
float distanceToPoint(QVector3D point)
bool isNull(void)
float length(void)
float lengthSquared(void)
void normalize(void)
QVector3D normalized(void)
<comment>
QVector3D project(QMatrix4x4 modelView, QMatrix4x4 projection, QRect viewport)
</comment>
void setX(float x)
void setY(float y)
void setZ(float z)
QPoint toPoint(void)
QPointF toPointF(void)
QVector2D toVector2D(void)
QVector4D toVector4D(void)
<comment>
QVector3D unproject(QMatrix4x4 modelView, QMatrix4x4 projection, QRect viewport)
</comment>
float x(void)
float y(void)
float z(void)
QVector3D crossProduct(QVector3D v1, QVector3D v2)
float dotProduct(QVector3D v1, QVector3D v2)
QVector3D normal(QVector3D v1, QVector3D v2)
QVector3D normal@2(QVector3D v1, QVector3D v2, QVector3D v3)

<class>
name: QVector4D
para: float,float,float,float
</class>

bool isNull(void)
float length(void)
float lengthSquared(void)
void normalize(void)
QVector4D normalized(void)
void setW(float w)
void setX(float x)
void setY(float y)
void setZ(float z)
QPoint toPoint(void)
QPointF toPointF(void)
QVector2D toVector2D(void)
QVector2D toVector2DAffine(void)
QVector3D toVector3D(void)
QVector3D toVector3DAffine(void)
float w(void)
float x(void)
float y(void)
float z(void)
float dotProduct(QVector4D v1, QVector4D v2)

<class>
name: QQuaternion
para: float,float,float,float
</class>

<comment>
QQuaternion conjugated(void)
void getAxes(QVector3D *xAxis, QVector3D *yAxis, QVector3D *zAxis)
void getAxisAndAngle(float *x, float *y, float *z, float *angle)
void getAxisAndAngle@2(QVector3D *axis, float *angle)
void getEulerAngles(float *pitch, float *yaw, float *roll)
QQuaternion inverted(void)
</comment>
bool isIdentity(void)
bool isNull(void)
float length(void)
float lengthSquared(void)
void normalize(void)
QQuaternion normalized(void)
QVector3D rotatedVector(QVector3D vector)
float scalar(void)
void setScalar(float scalar)
void setVector(QVector3D vector)
void setVector@2(float x, float y, float z)
void setX(float x)
void setY(float y)
void setZ(float z)
<comment>
QVector3D toEulerAngles(void)
QMatrix3x3 toRotationMatrix(void)
</comment>
QVector4D toVector4D(void)
QVector3D vector(void)
float x(void)
float y(void)
float z(void)
<comment>
float dotProduct(QQuaternion q1, QQuaternion q2)
QQuaternion fromAxes(QVector3D xAxis, QVector3D yAxis, QVector3D zAxis)
QQuaternion fromDirection(QVector3D direction, QVector3D up)
QQuaternion fromEulerAngles(float pitch, float yaw, float roll)
QQuaternion fromEulerAngles@2(QVector3D eulerAngles)
QQuaternion fromRotationMatrix(QMatrix3x3 rot3x3)
QQuaternion rotationTo(QVector3D from, QVector3D to)
</comment>
QQuaternion fromAxisAndAngle(QVector3D axis, float angle)
QQuaternion fromAxisAndAngle@2(float x, float y, float z, float angle)
QQuaternion nlerp(QQuaternion q1, QQuaternion q2, float t)
QQuaternion slerp(QQuaternion q1, QQuaternion q2, float t)

<class>
name: QMatrix4x4
para: qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal
</class>

QVector4D column(int index)
qreal * constData(void)
<comment>
void copyDataTo(qreal * values)
</comment>
qreal * data(void)
qreal * data@2(void)
qreal determinant(void)
void fill(qreal value)
void flipCoordinates(void)
void frustum(qreal left, qreal right, qreal bottom, qreal top, qreal nearPlane, qreal farPlane)
QMatrix4x4 inverted(bool * invertible)
bool isIdentity(void)
void lookAt(QVector3D eye, QVector3D center, QVector3D up)
QPoint map(QPoint point)
QPointF map@2(QPointF point)
QVector3D map@3(QVector3D point)
QVector4D map@4(QVector4D point)
QRect mapRect(QRect rect)
QRectF mapRect@2(QRectF rect)
QVector3D mapVector(QVector3D vector)
QMatrix3x3 normalMatrix(void)
void optimize(void)
void ortho(qreal left, qreal right, qreal bottom, qreal top, qreal nearPlane, qreal farPlane)
void ortho@2(QRect rect)
void ortho@3(QRectF rect)
void perspective(qreal angle, qreal aspect, qreal nearPlane, qreal farPlane)
void rotate(qreal angle, QVector3D vector)
void rotate@2(QQuaternion quaternion)
void rotate@3(qreal angle, qreal x, qreal y, qreal z)
QVector4D row(int index)
void scale(QVector3D vector)
void scale@2(qreal x, qreal y)
void scale@3(qreal x, qreal y, qreal z)
void scale@4(qreal factor)
void setColumn(int index, QVector4D value)
void setRow(int index, QVector4D value)
void setToIdentity(void)
QMatrix toAffine(void)
<comment>
QGenericMatrix<N, M, qreal> toGenericMatrix(void)
</comment>
QTransform toTransform(void)
QTransform toTransform@2(qreal distanceToPlane)
void translate(QVector3D vector)
void translate@2(qreal x, qreal y)
void translate@3(qreal x, qreal y, qreal z)
QMatrix4x4 transposed(void)

<filter> (iswindows() and sysget("RINGQT_ANDROID") = "")

<class>
name: QOpenGLPaintDevice
para: void
parent: QPaintDevice
</class>


QOpenGLContext * context(void)
qreal dotsPerMeterX(void)
qreal dotsPerMeterY(void)
void ensureActiveTarget(void)
bool paintFlipped(void)
void setDevicePixelRatio(qreal devicePixelRatio)
void setDotsPerMeterX(qreal dpmx)
void setDotsPerMeterY(qreal dpmy)
void setPaintFlipped(bool flipped)
void setSize(QSize size)
QSize size(void)

<class>
name: QPaintDevice
nonew
</class>

int colorCount(void)
int depth(void)
int devicePixelRatio(void)
<comment>
qreal devicePixelRatioF(void)
</comment>
int height(void)
int heightMM(void)
int logicalDpiX(void)
int logicalDpiY(void)
QPaintEngine * paintEngine(void)
bool paintingActive(void)
int physicalDpiX(void)
int physicalDpiY(void)
int width(void)
int widthMM(void)

<filter> (sysget("RINGQT_ANDROID") = "")

<class>
name: QOpenGLTimerQuery
para: QObject *
</class>

void begin(void)
bool create(void)
void destroy(void)
void end(void)
bool isCreated(void)
bool isResultAvailable(void)
GLuint objectId(void)
void recordTimestamp(void)
GLuint64 waitForResult(void)
GLuint64 waitForTimestamp(void)

<class>
name: QOpenGLDebugLogger
para: QObject *
</class>

void disableMessages(QOpenGLDebugMessage::Sources sources, QOpenGLDebugMessage::Types types, QOpenGLDebugMessage::Severities severities)
void disableMessages@2(QVector<GLuint> ids, QOpenGLDebugMessage::Sources sources, QOpenGLDebugMessage::Types types)
void enableMessages(QOpenGLDebugMessage::Sources sources, QOpenGLDebugMessage::Types types, QOpenGLDebugMessage::Severities severities)
void enableMessages@2(QVector<GLuint> ids, QOpenGLDebugMessage::Sources sources, QOpenGLDebugMessage::Types types)
bool initialize(void)
bool isLogging(void)
QList<QOpenGLDebugMessage> loggedMessages(void)
QOpenGLDebugLogger::LoggingMode loggingMode(void)
qint64 maximumMessageLength(void)
void popGroup(void)
void pushGroup(QString name, GLuint id, QOpenGLDebugMessage::Source source)
void logMessage(QOpenGLDebugMessage debugMessage)
void startLogging(QOpenGLDebugLogger::LoggingMode loggingMode)
void stopLogging(void)

<class>
name: QOpenGLFramebufferObject
para: int,int,GLenum
</class>

<comment>
void addColorAttachment(QSize size, GLenum internalFormat)
void addColorAttachment@2(int width, int height, GLenum internalFormat)
</comment>
QOpenGLFramebufferObject::Attachment attachment(void)
bool bind(void)
QOpenGLFramebufferObjectFormat format(void)
GLuint handle(void)
int height(void)
bool isBound(void)
bool isValid(void)
bool release(void)
void setAttachment(QOpenGLFramebufferObject::Attachment attachment)
QSize size(void)
<comment>
QVector<QSize> sizes(void)
GLuint takeTexture(void)
GLuint takeTexture@2(int colorQOpenGLFramebufferObject::AttachmentIndex)
</comment>
GLuint texture(void)
<comment>
QVector<GLuint> textures(void)
</comment>
<comment>
QImage toImage(bool flipped)
QImage toImage@3(bool flipped, int colorQOpenGLFramebufferObject::AttachmentIndex)
</comment>
QImage toImage@2(void)
int width(void)
bool bindDefault(void)
<comment>
void blitFramebuffer(QOpenGLFramebufferObject *target, QRect targetRect, QOpenGLFramebufferObject *source, QRect sourceRect, GLbitfield buffers, GLenum filter, int readColorQOpenGLFramebufferObject::AttachmentIndex, int drawColorQOpenGLFramebufferObject::AttachmentIndex, QOpenGLFramebufferObject::FramebufferRestorePolicy restorePolicy)
void blitFramebuffer@2(QOpenGLFramebufferObject *target, QRect targetRect, QOpenGLFramebufferObject *source, QRect sourceRect, GLbitfield buffers, GLenum filter, int readColorQOpenGLFramebufferObject::AttachmentIndex, int drawColorQOpenGLFramebufferObject::AttachmentIndex)
void blitFramebuffer@3(QOpenGLFramebufferObject *target, QRect targetRect, QOpenGLFramebufferObject *source, QRect sourceRect, GLbitfield buffers, GLenum filter)
void blitFramebuffer@4(QOpenGLFramebufferObject *target, QOpenGLFramebufferObject *source, GLbitfield buffers, GLenum filter)
</comment>
bool hasOpenGLFramebufferBlit(void)
bool hasOpenGLFramebufferObjects(void)

<class>
name: QOpenGLVertexArrayObject
para: QObject *
</class>

void bind(void)
bool create(void)
void destroy(void)
bool isCreated(void)
GLuint objectId(void)
void release(void)

<class>
name: QOpenGLBuffer
para: void
</class>

void allocate(void *data, int count)
void allocate@2(int count)
bool bind(void)
GLuint bufferId(void)
bool create(void)
void destroy(void)
bool isCreated(void)
void * map(QOpenGLBuffer::Access access)
<comment>
void * mapRange(int offset, int count, QOpenGLBuffer::RangeAccessFlags access)
</comment>
bool read(int offset, void *data, int count)
void release(void)
void setUsagePattern(QOpenGLBuffer::UsagePattern value)
int size(void)
QOpenGLBuffer::Type type(void)
bool unmap(void)
QOpenGLBuffer::UsagePattern usagePattern(void)
void write(int offset, void *data, int count)
void release@2(QOpenGLBuffer::Type type)

<class>
name: QOpenGLShaderProgram
para: QObject *
</class>

<comment>
bool addCacheableShaderFromSourceCode(QOpenGLShader::ShaderType type, char *source)
bool addCacheableShaderFromSourceCode@2(QOpenGLShader::ShaderType type, QByteArray source)
bool addCacheableShaderFromSourceCode@3(QOpenGLShader::ShaderType type, QString source)
bool addCacheableShaderFromSourceFile(QOpenGLShader::ShaderType type, QString fileName)
</comment>
bool addShader(QOpenGLShader *shader)
bool addShaderFromSourceCode(QOpenGLShader::ShaderType type, char *source)
bool addShaderFromSourceCode@2(QOpenGLShader::ShaderType type, QByteArray source)
bool addShaderFromSourceCode@3(QOpenGLShader::ShaderType type, QString source)
bool addShaderFromSourceFile(QOpenGLShader::ShaderType type, QString fileName)
int attributeLocation(char *name)
int attributeLocation@2(QByteArray name)
int attributeLocation@3(QString name)
bool bind(void)
void bindAttributeLocation(char *name, int location)
void bindAttributeLocation@2(QByteArray name, int location)
void bindAttributeLocation@3(QString name, int location)
<comment>
bool create(void)
</comment>
QVector<float> defaultInnerTessellationLevels(void)
QVector<float> defaultOuterTessellationLevels(void)
void disableAttributeArray(int location)
void disableAttributeArray@2(char *name)
void enableAttributeArray(int location)
void enableAttributeArray@2(char *name)
bool isLinked(void)
bool link(void)
QString log(void)
int maxGeometryOutputVertices(void)
int patchVertexCount(void)
GLuint programId(void)
void release(void)
void removeAllShaders(void)
void removeShader(QOpenGLShader *shader)
void setAttributeArray(int location, GLfloat *values, int tupleSize, int stride)
void setAttributeArray@2(int location, QVector2D *values, int stride)
void setAttributeArray@3(int location, QVector3D *values, int stride)
void setAttributeArray@4(int location, QVector4D *values, int stride)
void setAttributeArray@5(int location, GLenum type, void *values, int tupleSize, int stride)
void setAttributeArray@6(char *name, GLfloat *values, int tupleSize, int stride)
void setAttributeArray@7(char *name, QVector2D *values, int stride)
void setAttributeArray@8(char *name, QVector3D *values, int stride)
void setAttributeArray@9(char *name, QVector4D *values, int stride)
void setAttributeArray@10(char *name, GLenum type, void *values, int tupleSize, int stride)
void setAttributeBuffer(int location, GLenum type, int offset, int tupleSize, int stride)
void setAttributeBuffer@2(char *name, GLenum type, int offset, int tupleSize, int stride)
void setAttributeValue(int location, GLfloat value)
void setAttributeValue@2(int location, GLfloat x, GLfloat y)
void setAttributeValue@3(int location, GLfloat x, GLfloat y, GLfloat z)
void setAttributeValue@4(int location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
void setAttributeValue@5(int location, QVector2D value)
void setAttributeValue@6(int location, QVector3D value)
void setAttributeValue@7(int location, QVector4D value)
void setAttributeValue@8(int location, QColor value)
void setAttributeValue@9(int location, GLfloat *values, int columns, int rows)
void setAttributeValue@10(char *name, GLfloat value)
void setAttributeValue@11(char *name, GLfloat x, GLfloat y)
void setAttributeValue@12(char *name, GLfloat x, GLfloat y, GLfloat z)
void setAttributeValue@13(char *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
void setAttributeValue@14(char *name, QVector2D value)
void setAttributeValue@15(char *name, QVector3D value)
void setAttributeValue@16(char *name, QVector4D value)
<comment>
void setAttributeValue@17(char *name, QColor value)
void setAttributeValue@18(char *name, GLfloat *values, int columns, int rows)
</comment>

void setDefaultInnerTessellationLevels(QVector<float> levels)
void setDefaultOuterTessellationLevels(QVector<float> levels)
void setPatchVertexCount(int count)
void setUniformValue(int location, GLfloat value)
void setUniformValue@2(int location, GLint value)
void setUniformValue@3(char *name, QColor color)
void setUniformValue@4(char *name, QPoint point)
void setUniformValue@5(char *name, QPointF point)
void setUniformValue@6(char *name, QSize size)
void setUniformValue@7(char *name, QSizeF size)
void setUniformValue@8(char *name, QMatrix2x2 value)
void setUniformValue@9(char *name, QMatrix2x3 value)
void setUniformValue@10(char *name, QMatrix2x4 value)
void setUniformValue@11(char *name, QMatrix3x2 value)
void setUniformValue@12(char *name, QMatrix3x3 value)
void setUniformValue@13(char *name, QMatrix3x4 value)
void setUniformValue@14(char *name, QMatrix4x2 value)
void setUniformValue@15(char *name, QMatrix4x3 value)
void setUniformValue@16(char *name, QMatrix4x4 value)
<comment>
void setUniformValue@17(char *name, GLfloat[2][2] value)
void setUniformValue@18(char *name, GLfloat[3][3] value)
void setUniformValue@19(char *name, GLfloat[4][4] value)
</comment>
void setUniformValue@20(char *name, QTransform value)
void setUniformValue@21(int location, GLuint value)
void setUniformValue@22(int location, GLfloat x, GLfloat y)
void setUniformValue@23(int location, GLfloat x, GLfloat y, GLfloat z)
void setUniformValue@24(int location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
void setUniformValue@25(int location, QVector2D value)
void setUniformValue@26(int location, QVector3D value)
void setUniformValue@27(int location, QVector4D value)
void setUniformValue@28(int location, QColor color)
void setUniformValue@29(int location, QPoint point)
void setUniformValue@30(int location, QPointF point)
void setUniformValue@31(int location, QSize size)
void setUniformValue@32(int location, QSizeF size)
void setUniformValue@33(int location, QMatrix2x2 value)
void setUniformValue@34(int location, QMatrix2x3 value)
void setUniformValue@35(int location, QMatrix2x4 value)
void setUniformValue@36(int location, QMatrix3x2 value)
void setUniformValue@37(int location, QMatrix3x3 value)
void setUniformValue@38(int location, QMatrix3x4 value)
void setUniformValue@39(int location, QMatrix4x2 value)
void setUniformValue@40(int location, QMatrix4x3 value)
void setUniformValue@41(int location, QMatrix4x4 value)
<comment>
void setUniformValue@42(int location, GLfloat[2][2] value)
void setUniformValue@43(int location, GLfloat[3][3] value)
void setUniformValue@44(int location, GLfloat[4][4] value)
</comment>
void setUniformValue@45(int location, QTransform value)
void setUniformValue@46(char *name, GLfloat value)
void setUniformValue@47(char *name, GLint value)
void setUniformValue@48(char *name, GLuint value)
void setUniformValue@49(char *name, GLfloat x, GLfloat y)
void setUniformValue@50(char *name, GLfloat x, GLfloat y, GLfloat z)
void setUniformValue@51(char *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
void setUniformValue@52(char *name, QVector2D value)
void setUniformValue@53(char *name, QVector3D value)
void setUniformValue@54(char *name, QVector4D value)
void setUniformValueArray(int location, GLfloat *values, int count, int tupleSize)
void setUniformValueArray@2(int location, GLint *values, int count)
void setUniformValueArray@3(int location, GLuint *values, int count)
void setUniformValueArray@4(int location, QVector2D *values, int count)
void setUniformValueArray@5(int location, QVector3D *values, int count)
void setUniformValueArray@6(int location, QVector4D *values, int count)
void setUniformValueArray@7(int location, QMatrix2x2 *values, int count)
void setUniformValueArray@8(int location, QMatrix2x3 *values, int count)
void setUniformValueArray@9(int location, QMatrix2x4 *values, int count)
void setUniformValueArray@10(int location, QMatrix3x2 *values, int count)
void setUniformValueArray@11(int location, QMatrix3x3 *values, int count)
void setUniformValueArray@12(int location, QMatrix3x4 *values, int count)
void setUniformValueArray@13(int location, QMatrix4x2 *values, int count)
void setUniformValueArray@14(int location, QMatrix4x3 *values, int count)
void setUniformValueArray@15(int location, QMatrix4x4 *values, int count)
void setUniformValueArray@16(char *name, GLfloat *values, int count, int tupleSize)
void setUniformValueArray@17(char *name, GLint *values, int count)
void setUniformValueArray@18(char *name, GLuint *values, int count)
void setUniformValueArray@19(char *name, QVector2D *values, int count)
void setUniformValueArray@20(char *name, QVector3D *values, int count)
void setUniformValueArray@21(char *name, QVector4D *values, int count)
void setUniformValueArray@22(char *name, QMatrix2x2 *values, int count)
void setUniformValueArray@23(char *name, QMatrix2x3 *values, int count)
void setUniformValueArray@24(char *name, QMatrix2x4 *values, int count)
void setUniformValueArray@25(char *name, QMatrix3x2 *values, int count)
void setUniformValueArray@26(char *name, QMatrix3x3 *values, int count)
void setUniformValueArray@27(char *name, QMatrix3x4 *values, int count)
void setUniformValueArray@28(char *name, QMatrix4x2 *values, int count)
void setUniformValueArray@29(char *name, QMatrix4x3 *values, int count)
void setUniformValueArray@30(char *name, QMatrix4x4 *values, int count)
QList<QOpenGLShader *> shaders(void)
int uniformLocation(char *name)
int uniformLocation@2(QByteArray name)
int uniformLocation@3(QString name)
bool hasOpenGLShaderPrograms(QOpenGLContext *context)

<class>
name: QOpenGLShader
para: QOpenGLShader::ShaderType,QObject *
</class>

bool compileSourceCode(char *source)
bool compileSourceCode@2(QByteArray source)
bool compileSourceCode@3(QString source)
bool compileSourceFile(QString fileName)
bool isCompiled(void)
QString log(void)
GLuint shaderId(void)
QOpenGLShader::ShaderType shaderType(void)
QByteArray sourceCode(void)
bool hasOpenGLShaders(QOpenGLShader::ShaderType type, QOpenGLContext *context)

<class>
name: QOpenGLTexture
para: QOpenGLTexture::Target
</class>

void allocateStorage(void)
<comment>
void allocateStorage@2(QOpenGLTexture::PixelFormat pixelFormat, QOpenGLTexture::PixelType pixelType)
</comment>
void bind(void)
void bind@2(uint unit, QOpenGLTexture::TextureUnitReset reset)
QColor borderColor(void)
void borderColor@2(float *border)
void borderColor@3(int *border)
void borderColor@4(unsigned int *border)
<comment>
QOpenGLTexture::ComparisonFunction comparisonFunction(void)
QOpenGLTexture::ComparisonMode comparisonMode(void)
</comment>
bool create(void)
QOpenGLTexture * createTextureView(QOpenGLTexture::Target target, QOpenGLTexture::TextureFormat viewFormat, int minimumMipmapLevel, int maximumMipmapLevel, int minimumLayer, int maximumLayer)
int depth(void)
QOpenGLTexture::DepthStencilMode depthStencilMode(void)
void destroy(void)
int faces(void)
QOpenGLTexture::TextureFormat format(void)
void generateMipMaps(void)
void generateMipMaps@2(int baseLevel, bool resetBaseLevel)
int height(void)
bool isAutoMipMapGenerationEnabled(void)
bool isBound(void)
bool isBound@2(uint unit)
bool isCreated(void)
<comment>
bool isFixedSamplePositions(void)
</comment>
bool isStorageAllocated(void)
bool isTextureView(void)
int layers(void)
QPair<float, float> levelOfDetailRange(void)
float levelofDetailBias(void)
QOpenGLTexture::Filter magnificationFilter(void)
float maximumAnisotropy(void)
float maximumLevelOfDetail(void)
int maximumMipLevels(void)
<comment>
QPair<QOpenGLTexture::Filter, QOpenGLTexture::Filter> minMagQOpenGLTexture::Filters(void)
</comment>
QOpenGLTexture::Filter minificationFilter(void)
float minimumLevelOfDetail(void)
int mipBaseLevel(void)
<comment>
QPair<int, int> mipLevelRange(void)
</comment>
int mipLevels(void)
int mipMaxLevel(void)
void release(void)
void release@2(uint unit, QOpenGLTexture::TextureUnitReset reset)
<comment>
int samples(void)
</comment>
void setAutoMipMapGenerationEnabled(bool enabled)
void setBorderColor(QColor color)
<comment>
void setBorderColor@2(float r, float g, float b, float a)
</comment>
void setBorderColor@3(int r, int g, int b, int a)
void setBorderColor@4(uint r, uint g, uint b, uint a)
<comment>
void setComparisonFunction(QOpenGLTexture::ComparisonFunction function)
void setComparisonMode(QOpenGLTexture::ComparisonMode mode)
</comment>
void setCompressedData(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, void *data, QOpenGLPixelTransferOptions * options)
<comment>
void setCompressedData@2(int mipLevel, int layer, int layerCount, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, void *data, QOpenGLPixelTransferOptions * options)
</comment>
void setCompressedData@3(int mipLevel, int layer, int dataSize, void *data, QOpenGLPixelTransferOptions * options)
void setCompressedData@4(int mipLevel, int dataSize, void *data, QOpenGLPixelTransferOptions * options)
void setCompressedData@5(int dataSize, void *data, QOpenGLPixelTransferOptions * options)
void setData(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, QOpenGLPixelTransferOptions * options)
<comment>
void setData@2(int mipLevel, int layer, int layerCount, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, QOpenGLPixelTransferOptions * options)
</comment>
void setData@3(int mipLevel, int layer, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, QOpenGLPixelTransferOptions * options)
void setData@4(int mipLevel, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, QOpenGLPixelTransferOptions * options)
void setData@5(QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, QOpenGLPixelTransferOptions * options)
void setData@6(QImage image, QOpenGLTexture::MipMapGeneration genMipMaps)
void setDepthStencilMode(QOpenGLTexture::DepthStencilMode mode)
<comment>
void setFixedSamplePositions(bool fixed)
</comment>
void setFormat(QOpenGLTexture::TextureFormat format)
void setLayers(int layers)
void setLevelOfDetailRange(float min, float max)
void setLevelofDetailBias(float bias)
void setMagnificationFilter(QOpenGLTexture::Filter filter)
void setMaximumAnisotropy(float anisotropy)
void setMaximumLevelOfDetail(float value)
void setMinMagFilters(QOpenGLTexture::Filter minificationQOpenGLTexture::Filter, QOpenGLTexture::Filter magnificationQOpenGLTexture::Filter)
void setMinificationFilter(QOpenGLTexture::Filter filter)
void setMinimumLevelOfDetail(float value)
void setMipBaseLevel(int baseLevel)
void setMipLevelRange(int baseLevel, int maxLevel)
void setMipLevels(int levels)
void setMipMaxLevel(int maxLevel)
<comment>
void setSamples(int samples)
</comment>
void setSize(int width, int height, int depth)
void setSwizzleMask(QOpenGLTexture::SwizzleComponent component, QOpenGLTexture::SwizzleValue value)
void setSwizzleMask@2(QOpenGLTexture::SwizzleValue r, QOpenGLTexture::SwizzleValue g, QOpenGLTexture::SwizzleValue b, QOpenGLTexture::SwizzleValue a)
void setWrapMode(QOpenGLTexture::WrapMode mode)
void setWrapMode@2(QOpenGLTexture::CoordinateDirection direction, QOpenGLTexture::WrapMode mode)
QOpenGLTexture::SwizzleValue swizzleMask(QOpenGLTexture::SwizzleComponent component)
<comment>
QOpenGLTexture::Target target(void)
</comment>
GLuint textureId(void)
int width(void)
QOpenGLTexture::WrapMode wrapMode(QOpenGLTexture::CoordinateDirection direction)
GLuint boundTextureId(QOpenGLTexture::BindingTarget target)
<comment>
GLuint boundTextureId@2(uint unit, QOpenGLTexture::Target target)
</comment>
bool hasFeature(QOpenGLTexture::Feature feature)

</filter>

<class>
name: QTabBar
para: QWidget *
parent: QWidget
codename: GTabBar
passvmpointer
</class>

int addTab(QString text)
int addTab@2(QIcon icon, QString text)
int count(void)
int currentIndex(void)
bool documentMode(void)
bool drawBase(void)
Qt::TextElideMode elideMode(void)
bool expanding(void)
QSize iconSize(void)
int insertTab(int index, QString text)
int insertTab@2(int index, QIcon icon, QString text)
bool isMovable(void)
bool isTabEnabled(int index)
void moveTab(int from, int to)
void removeTab(int index)
QTabBar::SelectionBehavior selectionBehaviorOnRemove(void)
void setDocumentMode(bool set)
void setDrawBase(bool drawTheBase)
void setElideMode(Qt::TextElideMode)
void setExpanding(bool enabled)
void setIconSize(QSize size)
void setMovable(bool movable)
void setSelectionBehaviorOnRemove(QTabBar::SelectionBehavior behavior)
void setShape(QTabBar::Shape shape)
void setTabButton(int index, QTabBar::ButtonPosition position, QWidget * widget)
void setTabData(int index, QVariant data)
void setTabEnabled(int index, bool enabled)
void setTabIcon(int index, QIcon icon)
void setTabText(int index, QString text)
void setTabTextColor(int index, QColor color)
void setTabToolTip(int index, QString tip)
void setTabWhatsThis(int index, QString text)
void setTabsClosable(bool closable)
void setUsesScrollButtons(bool useButtons)
QTabBar::Shape shape(void)
int tabAt(QPoint position)
QWidget * tabButton(int index, QTabBar::ButtonPosition position)
QVariant tabData(int index)
QIcon tabIcon(int index)
QRect tabRect(int index)
QString tabText(int index)
QColor tabTextColor(int index)
QString tabToolTip(int index)
QString tabWhatsThis(int index)
bool tabsClosable(void)
bool usesScrollButtons(void)
void setCurrentIndex(int index)

void setcurrentChangedEvent(const char *)
void settabCloseRequestedEvent(const char *)
void settabMovedEvent(const char *)

const char *getcurrentChangedEvent(void)
const char *gettabCloseRequestedEvent(void)
const char *gettabMovedEvent(void)

<class>
name: QFile
para: void
parent: QFileDevice
</class>

bool copy(QString newName)
bool exists(void)
bool link(QString linkName)
bool open(FILE *fh, QIODevice::OpenMode mode, QFile::FileHandleFlags handleFlags)
bool open@2(int fd, QIODevice::OpenMode mode, QFile::FileHandleFlags handleFlags)
bool remove(void)
bool rename(QString newName)
void setFileName(QString name)
QString symLinkTarget(void)
bool copy@2(QString fileName, QString newName)
QString decodeName(QByteArray localFileName)
QString decodeName@2(char *localFileName)
QByteArray encodeName(QString fileName)
bool exists@2(QString fileName)
bool link@2(QString fileName, QString linkName)
QFile::Permissions permissions(QString fileName)
bool remove@2(QString fileName)
bool rename@2(QString oldName, QString newName)
bool resize(QString fileName, qint64 sz)
bool setPermissions(QString fileName, QFile::Permissions permissions)
QString symLinkTarget@2(QString fileName)

<class>
name: QFileDevice
parent: QIODevice
nonew
</class>

QFileDevice::FileError error(void)
bool flush(void)
int handle(void)
uchar * map(qint64 offset, qint64 size, QFileDevice::MemoryMapFlags flags)
QFileDevice::Permissions permissions(void)
bool resize(qint64 sz)
QString fileName(void)
<comment>
QDateTime fileTime(QFileDevice::FileTime time)
bool setFileTime(QDateTime newDate, QFileDevice::FileTime fileTime)
</comment>
bool setPermissions(QFileDevice::Permissions permissions)
bool unmap(uchar *address)
void unsetError(void)

<class>
name: QStandardPaths
para: void
nonew
staticmethods
</class>

QString displayName(QStandardPaths::StandardLocation type)
QString findExecutable(QString executableName, QStringList paths))
QString locate(QStandardPaths::StandardLocation type, QString fileName, QStandardPaths::LocateOptions options)
QStringList locateAll(QStandardPaths::StandardLocation type, QString fileName, QStandardPaths::LocateOptions options)
void setTestModeEnabled(bool testMode)
QStringList standardLocations(QStandardPaths::StandardLocation type)
QString writableLocation(QStandardPaths::StandardLocation type)

<filter> (iswindows() or ismacosx()) 

<class>
name: QQuickWidget
para: QWidget *
parent: QWidget
codename: GQuickWidget
passvmpointer
</class>

QQmlEngine *engine(void)
QList<QQmlError> errors(void)
QSurfaceFormat format(void)
QImage grabFramebuffer(void)
QSize initialSize(void)
QQuickWindow *quickWindow(void)
QQuickWidget::ResizeMode resizeMode(void)
QQmlContext *rootContext(void)
QQuickItem *rootObject(void)
void setClearColor(QColor color)
void setFormat(QSurfaceFormat format)
void setResizeMode(QQuickWidget::ResizeMode)
QUrl source(void)
QQuickWidget::Status status(void)
void setSource(QUrl url)

void setsceneGraphErrorEvent(const char *)
void setstatusChangedEvent(const char *)

const char *getsceneGraphErrorEvent(void)
const char *getstatusChangedEvent(void)

<class>
name: QQmlError
para: void
</class>


int column(void)
QString description(void)
bool isValid(void)
int line(void)
QObject * object(void)
void setColumn(int column)
void setDescription(QString description)
void setLine(int line)
void setObject(QObject *object)
void setUrl(QUrl url)
QString toString(void)
QUrl url(void)

</filter>


<filter> (sysget("RINGQT_ANDROID") = "" and sysget("RINGQT_NOWEBKIT") = "1")
<class>
name: QWebEngineView
para: QWidget *parent
parent: QWidget
codename: GWebEngineView
passvmpointer
</class>

bool hasSelection(void)
QWebEngineHistory *history(void)
void load(QUrl) # In RingQt use : void loadpage(QUrl) 
QWebEnginePage *page(void)
QAction *pageAction(QWebEnginePage::WebAction action)
QString selectedText(void)
void setContent(QByteArray,QString,QUrl)
void setHtml(QString,QUrl)
void setPage(QWebEnginePage *page)
void setUrl(QUrl)
void setZoomFactor(qreal factor)
QWebSettings *settings(void)
QString title(void)
void triggerPageAction(QWebEnginePage::WebAction action, bool checked)
QUrl url(void)
qreal zoomFactor(void)
void back(void)
void forward(void)
void reload(void)
void stop(void)

void setloadFinishedEvent(const char *)
void setloadProgressEvent(const char *)
void setloadStartedEvent(const char *)
void setselectionChangedEvent(const char *)
void settitleChangedEvent(const char *)
void seturlChangedEvent(const char *)

const char *getloadFinishedEvent(void)
const char *getloadProgressEvent(void)
const char *getloadStartedEvent(void)
const char *getselectionChangedEvent(void)
const char *gettitleChangedEvent(void)
const char *geturlChangedEvent(void)


</filter>

<class>
name: QScrollBar
para: QWidget *parent
parent: QAbstractSlider
</class>

<class>
name: QDrag
para: QObject *
parent: QObject
codename: GDrag
passvmpointer
</class>


Qt::DropAction defaultAction(void)
QPixmap dragCursor(Qt::DropAction action)
Qt::DropAction exec(Qt::DropActions supportedActions)
Qt::DropAction exec@2(Qt::DropActions supportedActions, Qt::DropAction defaultDropAction)
QPoint hotSpot(void)
QMimeData *mimeData(void)
QPixmap pixmap(void)
void setDragCursor(QPixmap cursor, Qt::DropAction action)
void setHotSpot(QPoint hotspot)
void setMimeData(QMimeData * data)
void setPixmap(QPixmap pixmap)
QObject * source(void)
Qt::DropActions supportedActions(void)
QObject * target(void)

void setactionChangedEvent(const char *)
void settargetChangedEvent(const char *)

const char *getactionChangedEvent(void)
const char *gettargetChangedEvent(void)

<class>
name: QMimeData
para: void
parent: QObject
</class>

void clear(void)
QVariant colorData(void)
QByteArray data(QString mimeType)
QStringList formats(void)
bool hasColor(void)
bool hasFormat(QString mimeType)
bool hasHtml(void)
bool hasImage(void)
bool hasText(void)
bool hasUrls(void)
QString html(void)
QVariant imageData(void)
void removeFormat(QString mimeType)
void setColorData(QVariant color)
void setData(QString mimeType, QByteArray data)
void setHtml(QString html)
void setImageData(QVariant image)
void setText(QString text)
void setUrls(QList<QUrl> urls)
QString text(void)
QList<QUrl> urls(void)

<class>
name: QDropEvent
para: QPointF,Qt::DropActions,const QMimeData *,Qt::MouseButtons,Qt::KeyboardModifiers,QEvent::Type
parent: QEvent
</class>

void acceptProposedAction(void)
Qt::DropAction dropAction(void)
Qt::KeyboardModifiers keyboardModifiers(void)
QMimeData * mimeData(void)
Qt::MouseButtons mouseButtons(void)
QPoint pos(void)
QPointF posF(void)
Qt::DropActions possibleActions(void)
Qt::DropAction proposedAction(void)
void setDropAction(Qt::DropAction action)
QObject * source(void)

<class>
name: QDragMoveEvent
para: QPoint,Qt::DropActions,const QMimeData *,Qt::MouseButtons,Qt::KeyboardModifiers,QEvent::Type
parent: QDropEvent
</class>


void accept(QRect rectangle)
void accept@2(void)
QRect answerRect(void)
void ignore(QRect rectangle)
void ignore@2(void)

<class>
name: QDragEnterEvent
para: QPoint,Qt::DropActions,const QMimeData *,Qt::MouseButtons,Qt::KeyboardModifiers
parent: QDragMoveEvent
</class>


<class>
name: QDragLeaveEvent
para: void
parent: QEvent
</class>


<class>
name: QClipboard
nonew
</class>

void clear(QClipboard::Mode mode)
QImage image(QClipboard::Mode mode)
QMimeData * mimeData(QClipboard::Mode mode)
bool ownsClipboard(void)
bool ownsFindBuffer(void)
bool ownsSelection(void)
QPixmap pixmap(QClipboard::Mode mode)
void setImage(QImage image, QClipboard::Mode mode)
void setMimeData(QMimeData * src, QClipboard::Mode mode)
void setPixmap(QPixmap pixmap, QClipboard::Mode mode)
void setText(QString text, QClipboard::Mode mode)
bool supportsFindBuffer(void)
bool supportsSelection(void)
QString text(QClipboard::Mode mode)

<class>
name: QChar
para: int
</class>

QChar::Category category(void)
uchar cell(void)
unsigned char combiningClass(void)
QString decomposition(void)
QChar::Decomposition decompositionTag(void)
int digitValue(void)
QChar::Direction direction(void)
bool hasMirrored(void)
bool isDigit(void)
bool isHighSurrogate(void)
bool isLetter(void)
bool isLetterOrNumber(void)
bool isLowSurrogate(void)
bool isLower(void)
bool isMark(void)
bool isNonCharacter(void)
bool isNull(void)
bool isNumber(void)
bool isPrint(void)
bool isPunct(void)
bool isSpace(void)
bool isSurrogate(void)
bool isSymbol(void)
bool isTitleCase(void)
bool isUpper(void)
QChar mirroredChar(void)
uchar row(void)
QChar::Script script(void)
QChar toCaseFolded(void)
char toLatin1(void)
QChar toLower(void)
QChar toTitleCase(void)
QChar toUpper(void)
ushort unicode(void)
ushort unicode@2(void)
QChar::UnicodeVersion unicodeVersion(void)
QChar::Category category@2(uint ucs4)
unsigned char combiningClass@2(uint ucs4)
QChar::UnicodeVersion currentUnicodeVersion(void)
QString decomposition@2(uint ucs4)
QChar::Decomposition decompositionTag@2(uint ucs4)
int digitValue@2(uint ucs4)
QChar::Direction direction@2(uint ucs4)
QChar fromLatin1(char c)
bool hasMirrored@2(uint ucs4)
ushort highSurrogate(uint ucs4)
bool isDigit@2(uint ucs4)
bool isHighSurrogate@2(uint ucs4)
bool isLetter@2(uint ucs4)
bool isLetterOrNumber@2(uint ucs4)
bool isLowSurrogate@2(uint ucs4)
bool isLower@2(uint ucs4)
bool isMark@2(uint ucs4)
bool isNonCharacter@2(uint ucs4)
bool isNumber@2(uint ucs4)
bool isPrint@2(uint ucs4)
bool isPunct@2(uint ucs4)
bool isSpace@2(uint ucs4)
bool isSurrogate@2(uint ucs4)
bool isSymbol@2(uint ucs4)
bool isTitleCase@2(uint ucs4)
bool isUpper@2(uint ucs4)
ushort lowSurrogate(uint ucs4)
uint mirroredChar@2(uint ucs4)
bool requiresSurrogates(uint ucs4)
QChar::Script script@2(uint ucs4)
uint surrogateToUcs4(ushort high, ushort low)
uint surrogateToUcs4@2(QChar high, QChar low)
uint toCaseFolded@2(uint ucs4)
uint toLower@2(uint ucs4)
uint toTitleCase@2(uint ucs4)
uint toUpper@2(uint ucs4)
QChar::UnicodeVersion unicodeVersion@2(uint ucs4)

<class>
name: QChildEvent
para: QEvent::Type,QObject *
parent: QEvent
</class>

bool added(void)
QObject *child(void)
bool polished(void)
bool removed(void)


<class>
name: QGeoPositionInfo
para: void
</class>

qreal attribute(QGeoPositionInfo::Attribute attribute)
QGeoCoordinate coordinate(void)
bool hasAttribute(QGeoPositionInfo::Attribute attribute)
bool isValid(void)
void removeAttribute(QGeoPositionInfo::Attribute attribute)
void setAttribute(QGeoPositionInfo::Attribute attribute, qreal value)
void setCoordinate(QGeoCoordinate coordinate)
void setTimestamp(QDateTime timestamp)
QDateTime timestamp(void)

<class>
name: QGeoCoordinate
para: void
</class>

double altitude(void)
QGeoCoordinate atDistanceAndAzimuth(qreal distance, qreal azimuth, qreal distanceUp)
qreal azimuthTo(QGeoCoordinate other)
qreal distanceTo(QGeoCoordinate other)
bool isValid(void)
double latitude(void)
double longitude(void)
void setAltitude(double altitude)
void setLatitude(double latitude)
void setLongitude(double longitude)
QString toString(QGeoCoordinate::CoordinateFormat format)
QGeoCoordinate::CoordinateType type(void)

<class>
name: QGeoAddress
para: void
</class>

QString city(void)
void clear(void)
QString country(void)
QString countryCode(void)
QString county(void)
QString district(void)
bool isEmpty(void)
bool isTextGenerated(void)
QString postalCode(void)
void setCity(QString city)
void setCountry(QString country)
void setCountryCode(QString countryCode)
void setCounty(QString county)
void setDistrict(QString district)
void setPostalCode(QString postalCode)
void setState(QString state)
void setStreet(QString street)
void setText(QString text)
QString state(void)
QString street(void)
QString text(void)

<class>
name: QGeoAreaMonitorInfo
para: QString
</class>

QGeoShape area(void)
QDateTime expiration(void)
QString identifier(void)
bool isPersistent(void)
bool isValid(void)
QString name(void)
QVariantMap notificationParameters(void)
void setArea(QGeoShape newShape)
void setExpiration(QDateTime expiry)
void setName(QString name)
void setNotificationParameters(QVariantMap parameters)
void setPersistent(bool isPersistent)

<class>
name: QGeoAreaMonitorSource
para: QObject *
parent: QObject
nonew
</class>

QString sourceName(void)
QStringList availableSources(void)
QGeoAreaMonitorSource * createDefaultSource(QObject * parent)
QGeoAreaMonitorSource * createSource(QString sourceName, QObject * parent)

<class>
name: QGeoCircle
para: void
</class>

QGeoCoordinate center(void)
qreal radius(void)
void setCenter(QGeoCoordinate center)
void setRadius(qreal radius)
void translate(double degreesLatitude, double degreesLongitude)
QGeoCircle translated(double degreesLatitude, double degreesLongitude)

<class>
name: QGeoPositionInfoSource
parent: QObject
codename: GGeoPositionInfoSource 
passvmpointer
abstract
</class>

QGeoPositionInfoSource::PositioningMethods preferredPositioningMethods(void)
QString sourceName(void)
int updateInterval(void)

void seterrorEvent(const char *)
void setpositionUpdatedEvent(const char *)
void setupdateTimeoutEvent(const char *)

const char *geterrorEvent(void)
const char *getpositionUpdatedEvent(void)
const char *getupdateTimeoutEvent(void)

<register>
QStringList availableSources(void)
QGeoPositionInfoSource *createDefaultSource(QObject *parent)
QGeoPositionInfoSource *createSource(QString sourceName, QObject *parent)
</register>

<code>
RING_FUNC(ring_QGeoPositionInfoSource_availableSources)
{
	if ( RING_API_PARACOUNT != 0 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	RING_API_IGNORECPOINTERTYPE ;
	{
		QStringList *pValue ; 
		pValue = new QStringList() ;
		*pValue = QGeoPositionInfoSource::availableSources();
		RING_API_RETMANAGEDCPOINTER(pValue,"QStringList",ring_QStringList_freefunc);
	}
}


RING_FUNC(ring_QGeoPositionInfoSource_createDefaultSource)
{
	if ( RING_API_PARACOUNT != 1 ) {
		RING_API_ERROR(RING_API_MISS1PARA);
		return ;
	}
	RING_API_IGNORECPOINTERTYPE ;
	if ( ! RING_API_ISPOINTER(1) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	RING_API_RETCPOINTER(QGeoPositionInfoSource::createDefaultSource((QObject *) RING_API_GETCPOINTER(1,"QObject")),"QGeoPositionInfoSource");
}


RING_FUNC(ring_QGeoPositionInfoSource_createSource)
{
	if ( RING_API_PARACOUNT != 2 ) {
		RING_API_ERROR(RING_API_MISS2PARA);
		return ;
	}
	RING_API_IGNORECPOINTERTYPE ;
	if ( ! RING_API_ISSTRING(1) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	if ( ! RING_API_ISPOINTER(2) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	RING_API_RETCPOINTER(QGeoPositionInfoSource::createSource(RING_API_GETSTRING(1),(QObject *) RING_API_GETCPOINTER(2,"QObject")),"QGeoPositionInfoSource");
}



</code>

<class>
name: QGeoRectangle
para: void
parent: QGeoShape
</class>

QGeoCoordinate bottomLeft(void)
QGeoCoordinate bottomRight(void)
QGeoCoordinate center(void)
bool contains(QGeoRectangle rectangle)
double height(void)
bool intersects(QGeoRectangle rectangle)
void setBottomLeft(QGeoCoordinate bottomLeft)
void setBottomRight(QGeoCoordinate bottomRight)
void setCenter(QGeoCoordinate center)
void setHeight(double degreesHeight)
void setTopLeft(QGeoCoordinate topLeft)
void setTopRight(QGeoCoordinate topRight)
void setWidth(double degreesWidth)
QGeoCoordinate topLeft(void)
QGeoCoordinate topRight(void)
void translate(double degreesLatitude, double degreesLongitude)
QGeoRectangle translated(double degreesLatitude, double degreesLongitude)
QGeoRectangle united(QGeoRectangle rectangle)
double width(void)

<class>
name: QGeoShape
para: void
</class>

bool contains(QGeoCoordinate coordinate)
bool isEmpty(void)
bool isValid(void)
QGeoShape::ShapeType type(void)

<class>
name: QGeoSatelliteInfo
para: void
</class>

qreal attribute(QGeoSatelliteInfo::Attribute attribute)
bool hasAttribute(QGeoSatelliteInfo::Attribute attribute)
void removeAttribute(QGeoSatelliteInfo::Attribute attribute)
int satelliteIdentifier(void)
QGeoSatelliteInfo::SatelliteSystem satelliteSystem(void)
void setAttribute(QGeoSatelliteInfo::Attribute attribute, qreal value)
void setSatelliteIdentifier(int satId)
void setSatelliteSystem(QGeoSatelliteInfo::SatelliteSystem system)
void setSignalStrength(int signalStrength)
int signalStrength(void)

<class>
name: QGeoSatelliteInfoSource
nonew
</class>

QString sourceName(void)
int updateInterval(void)

<class>
name: QNmeaPositionInfoSource
para: QNmeaPositionInfoSource::UpdateMode,QObject *
parent: QGeoPositionInfoSource
</class>

QIODevice * device(void)
void setDevice(QIODevice * device)
QNmeaPositionInfoSource::UpdateMode updateMode(void)
