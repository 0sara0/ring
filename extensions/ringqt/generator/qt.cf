<nodllstartup>

<libinitfunc> ring_qt_start

<ignorecpointertype>

<code>
/* Copyright (c) 2013-2018 Mahmoud Fayed <msfclipper@yahoo.com> */

extern "C" {
	#include "ring.h"
}

#include "gpushbutton.h"
#include "gaction.h"
#include "glineedit.h"
#include "gtextedit.h"
#include "glistwidget.h"
#include "gtreeview.h"
#include "gtreewidget.h"
#include "gcombobox.h"
#include "gtabwidget.h"
#include "gtablewidget.h"
#include "gprogressbar.h"
#include "gspinbox.h"
#include "gslider.h"
#include "gdial.h"
#include "gnetworkaccessmanager.h"
#include "gcheckbox.h"
#include "gradiobutton.h"
#include "gbuttongroup.h"
#include "gvideowidget.h"
#include "gtimer.h"
#include "gtcpserver.h"
#include "giodevice.h"
#include "gabstractsocket.h"
#include "gtcpsocket.h"
#include "gcolordialog.h"
#include "gallevents.h"
#include "gthread.h"
#include "gplaintextedit.h"
#include "gheaderview.h"
#include "gprocess.h"
#include "codeeditor.h"
#include "highlighter.h"
#include "gtoolbutton.h"
#include "gbluetoothdevicediscoveryagent.h"
#include "gbluetoothlocaldevice.h"
#include "gbluetoothserver.h"
#include "gbluetoothservicediscoveryagent.h"
#include "gbluetoothsocket.h"
#include "gbluetoothtransfermanager.h"
#include "gbluetoothtransferreply.h"
#include "gwindow.h"
#include "gguiapplication.h"
#include "gtextbrowser.h"
#include "gdockwidget.h"
#include "gstackedwidget.h"
#include "gcalendarwidget.h"
<filter> ((iswindows() or ismacosx()) and sysget("RINGQT_ANDROID") = "")
#include "openglwidget.h"
</filter>

#include <QApplication>
#include <QObject>
#include <QWidget>
#include <QLabel>
#include <QPixmap>
#include <QIcon>
#include <QSize>
#include <QPushButton>
#include <QMainWindow>
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QLineEdit>
#include <QTextEdit>
#include <QListWidget>
#include <QTreeView>
#include <QDir>
#include <QFileSystemModel>
#include <QTreeWidget>
#include <QTreeWidgetItem>
#include <QComboBox>
#include <QVariant>
#include <QMenuBar>
#include <QMenu>
#include <QToolBar>
#include <QMainWindow>
#include <QStatusBar>
#include <QDockWidget>
#include <QTabWidget>
#include <QTableWidget>
#include <QTableWidgetItem>
#include <QSizePolicy>
#include <QFrame>
#include <QAbstractScrollArea>
#include <QAbstractItemView>
#include <QProgressBar>
#include <QSpinBox>
#include <QSlider>
#include <QAbstractSlider>
#include <QDateEdit>
#include <QDateTimeEdit>
#include <QAbstractSpinBox>
#include <QDial>
#include <QUrl>
#include <QCheckBox>
#include <QRadioButton>
#include <QButtonGroup>
#include <QMediaPlayer>
#include <QMediaPlaylist>
#include <QVideoWidget>
#include <QPrinter>
#include <QAction>
#include <QEvent>
#include <QMessageBox>
#include <QTimer>
#include <QFileDialog>
#include <QPainter>
#include <QPicture>
#include <QPen>
#include <QColor>
#include <QPrinter>
#include <QFont>
#include <QBrush>
#include <QByteArray>
#include <QIODevice>
#include <QAbstractSocket>
#include <QTcpSocket>
#include <QTcpServer>
#include <QNetworkProxy>
#include <QHostAddress>
#include <QHostInfo>
#include <QList>
#include <QFileInfo>
#include <QDirModel>
#include <QModelIndex>
#include <QFontDialog>
#include <QDialog>
#include <QTextCursor>
#include <QTextBlock>
#include <QTextDocumentFragment>
#include <QColorDialog>
#include <QHeaderView>
#include <QStringList>
#include <QKeySequence>
#include <QLCDNumber>
#include <QInputDialog>
#include <QDesktopWidget>
#include <QRect>
#include <QTextDocument>
#include <QTime>
#include <QTest>
#include <QListWidgetItem>
#include <QSystemTrayIcon>
#include <QDate>
#include <QTextCodec>
#include <QtSql>
#include <QSqlDatabase>
#include <QSqlDriver>
#include <QSqlQuery>
#include <QSqlError>
#include <QSqlIndex>
#include <QSqlRecord>
#include <QSqlField>
#include <QSqlDriverCreatorBase>
#include <QNetworkRequest>
#include <QNetworkAccessManager>
#include <QNetworkReply>
#include <QPainterPath>
#include <QImage>
#include <QBitmap>
#include <QMediaContent>
#include <QTableView>
#include <QXmlStreamReader>
#include <QXmlStreamWriter>
#include <QXmlStreamNotationDeclaration>
#include <QXmlStreamNamespaceDeclaration>
#include <QXmlStreamEntityResolver>
#include <QXmlStreamEntityDeclaration>
#include <QXmlStreamAttributes>
#include <QXmlStreamAttribute>
#include <QThread>
#include <QThreadPool>
#include <QRegularExpression>
#include <QRegularExpressionMatch>
#include <QRegularExpressionMatchIterator>
#include <QJsonValue>
#include <QJsonParseError>
#include <QJsonObject>
#include <QJsonDocument>
#include <QJsonArray>
#include <iterator>
#include <QPlainTextEdit>
#include <QGridLayout>
#include <QTextCharFormat>
#include <QCameraViewfinder>
#include <QGraphicsVideoItem>
#include <QVideoWidgetControl>
#include <QCamera>
#include <QCameraImageCapture>
#include <QFontMetrics>
#include <QList>
#include <QSplashScreen>
#include <QBoxLayout>
#include <QLayout>
#include <QLinearGradient>
#include <QGradient>
#include <QPointF>
#include <QPoint>
#include <QStyleFactory>
#include <QScrollArea>
#include <QSplitter>
#include <QCompleter>
#include <QString>
#include <QProcess>
#include <QMdiArea>
#include <QMdiSubWindow>
#include <QCursor>
#include <QListView>
#include <QUuid>
#include <QDesktopServices>
#include <QToolButton>
#include <QStringRef>
#include <QMutex>
#include <QMutexLocker>
#include <QBuffer>
#include <QBluetoothAddress>
#include <QBluetoothDeviceDiscoveryAgent>
#include <QBluetoothDeviceInfo>
#include <QBluetoothUuid>
#include <QBluetoothHostInfo>
#include <QBluetoothLocalDevice>
#include <QBluetoothServer>
#include <QBluetoothServiceDiscoveryAgent>
#include <QBluetoothServiceInfo>
#include <QBluetoothSocket>
#include <QBluetoothTransferManager>
#include <QBluetoothTransferReply>
#include <QBluetoothTransferRequest>
#include <QBluetoothUuid>
#include <QDateTime>
#include <QScreen>
#include <QWindow>
#include <QGuiApplication>
#include <QTextBrowser>
#include <QRegion>
#include <QStackedWidget>
#include <QCalendarWidget>
#include <QVector2D>
#include <QVector3D>
#include <QVector4D>
#include <QQuaternion>
#include <QMatrix4x4>

#include <QTabBar>
#include "gtabbar.h"
#include <QFile>
#include <QFileDevice>
#include <QStandardPaths>

#include <QDrag>
#include "gdrag.h"
#include <QMimeData>
#include <QDropEvent>
#include <QDragMoveEvent>
#include <QDragEnterEvent>
#include <QDragLeaveEvent>
#include <QClipboard>
#include <QChar>
#include <QChildEvent>

#include <QGeoPositionInfo>
#include <QGeoCoordinate>
#include <QGeoAddress>
#include <QGeoAreaMonitorInfo>
#include <QGeoAreaMonitorSource>
#include <QGeoCircle>
#include <QGeoPositionInfoSource>
#include "ggeopositioninfosource.h"
#include <QGeoRectangle>
#include <QGeoShape>
#include <QGeoSatelliteInfo>
#include <QGeoSatelliteInfoSource>
#include <QNmeaPositionInfoSource>

<filter> (iswindows() or ismacosx())
#include <QQuickWidget>
#include <QQmlError>
#include "gquickwidget.h"
</filter>

<filter> ((iswindows() or ismacosx()) and sysget("RINGQT_ANDROID") = "")

#include <QOpenGLFunctions>
#include <QOpenGLContext>
#include <QSurfaceFormat>
#include <QOpenGLFunctions_3_2_Core>
#include <QOpenGLVersionProfile>
#include <QOpenGLPaintDevice>
#include <QPaintDevice>
#include <QOpenGLTimerQuery>
#include <QOpenGLDebugLogger>
#include <QOpenGLFramebufferObject>
#include <QOpenGLVertexArrayObject>
#include <QOpenGLBuffer>
#include <QOpenGLShaderProgram>
#include <QOpenGLShader>
#include <QOpenGLTexture>
</filter>

<filter> (sysget("RINGQT_ANDROID") = "")

#include "gserialport.h"
#include <QSerialPort>
#include <QSerialPortInfo>

</filter>

<filter> (sysget("RINGQT_ANDROID") = "" and sysget("RINGQT_NOWEBKIT") = "")
#include "gwebview.h"
#include <QWebSettings>
#include <QWebView>
</filter>

<filter> (sysget("RINGQT_ANDROID") = "" and sysget("RINGQT_NOWEBKIT") = "1")
#include "gwebengineview.h"
#include <QWebEngineSettings>
#include <QWebEngineView>
#include <QWebEnginePage>
#include <QWebEngineHistory>
</filter>


<filter> (iswindows() and sysget("RINGQT_ANDROID") = "")

#include <QAxObject>
#include <QAxBase>

</filter>

extern "C" {

	RING_API void ring_qt_start(RingState *pRingState);

	RING_API void ringlib_init(RingState *pRingState)
	{

		new QApplication(pRingState->argc,pRingState->argv);
 	   	ring_qt_start(pRingState) ;
	}

}
</code>


<runcode>

aStringTypes + "QString"

aBeforeReturn + ["QString",".toStdString().c_str()"]

aNewMethodName + ["QWebView","load","loadpage"]
aNewMethodName + ["QMediaPlaylist","load","loadfile"]
aNewMethodName + ["QMediaPlaylist","next","movenext"]
aNewMethodName + ["QPainter","end","endpaint"]
aNewMethodName + ["QPicture","load","loadfile"]
aNewMethodName + ["QLineEdit","end","endtext"]
aNewMethodName + ["QDialog","done","donedialog"]
aNewMethodName + ["QTextDocument","end","enddoc"]
aNewMethodName + ["QTextBlock","next","nextblock"]
aNewMethodName + ["QSqlQuery","next","movenext"]
aNewMethodName + ["QImage","load","loadimage"]
aNewMethodName + ["QNetworkAccessManager","get","getvalue"]
aNewMethodName + ["QNetworkAccessManager","put","putvalue"]
aNewMethodName + ["QThread","exit","exitfromthread"]
aNewMethodName + ["QRegularExpressionMatchIterator","next","nextitem"]
aNewMethodName + ["QCamera","load","loadcamera"]
aNewMethodName + ["QPixmap","load","loadpixmap"]
aNewMethodName + ["QBluetoothTransferManager","put","putdata"]
aNewMethodName + ["QCoreApplication","exit","exitfromapplication"]
aNewMethodName + ["QOpenGLTimerQuery","end","endtimer"]

aNumberTypes + "qreal"
aNumberTypes + "qint64"
aNumberTypes + "ushort"
aNumberTypes + "ulong"

aEnumTypes + "Qt::GestureType"
aEnumTypes + "Qt::GestureFlag"
aEnumTypes + "Qt::ShortcutContext"
aEnumTypes + "Qt::InputMethodQuery"
aEnumTypes + "Qt::WindowType"
aEnumTypes + "QWidget::RenderFlag"
aEnumTypes + "Qt::WidgetAttribute"
aEnumTypes + "QPalette::ColorRole"
aEnumTypes + "Qt::ContextMenuPolicy"
aEnumTypes + "Qt::FocusReason"
aEnumTypes + "Qt::FocusPolicy"
aEnumTypes + "Qt::InputMethodHint"
aEnumTypes + "Qt::LayoutDirection"
aEnumTypes + "QSizePolicy::Policy"
aEnumTypes + "Qt::WindowType"
aEnumTypes + "Qt::WindowModality"
aEnumTypes + "Qt::WindowState"
aEnumTypes + "Qt::AlignmentFlag"
aEnumTypes + "Qt::Alignment"
aEnumTypes + "Qt::TextFormat"
aEnumTypes + "Qt::TextInteractionFlag"
aEnumTypes + "Qt::AspectRatioMode"
aEnumTypes + "Qt::TransformationMode"
aEnumTypes + "Qt::CursorMoveStyle"
aEnumTypes + "QLineEdit::EchoMode"
aEnumTypes + "QTextDocument::FindFlag"
aEnumTypes + "QTextCursor::MoveOperation"
aEnumTypes + "QTextCursor::MoveMode"
aEnumTypes + "QTextEdit::LineWrapMode"
aEnumTypes + "QTextOption::WrapMode"
aEnumTypes + "QItemSelectionModel::SelectionFlag"
aEnumTypes + "Qt::SortOrder"
aEnumTypes + "QAbstractItemView::ScrollHint"
aEnumTypes + "QDir::Filter"
aEnumTypes + "Qt::DropAction"
aEnumTypes + "Qt::Orientation"
aEnumTypes + "Qt::CheckState"
aEnumTypes + "QTreeWidgetItem::ChildIndicatorPolicy"
aEnumTypes + "Qt::ItemFlag"
aEnumTypes + "Qt::MatchFlag"
aEnumTypes + "Qt::Corner"
aEnumTypes + "Qt::ToolBarArea"
aEnumTypes + "Qt::ToolButtonStyle"
aEnumTypes + "Qt::DockWidgetArea"
aEnumTypes + "QMainWindow::DockOption"
aEnumTypes + "QTabWidget::TabPosition"
aEnumTypes + "QTabWidget::TabShape"
aEnumTypes + "QDockWidget::DockWidgetFeature"
aEnumTypes + "Qt::TextElideMode"
aEnumTypes + "Qt::DockWidgetAreas"
aEnumTypes + "QFrame::Shadow"
aEnumTypes + "QFrame::Shape"
aEnumTypes + "Qt::ScrollBarPolicy"
aEnumTypes + "QAbstractItemView::DragDropMode"
aEnumTypes + "QAbstractItemView::ScrollMode"
aEnumTypes + "QAbstractItemView::EditTrigger"
aEnumTypes + "QAbstractItemView::SelectionBehavior"
aEnumTypes + "QAbstractItemView::SelectionMode"
aEnumTypes + "QProgressBar::Direction"
aEnumTypes + "QAbstractSlider::SliderAction"
aEnumTypes + "QSlider::TickPosition"
aEnumTypes + "QDateTimeEdit::Section"
aEnumTypes + "Qt::TimeSpec"
aEnumTypes + "QAbstractSpinBox::ButtonSymbols"
aEnumTypes + "QAbstractSpinBox::CorrectionMode"
aEnumTypes + "QWebPage::FindFlag"
aEnumTypes + "QWebPage::WebAction"
aEnumTypes + "QWebEnginePage::FindFlag"
aEnumTypes + "QWebEnginePage::WebAction"
aEnumTypes + "QPainter::RenderHint"
aEnumTypes + "QUrl::ComponentFormattingOption"
aEnumTypes + "QUrl::ParsingMode"
aEnumTypes + "QMediaPlaylist::PlaybackMode"
aEnumTypes + "QAction::ActionEvent"
aEnumTypes + "QAction::MenuRole"
aEnumTypes + "QAction::Priority"
aEnumTypes + "QKeySequence::StandardKey"
aEnumTypes + "QMessageBox::ButtonRole"
aEnumTypes + "QMessageBox::StandardButton"
aEnumTypes + "QFileDialog::DialogLabel"
aEnumTypes + "QFileDialog::AcceptMode"
aEnumTypes + "QFileDialog::FileMode"
aEnumTypes + "QFileDialog::Option"
aEnumTypes + "QFileDialog::ViewMode"
aEnumTypes + "Qt::ImageConversionFlag"
aEnumTypes + "Qt::FillRule"
aEnumTypes + "Qt::SizeMode"
aEnumTypes + "Qt::BGMode"
aEnumTypes + "Qt::ClipOperation"
aEnumTypes + "QPainter::CompositionMode"
aEnumTypes + "Qt::PenCapStyle"
aEnumTypes + "Qt::PenJoinStyle"
aEnumTypes + "Qt::PenStyle"
aEnumTypes + "QColor::Spec"
aEnumTypes + "QPrinter::Unit"
aEnumTypes + "QPrinter::ColorMode"
aEnumTypes + "QPrinter::DuplexMode"
aEnumTypes + "QPrinter::OutputFormat"
aEnumTypes + "QPageLayout::Unit"
aEnumTypes + "QPrinter::PageOrder"
aEnumTypes + "QPageLayout::Orientation"
aEnumTypes + "QPrinter::PaperSource"
aEnumTypes + "QPrinter::PrintRange"
aEnumTypes + "QFont::Capitalization"
aEnumTypes + "QFont::HintingPreference"
aEnumTypes + "QFont::SpacingType"
aEnumTypes + "QFont::Style"
aEnumTypes + "QFont::StyleHint"
aEnumTypes + "QFont::StyleStrategy"
aEnumTypes + "QWebSettings::FontFamily"
aEnumTypes + "QWebSettings::FontSize"
aEnumTypes + "QWebSettings::WebAttribute"
aEnumTypes + "QWebSettings::ThirdPartyCookiePolicy"
aEnumTypes + "QWebSettings::WebGraphic"
aEnumTypes + "Qt::BrushStyle"
aEnumTypes + "QAbstractSocket::BindFlag"
aEnumTypes + "QIODevice::OpenModeFlag"
aEnumTypes + "QIODevice::OpenMode"
aEnumTypes + "QAbstractSocket::NetworkLayerProtocol"
aEnumTypes + "QAbstractSocket::PauseMode"
aEnumTypes + "QAbstractSocket::SocketState"
aEnumTypes + "QAbstractSocket::SocketOption"
aEnumTypes + "QNetworkRequest::KnownHeaders"
aEnumTypes + "QNetworkProxy::Capability"
aEnumTypes + "QNetworkProxy::ProxyType"
aEnumTypes + "QHostInfo::HostInfoError"
aEnumTypes + "QFileDevice::Permission"
aEnumTypes + "QDir::SortFlag"
aEnumTypes + "QFontDialog::FontDialogOption"
aEnumTypes + "QTextCursor::SelectionType"
aEnumTypes + "QColorDialog::ColorDialogOption"
aEnumTypes + "QLCDNumber::Mode"
aEnumTypes + "QLCDNumber::SegmentStyle"
aEnumTypes + "QInputDialog::InputMode"
aEnumTypes + "QInputDialog::InputDialogOption"
aEnumTypes + "QTextDocument::Stacks"
aEnumTypes + "QTextDocument::FindFlag"
aEnumTypes + "QTextDocument::MetaInformation"
aEnumTypes + "Qt::InputMethodHints"
aEnumTypes + "Qt::WindowFlags"
aEnumTypes + "QEvent::Type"
aEnumTypes + "QPrinter::PrinterMode"
aEnumTypes + "Qt::ItemFlags"
aEnumTypes + "QSystemTrayIcon::MessageIcon"
aEnumTypes + "Qt::DateFormat"
aEnumTypes + "MonthNameType"
aEnumTypes + "QTextCodec::ConversionFlag"
aEnumTypes + "ConverterState"
aEnumTypes + "QSql::NumericalPrecisionPolicy"
aEnumTypes + "QVariant::Type"
aEnumTypes + "DbmsType"
aEnumTypes + "QSqlQuery::BatchExecutionMode"
aEnumTypes + "RequiredStatus"
aEnumTypes + "QSql::ParamType"
aEnumTypes + "QSqlError::ErrorType"
aEnumTypes + "QSqlField::RequiredStatus"
aEnumTypes + "Qt::CaseSensitivity"
aEnumTypes + "QNetworkRequest::Attribute"
aEnumTypes + "QNetworkRequest::KnownHeaders"
aEnumTypes + "QNetworkRequest::Priority"
aEnumTypes + "QNetworkRequest::KnownHeaders" 
aEnumTypes + "QNetworkRequest::Priority"
aEnumTypes + "QNetworkAccessManager::NetworkAccessibility"
aEnumTypes + "QNetworkReply::NetworkError"
aEnumTypes + "Qt::SizeMode"
aEnumTypes + "Qt::ImageConversionFlags"
aEnumTypes + "Qt::MaskMode"
aEnumTypes + "QImage::Format"
aEnumTypes + "QImage::InvertMode"
aEnumTypes + "Error"
aEnumTypes + "ReadElementTextBehaviour"
aEnumTypes + "TokenType"
aEnumTypes + "QXmlStreamReader::ReadElementTextBehaviour"
aEnumTypes + "QThread::Priority"
aEnumTypes + "QRegularExpression::MatchOption"
aEnumTypes + "QRegularExpression::MatchType"
aEnumTypes + "QRegularExpression::PatternOption"
aEnumTypes + "QRegularExpression::MatchOptions"
aEnumTypes + "QRegularExpression::PatternOptions"
aEnumTypes + "QJsonDocument::DataValidation"
aEnumTypes + "QJsonDocument::JsonFormat"
aEnumTypes + "QPlainTextEdit::LineWrapMode"
aEnumTypes + "QTextCharFormat::FontPropertiesInheritanceBehavior"
aEnumTypes + "QTextCharFormat::UnderlineStyle"
aEnumTypes + "QTextCharFormat::VerticalAlignment"
aEnumTypes + "QCamera::FrameRateRange"
aEnumTypes + "QCamera::CaptureMode"
aEnumTypes + "QCamera::CaptureModes"
aEnumTypes + "QCamera::Error"
aEnumTypes + "QCamera::LockChangeReason"
aEnumTypes + "QCamera::LockQCamera::Status"
aEnumTypes + "QCamera::LockType"
aEnumTypes + "QCamera::LockTypes"
aEnumTypes + "QCamera::Position"
aEnumTypes + "QCamera::State"
aEnumTypes + "QCamera::Status"
aEnumTypes + "QCameraImageCapture::CaptureDestination"
aEnumTypes + "QCameraImageCapture::CaptureDestinations"
aEnumTypes + "QCameraImageCapture::DriveMode"
aEnumTypes + "QCameraImageCapture::Error"
aEnumTypes + "QHeaderView::ResizeMode"
aEnumTypes + "QLayout::SizeConstraint"
aEnumTypes + "QGradient::CoordinateMode"
aEnumTypes + "QGradient::Spread"
aEnumTypes + "QGradient::Type"
aEnumTypes + "Qt::MatchFlags"
aEnumTypes + "QCompleter::CompletionMode"
aEnumTypes + "QCompleter::ModelSorting"
aEnumTypes + "QString::SplitBehavior"
aEnumTypes + "QProcess::ExitStatus"
aEnumTypes + "QProcess::InputChannelMode"
aEnumTypes + "QProcess::ProcessChannel"
aEnumTypes + "QProcess::ProcessChannelMode"
aEnumTypes + "QProcess::ProcessError"
aEnumTypes + "QProcess::ProcessState"
aEnumTypes + "QMdiArea::ViewMode"
aEnumTypes + "QMdiArea::WindowOrder"
aEnumTypes + "QMdiArea::AreaOption"
aEnumTypes + "QMdiSubWindow::SubWindowOption"
aEnumTypes + "Qt::CursorShape"
aEnumTypes + "QListView::LayoutMode"
aEnumTypes + "QListView::Movement"
aEnumTypes + "QListView::ResizeMode"
aEnumTypes + "QListView::ViewMode"
aEnumTypes + "QListView::Flow"
aEnumTypes + "QAxBase::PropertyBag"
aEnumTypes + "QToolButton::ToolButtonPopupMode"
aEnumTypes + "QMutex::RecursionMode"
aEnumTypes + "QBluetoothDeviceDiscoveryAgent::DiscoveryMethod"
aEnumTypes + "QBluetoothDeviceDiscoveryAgent::DiscoveryMethods"
aEnumTypes + "QBluetoothDeviceDiscoveryAgent::Error"
aEnumTypes + "QBluetoothDeviceDiscoveryAgent::InquiryType"
aEnumTypes + "QBluetoothDeviceInfo::CoreConfiguration"
aEnumTypes + "QBluetoothDeviceInfo::CoreConfigurations"
aEnumTypes + "QBluetoothDeviceInfo::DataCompleteness"
aEnumTypes + "QBluetoothDeviceInfo::MajorDeviceClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorAudioVideoClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorComputerClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorHealthClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorImagingClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorMiscellaneousClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorNetworkClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorPeripheralClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorPhoneClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorToyClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorWearableClass"
aEnumTypes + "QBluetoothDeviceInfo::ServiceClass"
aEnumTypes + "QBluetoothDeviceInfo::ServiceClasses"
aEnumTypes + "QBluetoothLocalDevice::Error"
aEnumTypes + "QBluetoothLocalDevice::HostMode"
aEnumTypes + "QBluetoothLocalDevice::Pairing"
aEnumTypes + "QBluetoothServer::Error"
aEnumTypes + "QBluetoothServiceDiscoveryAgent::DiscoveryMode"
aEnumTypes + "QBluetoothServiceDiscoveryAgent::Error"
aEnumTypes + "QBluetoothServiceInfo::AttributeId"
aEnumTypes + "QBluetoothServiceInfo::Protocol"
aEnumTypes + "QBluetoothSocket::SocketError"
aEnumTypes + "QBluetoothSocket::SocketState"
aEnumTypes + "QBluetoothTransferReply::TransferError"
aEnumTypes + "QBluetoothTransferRequest::Attribute"
aEnumTypes + "QBluetoothUuid::CharacteristicType"
aEnumTypes + "QBluetoothUuid::DescriptorType"
aEnumTypes + "QBluetoothUuid::ProtocolUuid"
aEnumTypes + "QBluetoothUuid::ServiceClassUuid"
aEnumTypes + "QDockWidget::DockWidgetFeature"
aEnumTypes + "QDockWidget::DockWidgetFeatures"
aEnumTypes + "QRegion::RegionType"
aEnumTypes + "QEventLoop::ProcessEventsFlags"
aEnumTypes + "Qt::ApplicationAttribute"
aEnumTypes + "QCalendarWidget::HorizontalHeaderFormat"
aEnumTypes + "QCalendarWidget::VerticalHeaderFormat"
aEnumTypes + "QCalendarWidget::SelectionMode"
aEnumTypes + "QOpenGLFunctions::OpenGLFeature"
aEnumTypes + "QOpenGLFunctions::OpenGLFeatures"
aEnumTypes + "QOpenGLContext::OpenGLModuleType"
aEnumTypes + "QSurfaceFormat::ColorSpace"
aEnumTypes + "QSurfaceFormat::FormatOption"
aEnumTypes + "QSurfaceFormat::FormatOptions"
aEnumTypes + "QSurfaceFormat::OpenGLContextProfile"
aEnumTypes + "QSurfaceFormat::RenderableType"
aEnumTypes + "QSurfaceFormat::SwapBehavior"
aEnumTypes + "QOpenGLWidget::UpdateBehavior"
aEnumTypes + "QOpenGLTexture::BindingTarget"
aEnumTypes + "QOpenGLTexture::ComparisonFunction"
aEnumTypes + "QOpenGLTexture::ComparisonMode"
aEnumTypes + "QOpenGLTexture::CoordinateDirection"
aEnumTypes + "QOpenGLTexture::CubeMapFace"
aEnumTypes + "QOpenGLTexture::DepthStencilMode"
aEnumTypes + "QOpenGLTexture::Feature"
aEnumTypes + "QOpenGLTexture::Features"
aEnumTypes + "QOpenGLTexture::Filter"
aEnumTypes + "QOpenGLTexture::MipMapGeneration"
aEnumTypes + "QOpenGLTexture::PixelFormat"
aEnumTypes + "QOpenGLTexture::PixelType"
aEnumTypes + "QOpenGLTexture::SwizzleComponent"
aEnumTypes + "QOpenGLTexture::SwizzleValue"
aEnumTypes + "QOpenGLTexture::Target"
aEnumTypes + "QOpenGLTexture::TextureFormat"
aEnumTypes + "QOpenGLTexture::TextureUnitReset"
aEnumTypes + "QOpenGLTexture::WrapMode"
aEnumTypes + "QPaintDevice::PaintDeviceMetric"
aEnumTypes + "QOpenGLDebugLogger::LoggingMode"
aEnumTypes + "QOpenGLFramebufferObject::Attachment"
aEnumTypes + "QOpenGLBuffer::Access"
aEnumTypes + "QOpenGLBuffer::RangeAccessFlag"
aEnumTypes + "QOpenGLBuffer::RangeAccessFlags"
aEnumTypes + "QOpenGLBuffer::Type"
aEnumTypes + "QOpenGLBuffer::UsagePattern"
aEnumTypes + "QOpenGLShader::ShaderType"
aEnumTypes + "QOpenGLShader::ShaderTypeBit"
aEnumTypes + "QTabBar::ButtonPosition"
aEnumTypes + "QTabBar::SelectionBehavior"
aEnumTypes + "QTabBar::Shape"
aEnumTypes + "QFileDevice::FileError"
aEnumTypes + "QFileDevice::FileHandleFlag"
aEnumTypes + "QFileDevice::FileHandleFlags"
aEnumTypes + "QFileDevice::FileTime"
aEnumTypes + "QFileDevice::MemoryMapFlags"
aEnumTypes + "QFileDevice::Permission"
aEnumTypes + "QFileDevice::Permissions"
aEnumTypes + "QStandardPaths::LocateOption"
aEnumTypes + "QStandardPaths::LocateOptions"
aEnumTypes + "QStandardPaths::StandardLocation"
aEnumTypes + "QFile::FileHandleFlags"
aEnumTypes + "QFile::Permissions"
aEnumTypes + "QDir::Filter"
aEnumTypes + "QDir::Filters"
aEnumTypes + "QDir::SortFlag"
aEnumTypes + "QDir::SortFlags"
aEnumTypes + "QQuickWidget::ResizeMode"
aEnumTypes + "QQuickWidget::Status"
aEnumTypes + "Qt::DropActions"
aEnumTypes + "Qt::MouseButtons"
aEnumTypes + "Qt::KeyboardModifiers"
aEnumTypes + "QClipboard::Mode"
aEnumTypes + "QChar::Category"
aEnumTypes + "QChar::Decomposition"
aEnumTypes + "QChar::Direction"
aEnumTypes + "QChar::JoiningType"
aEnumTypes + "QChar::Script"
aEnumTypes + "QChar::SpecialCharacter"
aEnumTypes + "QChar::UnicodeVersion"
aEnumTypes + "QGeoPositionInfo::Attribute"
aEnumTypes + "QGeoCoordinate::CoordinateFormat"
aEnumTypes + "QGeoCoordinate::CoordinateType"
aEnumTypes + "QGeoPositionInfoSource::Error"
aEnumTypes + "QGeoPositionInfoSource::PositioningMethod"
aEnumTypes + "QGeoPositionInfoSource::PositioningMethods"
aEnumTypes + "QGeoShape::ShapeType"
aEnumTypes + "QGeoSatelliteInfo::Attribute"
aEnumTypes + "QGeoSatelliteInfo::SatelliteSystem"
aEnumTypes + "QNmeaPositionInfoSource::UpdateMode"

$aMallocClassesList + "QModelIndex"

</runcode>

<addfreefunctionsprototype>

<loadfile> qapp.cf
<loadfile> qdesktopservices.cf
<loadfile> qtest.cf
<loadfile> qobject.cf
<loadfile> qwidget.cf
<loadfile> qlabel.cf
<loadfile> qpushbutton.cf
<loadfile> qbitmap.cf
<loadfile> qpixmap.cf
<loadfile> qpixmap2.cf
<loadfile> qicon.cf
<loadfile> qsize.cf
<loadfile> qlineedit.cf
<loadfile> qvboxlayout.cf
<loadfile> qhboxlayout.cf
<loadfile> qtextedit.cf
<loadfile> qlistwidget.cf
<loadfile> qtreeview.cf
<loadfile> qdir.cf
<loadfile> qfilesystemmodel.cf
<loadfile> qtreewidget.cf
<loadfile> qtreewidgetitem.cf
<loadfile> qcombobox.cf
<loadfile> qmenubar.cf
<loadfile> qmenu.cf
<loadfile> qtoolbar.cf
<loadfile> qmainwindow.cf
<loadfile> qstatusbar.cf
<loadfile> qdockwidget.cf
<loadfile> qtabwidget.cf
<loadfile> qtablewidgetitem.cf
<loadfile> qframe.cf
<loadfile> qframe2.cf
<loadfile> qframe3.cf
<loadfile> qabstractscrollarea.cf
<loadfile> qabstractitemview.cf
<loadfile> qtableview.cf
<loadfile> qtablewidget.cf
<loadfile> qprogressbar.cf
<loadfile> qspinbox.cf
<loadfile> qabstractslider.cf
<loadfile> qslider.cf
<loadfile> qdateedit.cf
<loadfile> qdatetimeedit.cf
<loadfile> qabstractspinbox.cf
<loadfile> qdial.cf

<filter> (sysget("RINGQT_ANDROID") = "" and sysget("RINGQT_NOWEBKIT") = "")
<loadfile> qwebview.cf
</filter>

<loadfile> qurl.cf
<loadfile> qcheckbox.cf
<loadfile> qabstractbutton.cf
<loadfile> qradiobutton.cf
<loadfile> qbuttongroup.cf
<loadfile> qmediaplayer.cf
<loadfile> qmediaplaylist.cf
<loadfile> qvideowidget.cf
<loadfile> qaction.cf
<loadfile> qevent.cf
<loadfile> qmessagebox.cf
<loadfile> qtimer.cf
<loadfile> qfiledialog.cf
<loadfile> qpainter.cf
<loadfile> qpainter2.cf
<loadfile> qpicture.cf
<loadfile> qpen.cf
<loadfile> qcolor.cf
<loadfile> qprinter.cf
<loadfile> qfont.cf
<loadfile> qbrush.cf
<loadfile> qbytearray.cf
<loadfile> qiodevice.cf
<loadfile> qabstractsocket.cf
<loadfile> qnetworkproxy.cf
<loadfile> qtcpsocket.cf
<loadfile> qtcpserver.cf
<loadfile> qhostaddress.cf
<loadfile> qhostinfo.cf
<loadfile> qfileinfo.cf
<loadfile> qdirmodel.cf
<loadfile> qfontdialog.cf
<loadfile> qdialog.cf
<loadfile> qtextcursor.cf
<loadfile> qcolordialog.cf
<loadfile> qstringlist.cf
<loadfile> qkeysequence.cf
<loadfile> qlcdnumber.cf
<loadfile> qinputdialog.cf
<loadfile> qallevents.cf
<loadfile> qdesktopwidget.cf
<loadfile> qrect.cf
<loadfile> qtextdocument.cf
<loadfile> qtextblock.cf
<loadfile> qtime.cf
<loadfile> qlistwidgetitem.cf
<loadfile> qsystemtrayicon.cf
<loadfile> qdate.cf
<loadfile> qtextcodec.cf
<loadfile> qsqldatabase.cf
<loadfile> qsqldriver.cf
<loadfile> qsqlquery.cf
<loadfile> qsqlerror.cf
<loadfile> qsqlindex.cf
<loadfile> qsqlrecord.cf
<loadfile> qsqlfield.cf
<loadfile> qsqldrivercreatorbase.cf
<loadfile> qvariant.cf
<loadfile> qnetworkrequest.cf
<loadfile> qnetworkaccessmanager.cf
<loadfile> qnetworkreply.cf
<loadfile> qpainterpath.cf
<loadfile> qimage.cf
<loadfile> ringcodehighlighter.cf
<loadfile> qxmlstreamreader.cf
<loadfile> qxmlstreamwriter.cf
<loadfile> qxmlstreamnotationdeclaration.cf
<loadfile> qxmlstreamnamespacedeclaration.cf
<loadfile> qxmlstreamentitydeclaration.cf
<loadfile> qxmlstreamentityresolver.cf
<loadfile> qxmlstreamattributes.cf
<loadfile> qxmlstreamattribute.cf
<loadfile> qthread.cf
<loadfile> qthreadpool.cf
<loadfile> qregularexpression.cf
<loadfile> qregularexpressionmatch.cf
<loadfile> qregularexpressionmatchiterator.cf
<loadfile> qjsonarray.cf
<loadfile> qjsondocument.cf
<loadfile> qjsonobject.cf
<loadfile> qjsonparseerror.cf
<loadfile> qjsonvalue.cf
<loadfile> qplaintextedit.cf
<loadfile> codeeditor.cf
<loadfile> qgridlayout.cf
<loadfile> qtextcharformat.cf
<loadfile> qcameraviewfinder.cf
<loadfile> qgraphicsvideoitem.cf
<loadfile> qvideowidgetcontrol.cf
<loadfile> qcamera.cf
<loadfile> qcameraimagecapture.cf
<loadfile> qmediaobject.cf
<loadfile> qheaderview.cf
<loadfile> qfontmetrics.cf
<loadfile> qsplashscreen.cf
<loadfile> qboxlayout.cf
<loadfile> qlayout.cf
<loadfile> qlineargradient.cf
<loadfile> qgradient.cf
<loadfile> qpointf.cf
<loadfile> qpoint.cf

<comment>

//<class>
name: QModelIndex
para: void
//</class>

QModelIndex child(int row, int column)
int column(void)
QVariant data(int role )
Qt::ItemFlags flags(void)
qint64 internalId(void)
void *internalPointer(void)
bool isValid(void)
QAbstractItemModel *model(void)
QModelIndex parent(void)
int row(void)
QModelIndex sibling(int row, int column)

</comment>

<loadfile> qscrollarea.cf
<loadfile> qsplitter.cf
<loadfile> qcompleter.cf
<loadfile> qcompleter2.cf
<loadfile> qcompleter3.cf
<loadfile> qstring2.cf
<loadfile> qprocess.cf
<loadfile> qmdiarea.cf
<loadfile> qmdisubwindow.cf
<loadfile> qcursor.cf
<loadfile> qlistview.cf


<filter> (iswindows() and sysget("RINGQT_ANDROID") = "")
<loadfile> qaxobject.cf
<loadfile> qaxbase.cf
</filter>

<loadfile> quuid.cf
<loadfile> qtoolbutton.cf

<filter> (sysget("RINGQT_ANDROID") = "")
<loadfile> qserialport.cf
<loadfile> qserialportinfo.cf
</filter>

<loadfile> qstringref.cf
<loadfile> qmutex.cf
<loadfile> qmutexlocker.cf

<loadfile> qbuffer.cf
<loadfile> qbluetoothaddress.cf
<loadfile> qbluetoothdevicediscoveryagent.cf
<loadfile> qbluetoothdeviceinfo.cf
<loadfile> qbluetoothhostinfo.cf
<loadfile> qbluetoothlocaldevice.cf
<loadfile> qbluetoothserver.cf
<loadfile> qbluetoothservicediscoveryagent.cf
<loadfile> qbluetoothserviceinfo.cf
<loadfile> qbluetoothsocket.cf
<loadfile> qbluetoothtransfermanager.cf
<loadfile> qbluetoothtransferreply.cf
<loadfile> qbluetoothtransferrequest.cf
<loadfile> qbluetoothuuid.cf

<loadfile> qdatetime.cf
<loadfile> qscreen.cf
<loadfile> qwindow.cf
<loadfile> qguiapplication.cf
<loadfile> qcoreapplication.cf
<loadfile> qtextbrowser.cf
<loadfile> qregion.cf
<loadfile> qstackedwidget.cf
<loadfile> qcalenderwidget.cf


<filter> ((iswindows() or ismacosx()) and sysget("RINGQT_ANDROID") = "")

<loadfile> qopenglfunctions.cf
<loadfile> qopenglcontext.cf
<loadfile> qopenglfunctions_3_2_core.cf
<loadfile> qsurfaceformat.cf
<loadfile> qopenglwidget.cf
<loadfile> qopenglversionprofile.cf

</filter>

<loadfile> qvector2d.cf
<loadfile> qvector3d.cf
<loadfile> qvector4d.cf
<loadfile> qquaternion.cf
<loadfile> qmatrix4x4.cf

<filter> (iswindows() and sysget("RINGQT_ANDROID") = "")

<loadfile> qopenglpaintdevice.cf
<loadfile> qpaintdevice.cf
<loadfile> qopengltimerquery.cf
<loadfile> qopengldebuglogger.cf
<loadfile> qopenglframebufferobject.cf
<loadfile> qopenglvertexarrayobject.cf
<loadfile> qopenglbuffer.cf
<loadfile> qopenglshaderprogram.cf
<loadfile> qopenglshader.cf
<loadfile> qopengltexture.cf

</filter>

<loadfile> qtabbar.cf

<class>
name: QFile
para: void
parent: QFileDevice
</class>

bool copy(QString newName)
bool exists(void)
bool link(QString linkName)
bool open(FILE *fh, QIODevice::OpenMode mode, QFile::FileHandleFlags handleFlags)
bool open@2(int fd, QIODevice::OpenMode mode, QFile::FileHandleFlags handleFlags)
bool remove(void)
bool rename(QString newName)
void setFileName(QString name)
QString symLinkTarget(void)
bool copy@2(QString fileName, QString newName)
QString decodeName(QByteArray localFileName)
QString decodeName@2(char *localFileName)
QByteArray encodeName(QString fileName)
bool exists@2(QString fileName)
bool link@2(QString fileName, QString linkName)
QFile::Permissions permissions(QString fileName)
bool remove@2(QString fileName)
bool rename@2(QString oldName, QString newName)
bool resize(QString fileName, qint64 sz)
bool setPermissions(QString fileName, QFile::Permissions permissions)
QString symLinkTarget@2(QString fileName)

<class>
name: QFileDevice
parent: QIODevice
nonew
</class>

QFileDevice::FileError error(void)
bool flush(void)
int handle(void)
uchar * map(qint64 offset, qint64 size, QFileDevice::MemoryMapFlags flags)
QFileDevice::Permissions permissions(void)
bool resize(qint64 sz)
QString fileName(void)
<comment>
QDateTime fileTime(QFileDevice::FileTime time)
bool setFileTime(QDateTime newDate, QFileDevice::FileTime fileTime)
</comment>
bool setPermissions(QFileDevice::Permissions permissions)
bool unmap(uchar *address)
void unsetError(void)

<class>
name: QStandardPaths
para: void
nonew
staticmethods
</class>

QString displayName(QStandardPaths::StandardLocation type)
QString findExecutable(QString executableName, QStringList paths))
QString locate(QStandardPaths::StandardLocation type, QString fileName, QStandardPaths::LocateOptions options)
QStringList locateAll(QStandardPaths::StandardLocation type, QString fileName, QStandardPaths::LocateOptions options)
void setTestModeEnabled(bool testMode)
QStringList standardLocations(QStandardPaths::StandardLocation type)
QString writableLocation(QStandardPaths::StandardLocation type)

<filter> (iswindows() or ismacosx()) 

<class>
name: QQuickWidget
para: QWidget *
parent: QWidget
codename: GQuickWidget
passvmpointer
</class>

QQmlEngine *engine(void)
QList<QQmlError> errors(void)
QSurfaceFormat format(void)
QImage grabFramebuffer(void)
QSize initialSize(void)
QQuickWindow *quickWindow(void)
QQuickWidget::ResizeMode resizeMode(void)
QQmlContext *rootContext(void)
QQuickItem *rootObject(void)
void setClearColor(QColor color)
void setFormat(QSurfaceFormat format)
void setResizeMode(QQuickWidget::ResizeMode)
QUrl source(void)
QQuickWidget::Status status(void)
void setSource(QUrl url)

void setsceneGraphErrorEvent(const char *)
void setstatusChangedEvent(const char *)

const char *getsceneGraphErrorEvent(void)
const char *getstatusChangedEvent(void)

<class>
name: QQmlError
para: void
</class>


int column(void)
QString description(void)
bool isValid(void)
int line(void)
QObject * object(void)
void setColumn(int column)
void setDescription(QString description)
void setLine(int line)
void setObject(QObject *object)
void setUrl(QUrl url)
QString toString(void)
QUrl url(void)

</filter>


<filter> (sysget("RINGQT_ANDROID") = "" and sysget("RINGQT_NOWEBKIT") = "1")
<class>
name: QWebEngineView
para: QWidget *parent
parent: QWidget
codename: GWebEngineView
passvmpointer
</class>

bool hasSelection(void)
QWebEngineHistory *history(void)
void load(QUrl) # In RingQt use : void loadpage(QUrl) 
QWebEnginePage *page(void)
QAction *pageAction(QWebEnginePage::WebAction action)
QString selectedText(void)
void setContent(QByteArray,QString,QUrl)
void setHtml(QString,QUrl)
void setPage(QWebEnginePage *page)
void setUrl(QUrl)
void setZoomFactor(qreal factor)
QWebSettings *settings(void)
QString title(void)
void triggerPageAction(QWebEnginePage::WebAction action, bool checked)
QUrl url(void)
qreal zoomFactor(void)
void back(void)
void forward(void)
void reload(void)
void stop(void)

void setloadFinishedEvent(const char *)
void setloadProgressEvent(const char *)
void setloadStartedEvent(const char *)
void setselectionChangedEvent(const char *)
void settitleChangedEvent(const char *)
void seturlChangedEvent(const char *)

const char *getloadFinishedEvent(void)
const char *getloadProgressEvent(void)
const char *getloadStartedEvent(void)
const char *getselectionChangedEvent(void)
const char *gettitleChangedEvent(void)
const char *geturlChangedEvent(void)


</filter>

<class>
name: QScrollBar
para: QWidget *parent
parent: QAbstractSlider
</class>

<class>
name: QDrag
para: QObject *
parent: QObject
codename: GDrag
passvmpointer
</class>


Qt::DropAction defaultAction(void)
QPixmap dragCursor(Qt::DropAction action)
Qt::DropAction exec(Qt::DropActions supportedActions)
Qt::DropAction exec@2(Qt::DropActions supportedActions, Qt::DropAction defaultDropAction)
QPoint hotSpot(void)
QMimeData *mimeData(void)
QPixmap pixmap(void)
void setDragCursor(QPixmap cursor, Qt::DropAction action)
void setHotSpot(QPoint hotspot)
void setMimeData(QMimeData * data)
void setPixmap(QPixmap pixmap)
QObject * source(void)
Qt::DropActions supportedActions(void)
QObject * target(void)

void setactionChangedEvent(const char *)
void settargetChangedEvent(const char *)

const char *getactionChangedEvent(void)
const char *gettargetChangedEvent(void)

<class>
name: QMimeData
para: void
parent: QObject
</class>

void clear(void)
QVariant colorData(void)
QByteArray data(QString mimeType)
QStringList formats(void)
bool hasColor(void)
bool hasFormat(QString mimeType)
bool hasHtml(void)
bool hasImage(void)
bool hasText(void)
bool hasUrls(void)
QString html(void)
QVariant imageData(void)
void removeFormat(QString mimeType)
void setColorData(QVariant color)
void setData(QString mimeType, QByteArray data)
void setHtml(QString html)
void setImageData(QVariant image)
void setText(QString text)
void setUrls(QList<QUrl> urls)
QString text(void)
QList<QUrl> urls(void)

<class>
name: QDropEvent
para: QPointF,Qt::DropActions,const QMimeData *,Qt::MouseButtons,Qt::KeyboardModifiers,QEvent::Type
parent: QEvent
</class>

void acceptProposedAction(void)
Qt::DropAction dropAction(void)
Qt::KeyboardModifiers keyboardModifiers(void)
QMimeData * mimeData(void)
Qt::MouseButtons mouseButtons(void)
QPoint pos(void)
QPointF posF(void)
Qt::DropActions possibleActions(void)
Qt::DropAction proposedAction(void)
void setDropAction(Qt::DropAction action)
QObject * source(void)

<class>
name: QDragMoveEvent
para: QPoint,Qt::DropActions,const QMimeData *,Qt::MouseButtons,Qt::KeyboardModifiers,QEvent::Type
parent: QDropEvent
</class>


void accept(QRect rectangle)
void accept@2(void)
QRect answerRect(void)
void ignore(QRect rectangle)
void ignore@2(void)

<class>
name: QDragEnterEvent
para: QPoint,Qt::DropActions,const QMimeData *,Qt::MouseButtons,Qt::KeyboardModifiers
parent: QDragMoveEvent
</class>


<class>
name: QDragLeaveEvent
para: void
parent: QEvent
</class>


<class>
name: QClipboard
nonew
</class>

void clear(QClipboard::Mode mode)
QImage image(QClipboard::Mode mode)
QMimeData * mimeData(QClipboard::Mode mode)
bool ownsClipboard(void)
bool ownsFindBuffer(void)
bool ownsSelection(void)
QPixmap pixmap(QClipboard::Mode mode)
void setImage(QImage image, QClipboard::Mode mode)
void setMimeData(QMimeData * src, QClipboard::Mode mode)
void setPixmap(QPixmap pixmap, QClipboard::Mode mode)
void setText(QString text, QClipboard::Mode mode)
bool supportsFindBuffer(void)
bool supportsSelection(void)
QString text(QClipboard::Mode mode)

<class>
name: QChar
para: int
</class>

QChar::Category category(void)
uchar cell(void)
unsigned char combiningClass(void)
QString decomposition(void)
QChar::Decomposition decompositionTag(void)
int digitValue(void)
QChar::Direction direction(void)
bool hasMirrored(void)
bool isDigit(void)
bool isHighSurrogate(void)
bool isLetter(void)
bool isLetterOrNumber(void)
bool isLowSurrogate(void)
bool isLower(void)
bool isMark(void)
bool isNonCharacter(void)
bool isNull(void)
bool isNumber(void)
bool isPrint(void)
bool isPunct(void)
bool isSpace(void)
bool isSurrogate(void)
bool isSymbol(void)
bool isTitleCase(void)
bool isUpper(void)
QChar mirroredChar(void)
uchar row(void)
QChar::Script script(void)
QChar toCaseFolded(void)
char toLatin1(void)
QChar toLower(void)
QChar toTitleCase(void)
QChar toUpper(void)
ushort unicode(void)
ushort unicode@2(void)
QChar::UnicodeVersion unicodeVersion(void)
QChar::Category category@2(uint ucs4)
unsigned char combiningClass@2(uint ucs4)
QChar::UnicodeVersion currentUnicodeVersion(void)
QString decomposition@2(uint ucs4)
QChar::Decomposition decompositionTag@2(uint ucs4)
int digitValue@2(uint ucs4)
QChar::Direction direction@2(uint ucs4)
QChar fromLatin1(char c)
bool hasMirrored@2(uint ucs4)
ushort highSurrogate(uint ucs4)
bool isDigit@2(uint ucs4)
bool isHighSurrogate@2(uint ucs4)
bool isLetter@2(uint ucs4)
bool isLetterOrNumber@2(uint ucs4)
bool isLowSurrogate@2(uint ucs4)
bool isLower@2(uint ucs4)
bool isMark@2(uint ucs4)
bool isNonCharacter@2(uint ucs4)
bool isNumber@2(uint ucs4)
bool isPrint@2(uint ucs4)
bool isPunct@2(uint ucs4)
bool isSpace@2(uint ucs4)
bool isSurrogate@2(uint ucs4)
bool isSymbol@2(uint ucs4)
bool isTitleCase@2(uint ucs4)
bool isUpper@2(uint ucs4)
ushort lowSurrogate(uint ucs4)
uint mirroredChar@2(uint ucs4)
bool requiresSurrogates(uint ucs4)
QChar::Script script@2(uint ucs4)
uint surrogateToUcs4(ushort high, ushort low)
uint surrogateToUcs4@2(QChar high, QChar low)
uint toCaseFolded@2(uint ucs4)
uint toLower@2(uint ucs4)
uint toTitleCase@2(uint ucs4)
uint toUpper@2(uint ucs4)
QChar::UnicodeVersion unicodeVersion@2(uint ucs4)

<class>
name: QChildEvent
para: QEvent::Type,QObject *
parent: QEvent
</class>

bool added(void)
QObject *child(void)
bool polished(void)
bool removed(void)


<class>
name: QGeoPositionInfo
para: void
</class>

qreal attribute(QGeoPositionInfo::Attribute attribute)
QGeoCoordinate coordinate(void)
bool hasAttribute(QGeoPositionInfo::Attribute attribute)
bool isValid(void)
void removeAttribute(QGeoPositionInfo::Attribute attribute)
void setAttribute(QGeoPositionInfo::Attribute attribute, qreal value)
void setCoordinate(QGeoCoordinate coordinate)
void setTimestamp(QDateTime timestamp)
QDateTime timestamp(void)

<class>
name: QGeoCoordinate
para: void
</class>

double altitude(void)
QGeoCoordinate atDistanceAndAzimuth(qreal distance, qreal azimuth, qreal distanceUp)
qreal azimuthTo(QGeoCoordinate other)
qreal distanceTo(QGeoCoordinate other)
bool isValid(void)
double latitude(void)
double longitude(void)
void setAltitude(double altitude)
void setLatitude(double latitude)
void setLongitude(double longitude)
QString toString(QGeoCoordinate::CoordinateFormat format)
QGeoCoordinate::CoordinateType type(void)

<class>
name: QGeoAddress
para: void
</class>

QString city(void)
void clear(void)
QString country(void)
QString countryCode(void)
QString county(void)
QString district(void)
bool isEmpty(void)
bool isTextGenerated(void)
QString postalCode(void)
void setCity(QString city)
void setCountry(QString country)
void setCountryCode(QString countryCode)
void setCounty(QString county)
void setDistrict(QString district)
void setPostalCode(QString postalCode)
void setState(QString state)
void setStreet(QString street)
void setText(QString text)
QString state(void)
QString street(void)
QString text(void)

<class>
name: QGeoAreaMonitorInfo
para: QString
</class>

QGeoShape area(void)
QDateTime expiration(void)
QString identifier(void)
bool isPersistent(void)
bool isValid(void)
QString name(void)
QVariantMap notificationParameters(void)
void setArea(QGeoShape newShape)
void setExpiration(QDateTime expiry)
void setName(QString name)
void setNotificationParameters(QVariantMap parameters)
void setPersistent(bool isPersistent)

<class>
name: QGeoAreaMonitorSource
para: QObject *
parent: QObject
nonew
</class>

QString sourceName(void)
QStringList availableSources(void)
QGeoAreaMonitorSource * createDefaultSource(QObject * parent)
QGeoAreaMonitorSource * createSource(QString sourceName, QObject * parent)

<class>
name: QGeoCircle
para: void
</class>

QGeoCoordinate center(void)
qreal radius(void)
void setCenter(QGeoCoordinate center)
void setRadius(qreal radius)
void translate(double degreesLatitude, double degreesLongitude)
QGeoCircle translated(double degreesLatitude, double degreesLongitude)

<class>
name: QGeoPositionInfoSource
parent: QObject
codename: GGeoPositionInfoSource 
passvmpointer
abstract
</class>

QGeoPositionInfoSource::PositioningMethods preferredPositioningMethods(void)
QString sourceName(void)
int updateInterval(void)

void seterrorEvent(const char *)
void setpositionUpdatedEvent(const char *)
void setupdateTimeoutEvent(const char *)

const char *geterrorEvent(void)
const char *getpositionUpdatedEvent(void)
const char *getupdateTimeoutEvent(void)

<register>
QStringList availableSources(void)
QGeoPositionInfoSource *createDefaultSource(QObject *parent)
QGeoPositionInfoSource *createSource(QString sourceName, QObject *parent)
</register>

<code>
RING_FUNC(ring_QGeoPositionInfoSource_availableSources)
{
	if ( RING_API_PARACOUNT != 0 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	RING_API_IGNORECPOINTERTYPE ;
	{
		QStringList *pValue ; 
		pValue = new QStringList() ;
		*pValue = QGeoPositionInfoSource::availableSources();
		RING_API_RETMANAGEDCPOINTER(pValue,"QStringList",ring_QStringList_freefunc);
	}
}


RING_FUNC(ring_QGeoPositionInfoSource_createDefaultSource)
{
	if ( RING_API_PARACOUNT != 1 ) {
		RING_API_ERROR(RING_API_MISS1PARA);
		return ;
	}
	RING_API_IGNORECPOINTERTYPE ;
	if ( ! RING_API_ISPOINTER(1) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	RING_API_RETCPOINTER(QGeoPositionInfoSource::createDefaultSource((QObject *) RING_API_GETCPOINTER(1,"QObject")),"QGeoPositionInfoSource");
}


RING_FUNC(ring_QGeoPositionInfoSource_createSource)
{
	if ( RING_API_PARACOUNT != 2 ) {
		RING_API_ERROR(RING_API_MISS2PARA);
		return ;
	}
	RING_API_IGNORECPOINTERTYPE ;
	if ( ! RING_API_ISSTRING(1) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	if ( ! RING_API_ISPOINTER(2) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	RING_API_RETCPOINTER(QGeoPositionInfoSource::createSource(RING_API_GETSTRING(1),(QObject *) RING_API_GETCPOINTER(2,"QObject")),"QGeoPositionInfoSource");
}



</code>

<class>
name: QGeoRectangle
para: void
parent: QGeoShape
</class>

QGeoCoordinate bottomLeft(void)
QGeoCoordinate bottomRight(void)
QGeoCoordinate center(void)
bool contains(QGeoRectangle rectangle)
double height(void)
bool intersects(QGeoRectangle rectangle)
void setBottomLeft(QGeoCoordinate bottomLeft)
void setBottomRight(QGeoCoordinate bottomRight)
void setCenter(QGeoCoordinate center)
void setHeight(double degreesHeight)
void setTopLeft(QGeoCoordinate topLeft)
void setTopRight(QGeoCoordinate topRight)
void setWidth(double degreesWidth)
QGeoCoordinate topLeft(void)
QGeoCoordinate topRight(void)
void translate(double degreesLatitude, double degreesLongitude)
QGeoRectangle translated(double degreesLatitude, double degreesLongitude)
QGeoRectangle united(QGeoRectangle rectangle)
double width(void)

<class>
name: QGeoShape
para: void
</class>

bool contains(QGeoCoordinate coordinate)
bool isEmpty(void)
bool isValid(void)
QGeoShape::ShapeType type(void)

<class>
name: QGeoSatelliteInfo
para: void
</class>

qreal attribute(QGeoSatelliteInfo::Attribute attribute)
bool hasAttribute(QGeoSatelliteInfo::Attribute attribute)
void removeAttribute(QGeoSatelliteInfo::Attribute attribute)
int satelliteIdentifier(void)
QGeoSatelliteInfo::SatelliteSystem satelliteSystem(void)
void setAttribute(QGeoSatelliteInfo::Attribute attribute, qreal value)
void setSatelliteIdentifier(int satId)
void setSatelliteSystem(QGeoSatelliteInfo::SatelliteSystem system)
void setSignalStrength(int signalStrength)
int signalStrength(void)

<class>
name: QGeoSatelliteInfoSource
nonew
</class>

QString sourceName(void)
int updateInterval(void)

<class>
name: QNmeaPositionInfoSource
para: QNmeaPositionInfoSource::UpdateMode,QObject *
parent: QGeoPositionInfoSource
</class>

QIODevice * device(void)
void setDevice(QIODevice * device)
QNmeaPositionInfoSource::UpdateMode updateMode(void)
