<nodllstartup>

<libinitfunc> ring_qt_start

<ignorecpointertype>

<code>
/* Copyright (c) 2013-2018 Mahmoud Fayed <msfclipper@yahoo.com> */

extern "C" {
	#include "ring.h"
}

#include "gpushbutton.h"
#include "gaction.h"
#include "glineedit.h"
#include "gtextedit.h"
#include "glistwidget.h"
#include "gtreeview.h"
#include "gtreewidget.h"
#include "gcombobox.h"
#include "gtabwidget.h"
#include "gtablewidget.h"
#include "gprogressbar.h"
#include "gspinbox.h"
#include "gslider.h"
#include "gdial.h"
#include "gnetworkaccessmanager.h"
#include "gcheckbox.h"
#include "gradiobutton.h"
#include "gbuttongroup.h"
#include "gvideowidget.h"
#include "gtimer.h"
#include "gtcpserver.h"
#include "giodevice.h"
#include "gabstractsocket.h"
#include "gtcpsocket.h"
#include "gcolordialog.h"
#include "gallevents.h"
#include "gthread.h"
#include "gplaintextedit.h"
#include "gheaderview.h"
#include "gprocess.h"
#include "codeeditor.h"
#include "highlighter.h"
#include "gtoolbutton.h"
#include "gbluetoothdevicediscoveryagent.h"
#include "gbluetoothlocaldevice.h"
#include "gbluetoothserver.h"
#include "gbluetoothservicediscoveryagent.h"
#include "gbluetoothsocket.h"
#include "gbluetoothtransfermanager.h"
#include "gbluetoothtransferreply.h"
#include "gwindow.h"
#include "gguiapplication.h"
#include "gtextbrowser.h"
#include "gdockwidget.h"
#include "gstackedwidget.h"
#include "gcalendarwidget.h"
<filter> ((iswindows() or ismacosx()) and sysget("RINGQT_ANDROID") = "")
#include "openglwidget.h"
</filter>

#include <QApplication>
#include <QObject>
#include <QWidget>
#include <QLabel>
#include <QPixmap>
#include <QIcon>
#include <QSize>
#include <QPushButton>
#include <QMainWindow>
#include <QVBoxLayout>
#include <QHBoxLayout>
#include <QLineEdit>
#include <QTextEdit>
#include <QListWidget>
#include <QTreeView>
#include <QDir>
#include <QFileSystemModel>
#include <QTreeWidget>
#include <QTreeWidgetItem>
#include <QComboBox>
#include <QVariant>
#include <QMenuBar>
#include <QMenu>
#include <QToolBar>
#include <QMainWindow>
#include <QStatusBar>
#include <QDockWidget>
#include <QTabWidget>
#include <QTableWidget>
#include <QTableWidgetItem>
#include <QSizePolicy>
#include <QFrame>
#include <QAbstractScrollArea>
#include <QAbstractItemView>
#include <QProgressBar>
#include <QSpinBox>
#include <QSlider>
#include <QAbstractSlider>
#include <QDateEdit>
#include <QDateTimeEdit>
#include <QAbstractSpinBox>
#include <QDial>
#include <QUrl>
#include <QCheckBox>
#include <QRadioButton>
#include <QButtonGroup>
#include <QMediaPlayer>
#include <QMediaPlaylist>
#include <QVideoWidget>
#include <QPrinter>
#include <QAction>
#include <QEvent>
#include <QMessageBox>
#include <QTimer>
#include <QFileDialog>
#include <QPainter>
#include <QPicture>
#include <QPen>
#include <QColor>
#include <QPrinter>
#include <QFont>
#include <QBrush>
#include <QByteArray>
#include <QIODevice>
#include <QAbstractSocket>
#include <QTcpSocket>
#include <QTcpServer>
#include <QNetworkProxy>
#include <QHostAddress>
#include <QHostInfo>
#include <QList>
#include <QFileInfo>
#include <QDirModel>
#include <QModelIndex>
#include <QFontDialog>
#include <QDialog>
#include <QTextCursor>
#include <QTextBlock>
#include <QTextDocumentFragment>
#include <QColorDialog>
#include <QHeaderView>
#include <QStringList>
#include <QKeySequence>
#include <QLCDNumber>
#include <QInputDialog>
#include <QDesktopWidget>
#include <QRect>
#include <QTextDocument>
#include <QTime>
#include <QTest>
#include <QListWidgetItem>
#include <QSystemTrayIcon>
#include <QDate>
#include <QTextCodec>
#include <QtSql>
#include <QSqlDatabase>
#include <QSqlDriver>
#include <QSqlQuery>
#include <QSqlError>
#include <QSqlIndex>
#include <QSqlRecord>
#include <QSqlField>
#include <QSqlDriverCreatorBase>
#include <QNetworkRequest>
#include <QNetworkAccessManager>
#include <QNetworkReply>
#include <QPainterPath>
#include <QImage>
#include <QBitmap>
#include <QMediaContent>
#include <QTableView>
#include <QXmlStreamReader>
#include <QXmlStreamWriter>
#include <QXmlStreamNotationDeclaration>
#include <QXmlStreamNamespaceDeclaration>
#include <QXmlStreamEntityResolver>
#include <QXmlStreamEntityDeclaration>
#include <QXmlStreamAttributes>
#include <QXmlStreamAttribute>
#include <QThread>
#include <QThreadPool>
#include <QRegularExpression>
#include <QRegularExpressionMatch>
#include <QRegularExpressionMatchIterator>
#include <QJsonValue>
#include <QJsonParseError>
#include <QJsonObject>
#include <QJsonDocument>
#include <QJsonArray>
#include <iterator>
#include <QPlainTextEdit>
#include <QGridLayout>
#include <QTextCharFormat>
#include <QCameraViewfinder>
#include <QGraphicsVideoItem>
#include <QVideoWidgetControl>
#include <QCamera>
#include <QCameraImageCapture>
#include <QFontMetrics>
#include <QList>
#include <QSplashScreen>
#include <QBoxLayout>
#include <QLayout>
#include <QLinearGradient>
#include <QGradient>
#include <QPointF>
#include <QPoint>
#include <QStyleFactory>
#include <QScrollArea>
#include <QSplitter>
#include <QCompleter>
#include <QString>
#include <QProcess>
#include <QMdiArea>
#include <QMdiSubWindow>
#include <QCursor>
#include <QListView>
#include <QUuid>
#include <QDesktopServices>
#include <QToolButton>
#include <QStringRef>
#include <QMutex>
#include <QMutexLocker>
#include <QBuffer>
#include <QBluetoothAddress>
#include <QBluetoothDeviceDiscoveryAgent>
#include <QBluetoothDeviceInfo>
#include <QBluetoothUuid>
#include <QBluetoothHostInfo>
#include <QBluetoothLocalDevice>
#include <QBluetoothServer>
#include <QBluetoothServiceDiscoveryAgent>
#include <QBluetoothServiceInfo>
#include <QBluetoothSocket>
#include <QBluetoothTransferManager>
#include <QBluetoothTransferReply>
#include <QBluetoothTransferRequest>
#include <QBluetoothUuid>
#include <QDateTime>
#include <QScreen>
#include <QWindow>
#include <QGuiApplication>
#include <QTextBrowser>
#include <QRegion>
#include <QStackedWidget>
#include <QCalendarWidget>
#include <QVector2D>
#include <QVector3D>
#include <QVector4D>
#include <QQuaternion>
#include <QMatrix4x4>

#include <QTabBar>
#include "gtabbar.h"
#include <QFile>
#include <QFileDevice>
#include <QStandardPaths>

#include <QDrag>
#include "gdrag.h"
#include <QMimeData>
#include <QDropEvent>
#include <QDragMoveEvent>
#include <QDragEnterEvent>
#include <QDragLeaveEvent>
#include <QClipboard>
#include <QChar>
#include <QChildEvent>

#include <QGeoPositionInfo>
#include <QGeoCoordinate>
#include <QGeoAddress>
#include <QGeoAreaMonitorInfo>
#include <QGeoAreaMonitorSource>
#include <QGeoCircle>
#include <QGeoPositionInfoSource>
#include "ggeopositioninfosource.h"
#include <QGeoRectangle>
#include <QGeoShape>
#include <QGeoSatelliteInfo>
#include <QGeoSatelliteInfoSource>
#include <QNmeaPositionInfoSource>

<filter> (iswindows() or ismacosx())
#include <QQuickWidget>
#include <QQmlError>
#include "gquickwidget.h"
</filter>

<filter> ((iswindows() or ismacosx()) and sysget("RINGQT_ANDROID") = "")

#include <QOpenGLFunctions>
#include <QOpenGLContext>
#include <QSurfaceFormat>
#include <QOpenGLFunctions_3_2_Core>
#include <QOpenGLVersionProfile>
#include <QOpenGLPaintDevice>
#include <QPaintDevice>
#include <QOpenGLTimerQuery>
#include <QOpenGLDebugLogger>
#include <QOpenGLFramebufferObject>
#include <QOpenGLVertexArrayObject>
#include <QOpenGLBuffer>
#include <QOpenGLShaderProgram>
#include <QOpenGLShader>
#include <QOpenGLTexture>
</filter>

<filter> (sysget("RINGQT_ANDROID") = "")

#include "gserialport.h"
#include <QSerialPort>
#include <QSerialPortInfo>

</filter>

<filter> (sysget("RINGQT_ANDROID") = "" and sysget("RINGQT_NOWEBKIT") = "")
#include "gwebview.h"
#include <QWebSettings>
#include <QWebView>
</filter>

<filter> (sysget("RINGQT_ANDROID") = "" and sysget("RINGQT_NOWEBKIT") = "1")
#include "gwebengineview.h"
#include <QWebEngineSettings>
#include <QWebEngineView>
#include <QWebEnginePage>
#include <QWebEngineHistory>
</filter>


<filter> (iswindows() and sysget("RINGQT_ANDROID") = "")

#include <QAxObject>
#include <QAxBase>

</filter>

extern "C" {

	RING_API void ring_qt_start(RingState *pRingState);

	RING_API void ringlib_init(RingState *pRingState)
	{

		new QApplication(pRingState->argc,pRingState->argv);
 	   	ring_qt_start(pRingState) ;
	}

}
</code>


<runcode>

aStringTypes + "QString"

aBeforeReturn + ["QString",".toStdString().c_str()"]

aNewMethodName + ["QWebView","load","loadpage"]
aNewMethodName + ["QMediaPlaylist","load","loadfile"]
aNewMethodName + ["QMediaPlaylist","next","movenext"]
aNewMethodName + ["QPainter","end","endpaint"]
aNewMethodName + ["QPicture","load","loadfile"]
aNewMethodName + ["QLineEdit","end","endtext"]
aNewMethodName + ["QDialog","done","donedialog"]
aNewMethodName + ["QTextDocument","end","enddoc"]
aNewMethodName + ["QTextBlock","next","nextblock"]
aNewMethodName + ["QSqlQuery","next","movenext"]
aNewMethodName + ["QImage","load","loadimage"]
aNewMethodName + ["QNetworkAccessManager","get","getvalue"]
aNewMethodName + ["QNetworkAccessManager","put","putvalue"]
aNewMethodName + ["QThread","exit","exitfromthread"]
aNewMethodName + ["QRegularExpressionMatchIterator","next","nextitem"]
aNewMethodName + ["QCamera","load","loadcamera"]
aNewMethodName + ["QPixmap","load","loadpixmap"]
aNewMethodName + ["QBluetoothTransferManager","put","putdata"]
aNewMethodName + ["QCoreApplication","exit","exitfromapplication"]
aNewMethodName + ["QOpenGLTimerQuery","end","endtimer"]

aNumberTypes + "qreal"
aNumberTypes + "qint64"
aNumberTypes + "ushort"
aNumberTypes + "ulong"

aEnumTypes + "Qt::GestureType"
aEnumTypes + "Qt::GestureFlag"
aEnumTypes + "Qt::ShortcutContext"
aEnumTypes + "Qt::InputMethodQuery"
aEnumTypes + "Qt::WindowType"
aEnumTypes + "QWidget::RenderFlag"
aEnumTypes + "Qt::WidgetAttribute"
aEnumTypes + "QPalette::ColorRole"
aEnumTypes + "Qt::ContextMenuPolicy"
aEnumTypes + "Qt::FocusReason"
aEnumTypes + "Qt::FocusPolicy"
aEnumTypes + "Qt::InputMethodHint"
aEnumTypes + "Qt::LayoutDirection"
aEnumTypes + "QSizePolicy::Policy"
aEnumTypes + "Qt::WindowType"
aEnumTypes + "Qt::WindowModality"
aEnumTypes + "Qt::WindowState"
aEnumTypes + "Qt::AlignmentFlag"
aEnumTypes + "Qt::Alignment"
aEnumTypes + "Qt::TextFormat"
aEnumTypes + "Qt::TextInteractionFlag"
aEnumTypes + "Qt::AspectRatioMode"
aEnumTypes + "Qt::TransformationMode"
aEnumTypes + "Qt::CursorMoveStyle"
aEnumTypes + "QLineEdit::EchoMode"
aEnumTypes + "QTextDocument::FindFlag"
aEnumTypes + "QTextCursor::MoveOperation"
aEnumTypes + "QTextCursor::MoveMode"
aEnumTypes + "QTextEdit::LineWrapMode"
aEnumTypes + "QTextOption::WrapMode"
aEnumTypes + "QItemSelectionModel::SelectionFlag"
aEnumTypes + "Qt::SortOrder"
aEnumTypes + "QAbstractItemView::ScrollHint"
aEnumTypes + "QDir::Filter"
aEnumTypes + "Qt::DropAction"
aEnumTypes + "Qt::Orientation"
aEnumTypes + "Qt::CheckState"
aEnumTypes + "QTreeWidgetItem::ChildIndicatorPolicy"
aEnumTypes + "Qt::ItemFlag"
aEnumTypes + "Qt::MatchFlag"
aEnumTypes + "Qt::Corner"
aEnumTypes + "Qt::ToolBarArea"
aEnumTypes + "Qt::ToolButtonStyle"
aEnumTypes + "Qt::DockWidgetArea"
aEnumTypes + "QMainWindow::DockOption"
aEnumTypes + "QTabWidget::TabPosition"
aEnumTypes + "QTabWidget::TabShape"
aEnumTypes + "QDockWidget::DockWidgetFeature"
aEnumTypes + "Qt::TextElideMode"
aEnumTypes + "Qt::DockWidgetAreas"
aEnumTypes + "QFrame::Shadow"
aEnumTypes + "QFrame::Shape"
aEnumTypes + "Qt::ScrollBarPolicy"
aEnumTypes + "QAbstractItemView::DragDropMode"
aEnumTypes + "QAbstractItemView::ScrollMode"
aEnumTypes + "QAbstractItemView::EditTrigger"
aEnumTypes + "QAbstractItemView::SelectionBehavior"
aEnumTypes + "QAbstractItemView::SelectionMode"
aEnumTypes + "QProgressBar::Direction"
aEnumTypes + "QAbstractSlider::SliderAction"
aEnumTypes + "QSlider::TickPosition"
aEnumTypes + "QDateTimeEdit::Section"
aEnumTypes + "Qt::TimeSpec"
aEnumTypes + "QAbstractSpinBox::ButtonSymbols"
aEnumTypes + "QAbstractSpinBox::CorrectionMode"
aEnumTypes + "QWebPage::FindFlag"
aEnumTypes + "QWebPage::WebAction"
aEnumTypes + "QWebEnginePage::FindFlag"
aEnumTypes + "QWebEnginePage::WebAction"
aEnumTypes + "QPainter::RenderHint"
aEnumTypes + "QUrl::ComponentFormattingOption"
aEnumTypes + "QUrl::ParsingMode"
aEnumTypes + "QMediaPlaylist::PlaybackMode"
aEnumTypes + "QAction::ActionEvent"
aEnumTypes + "QAction::MenuRole"
aEnumTypes + "QAction::Priority"
aEnumTypes + "QKeySequence::StandardKey"
aEnumTypes + "QMessageBox::ButtonRole"
aEnumTypes + "QMessageBox::StandardButton"
aEnumTypes + "QFileDialog::DialogLabel"
aEnumTypes + "QFileDialog::AcceptMode"
aEnumTypes + "QFileDialog::FileMode"
aEnumTypes + "QFileDialog::Option"
aEnumTypes + "QFileDialog::ViewMode"
aEnumTypes + "Qt::ImageConversionFlag"
aEnumTypes + "Qt::FillRule"
aEnumTypes + "Qt::SizeMode"
aEnumTypes + "Qt::BGMode"
aEnumTypes + "Qt::ClipOperation"
aEnumTypes + "QPainter::CompositionMode"
aEnumTypes + "Qt::PenCapStyle"
aEnumTypes + "Qt::PenJoinStyle"
aEnumTypes + "Qt::PenStyle"
aEnumTypes + "QColor::Spec"
aEnumTypes + "QPrinter::Unit"
aEnumTypes + "QPrinter::ColorMode"
aEnumTypes + "QPrinter::DuplexMode"
aEnumTypes + "QPrinter::OutputFormat"
aEnumTypes + "QPageLayout::Unit"
aEnumTypes + "QPrinter::PageOrder"
aEnumTypes + "QPageLayout::Orientation"
aEnumTypes + "QPrinter::PaperSource"
aEnumTypes + "QPrinter::PrintRange"
aEnumTypes + "QFont::Capitalization"
aEnumTypes + "QFont::HintingPreference"
aEnumTypes + "QFont::SpacingType"
aEnumTypes + "QFont::Style"
aEnumTypes + "QFont::StyleHint"
aEnumTypes + "QFont::StyleStrategy"
aEnumTypes + "QWebSettings::FontFamily"
aEnumTypes + "QWebSettings::FontSize"
aEnumTypes + "QWebSettings::WebAttribute"
aEnumTypes + "QWebSettings::ThirdPartyCookiePolicy"
aEnumTypes + "QWebSettings::WebGraphic"
aEnumTypes + "Qt::BrushStyle"
aEnumTypes + "QAbstractSocket::BindFlag"
aEnumTypes + "QIODevice::OpenModeFlag"
aEnumTypes + "QIODevice::OpenMode"
aEnumTypes + "QAbstractSocket::NetworkLayerProtocol"
aEnumTypes + "QAbstractSocket::PauseMode"
aEnumTypes + "QAbstractSocket::SocketState"
aEnumTypes + "QAbstractSocket::SocketOption"
aEnumTypes + "QNetworkRequest::KnownHeaders"
aEnumTypes + "QNetworkProxy::Capability"
aEnumTypes + "QNetworkProxy::ProxyType"
aEnumTypes + "QHostInfo::HostInfoError"
aEnumTypes + "QFileDevice::Permission"
aEnumTypes + "QDir::SortFlag"
aEnumTypes + "QFontDialog::FontDialogOption"
aEnumTypes + "QTextCursor::SelectionType"
aEnumTypes + "QColorDialog::ColorDialogOption"
aEnumTypes + "QLCDNumber::Mode"
aEnumTypes + "QLCDNumber::SegmentStyle"
aEnumTypes + "QInputDialog::InputMode"
aEnumTypes + "QInputDialog::InputDialogOption"
aEnumTypes + "QTextDocument::Stacks"
aEnumTypes + "QTextDocument::FindFlag"
aEnumTypes + "QTextDocument::MetaInformation"
aEnumTypes + "Qt::InputMethodHints"
aEnumTypes + "Qt::WindowFlags"
aEnumTypes + "QEvent::Type"
aEnumTypes + "QPrinter::PrinterMode"
aEnumTypes + "Qt::ItemFlags"
aEnumTypes + "QSystemTrayIcon::MessageIcon"
aEnumTypes + "Qt::DateFormat"
aEnumTypes + "MonthNameType"
aEnumTypes + "QTextCodec::ConversionFlag"
aEnumTypes + "ConverterState"
aEnumTypes + "QSql::NumericalPrecisionPolicy"
aEnumTypes + "QVariant::Type"
aEnumTypes + "DbmsType"
aEnumTypes + "QSqlQuery::BatchExecutionMode"
aEnumTypes + "RequiredStatus"
aEnumTypes + "QSql::ParamType"
aEnumTypes + "QSqlError::ErrorType"
aEnumTypes + "QSqlField::RequiredStatus"
aEnumTypes + "Qt::CaseSensitivity"
aEnumTypes + "QNetworkRequest::Attribute"
aEnumTypes + "QNetworkRequest::KnownHeaders"
aEnumTypes + "QNetworkRequest::Priority"
aEnumTypes + "QNetworkRequest::KnownHeaders" 
aEnumTypes + "QNetworkRequest::Priority"
aEnumTypes + "QNetworkAccessManager::NetworkAccessibility"
aEnumTypes + "QNetworkReply::NetworkError"
aEnumTypes + "Qt::SizeMode"
aEnumTypes + "Qt::ImageConversionFlags"
aEnumTypes + "Qt::MaskMode"
aEnumTypes + "QImage::Format"
aEnumTypes + "QImage::InvertMode"
aEnumTypes + "Error"
aEnumTypes + "ReadElementTextBehaviour"
aEnumTypes + "TokenType"
aEnumTypes + "QXmlStreamReader::ReadElementTextBehaviour"
aEnumTypes + "QThread::Priority"
aEnumTypes + "QRegularExpression::MatchOption"
aEnumTypes + "QRegularExpression::MatchType"
aEnumTypes + "QRegularExpression::PatternOption"
aEnumTypes + "QRegularExpression::MatchOptions"
aEnumTypes + "QRegularExpression::PatternOptions"
aEnumTypes + "QJsonDocument::DataValidation"
aEnumTypes + "QJsonDocument::JsonFormat"
aEnumTypes + "QPlainTextEdit::LineWrapMode"
aEnumTypes + "QTextCharFormat::FontPropertiesInheritanceBehavior"
aEnumTypes + "QTextCharFormat::UnderlineStyle"
aEnumTypes + "QTextCharFormat::VerticalAlignment"
aEnumTypes + "QCamera::FrameRateRange"
aEnumTypes + "QCamera::CaptureMode"
aEnumTypes + "QCamera::CaptureModes"
aEnumTypes + "QCamera::Error"
aEnumTypes + "QCamera::LockChangeReason"
aEnumTypes + "QCamera::LockQCamera::Status"
aEnumTypes + "QCamera::LockType"
aEnumTypes + "QCamera::LockTypes"
aEnumTypes + "QCamera::Position"
aEnumTypes + "QCamera::State"
aEnumTypes + "QCamera::Status"
aEnumTypes + "QCameraImageCapture::CaptureDestination"
aEnumTypes + "QCameraImageCapture::CaptureDestinations"
aEnumTypes + "QCameraImageCapture::DriveMode"
aEnumTypes + "QCameraImageCapture::Error"
aEnumTypes + "QHeaderView::ResizeMode"
aEnumTypes + "QLayout::SizeConstraint"
aEnumTypes + "QGradient::CoordinateMode"
aEnumTypes + "QGradient::Spread"
aEnumTypes + "QGradient::Type"
aEnumTypes + "Qt::MatchFlags"
aEnumTypes + "QCompleter::CompletionMode"
aEnumTypes + "QCompleter::ModelSorting"
aEnumTypes + "QString::SplitBehavior"
aEnumTypes + "QProcess::ExitStatus"
aEnumTypes + "QProcess::InputChannelMode"
aEnumTypes + "QProcess::ProcessChannel"
aEnumTypes + "QProcess::ProcessChannelMode"
aEnumTypes + "QProcess::ProcessError"
aEnumTypes + "QProcess::ProcessState"
aEnumTypes + "QMdiArea::ViewMode"
aEnumTypes + "QMdiArea::WindowOrder"
aEnumTypes + "QMdiArea::AreaOption"
aEnumTypes + "QMdiSubWindow::SubWindowOption"
aEnumTypes + "Qt::CursorShape"
aEnumTypes + "QListView::LayoutMode"
aEnumTypes + "QListView::Movement"
aEnumTypes + "QListView::ResizeMode"
aEnumTypes + "QListView::ViewMode"
aEnumTypes + "QListView::Flow"
aEnumTypes + "QAxBase::PropertyBag"
aEnumTypes + "QToolButton::ToolButtonPopupMode"
aEnumTypes + "QMutex::RecursionMode"
aEnumTypes + "QBluetoothDeviceDiscoveryAgent::DiscoveryMethod"
aEnumTypes + "QBluetoothDeviceDiscoveryAgent::DiscoveryMethods"
aEnumTypes + "QBluetoothDeviceDiscoveryAgent::Error"
aEnumTypes + "QBluetoothDeviceDiscoveryAgent::InquiryType"
aEnumTypes + "QBluetoothDeviceInfo::CoreConfiguration"
aEnumTypes + "QBluetoothDeviceInfo::CoreConfigurations"
aEnumTypes + "QBluetoothDeviceInfo::DataCompleteness"
aEnumTypes + "QBluetoothDeviceInfo::MajorDeviceClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorAudioVideoClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorComputerClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorHealthClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorImagingClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorMiscellaneousClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorNetworkClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorPeripheralClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorPhoneClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorToyClass"
aEnumTypes + "QBluetoothDeviceInfo::MinorWearableClass"
aEnumTypes + "QBluetoothDeviceInfo::ServiceClass"
aEnumTypes + "QBluetoothDeviceInfo::ServiceClasses"
aEnumTypes + "QBluetoothLocalDevice::Error"
aEnumTypes + "QBluetoothLocalDevice::HostMode"
aEnumTypes + "QBluetoothLocalDevice::Pairing"
aEnumTypes + "QBluetoothServer::Error"
aEnumTypes + "QBluetoothServiceDiscoveryAgent::DiscoveryMode"
aEnumTypes + "QBluetoothServiceDiscoveryAgent::Error"
aEnumTypes + "QBluetoothServiceInfo::AttributeId"
aEnumTypes + "QBluetoothServiceInfo::Protocol"
aEnumTypes + "QBluetoothSocket::SocketError"
aEnumTypes + "QBluetoothSocket::SocketState"
aEnumTypes + "QBluetoothTransferReply::TransferError"
aEnumTypes + "QBluetoothTransferRequest::Attribute"
aEnumTypes + "QBluetoothUuid::CharacteristicType"
aEnumTypes + "QBluetoothUuid::DescriptorType"
aEnumTypes + "QBluetoothUuid::ProtocolUuid"
aEnumTypes + "QBluetoothUuid::ServiceClassUuid"
aEnumTypes + "QDockWidget::DockWidgetFeature"
aEnumTypes + "QDockWidget::DockWidgetFeatures"
aEnumTypes + "QRegion::RegionType"
aEnumTypes + "QEventLoop::ProcessEventsFlags"
aEnumTypes + "Qt::ApplicationAttribute"
aEnumTypes + "QCalendarWidget::HorizontalHeaderFormat"
aEnumTypes + "QCalendarWidget::VerticalHeaderFormat"
aEnumTypes + "QCalendarWidget::SelectionMode"
aEnumTypes + "QOpenGLFunctions::OpenGLFeature"
aEnumTypes + "QOpenGLFunctions::OpenGLFeatures"
aEnumTypes + "QOpenGLContext::OpenGLModuleType"
aEnumTypes + "QSurfaceFormat::ColorSpace"
aEnumTypes + "QSurfaceFormat::FormatOption"
aEnumTypes + "QSurfaceFormat::FormatOptions"
aEnumTypes + "QSurfaceFormat::OpenGLContextProfile"
aEnumTypes + "QSurfaceFormat::RenderableType"
aEnumTypes + "QSurfaceFormat::SwapBehavior"
aEnumTypes + "QOpenGLWidget::UpdateBehavior"
aEnumTypes + "QOpenGLTexture::BindingTarget"
aEnumTypes + "QOpenGLTexture::ComparisonFunction"
aEnumTypes + "QOpenGLTexture::ComparisonMode"
aEnumTypes + "QOpenGLTexture::CoordinateDirection"
aEnumTypes + "QOpenGLTexture::CubeMapFace"
aEnumTypes + "QOpenGLTexture::DepthStencilMode"
aEnumTypes + "QOpenGLTexture::Feature"
aEnumTypes + "QOpenGLTexture::Features"
aEnumTypes + "QOpenGLTexture::Filter"
aEnumTypes + "QOpenGLTexture::MipMapGeneration"
aEnumTypes + "QOpenGLTexture::PixelFormat"
aEnumTypes + "QOpenGLTexture::PixelType"
aEnumTypes + "QOpenGLTexture::SwizzleComponent"
aEnumTypes + "QOpenGLTexture::SwizzleValue"
aEnumTypes + "QOpenGLTexture::Target"
aEnumTypes + "QOpenGLTexture::TextureFormat"
aEnumTypes + "QOpenGLTexture::TextureUnitReset"
aEnumTypes + "QOpenGLTexture::WrapMode"
aEnumTypes + "QPaintDevice::PaintDeviceMetric"
aEnumTypes + "QOpenGLDebugLogger::LoggingMode"
aEnumTypes + "QOpenGLFramebufferObject::Attachment"
aEnumTypes + "QOpenGLBuffer::Access"
aEnumTypes + "QOpenGLBuffer::RangeAccessFlag"
aEnumTypes + "QOpenGLBuffer::RangeAccessFlags"
aEnumTypes + "QOpenGLBuffer::Type"
aEnumTypes + "QOpenGLBuffer::UsagePattern"
aEnumTypes + "QOpenGLShader::ShaderType"
aEnumTypes + "QOpenGLShader::ShaderTypeBit"
aEnumTypes + "QTabBar::ButtonPosition"
aEnumTypes + "QTabBar::SelectionBehavior"
aEnumTypes + "QTabBar::Shape"
aEnumTypes + "QFileDevice::FileError"
aEnumTypes + "QFileDevice::FileHandleFlag"
aEnumTypes + "QFileDevice::FileHandleFlags"
aEnumTypes + "QFileDevice::FileTime"
aEnumTypes + "QFileDevice::MemoryMapFlags"
aEnumTypes + "QFileDevice::Permission"
aEnumTypes + "QFileDevice::Permissions"
aEnumTypes + "QStandardPaths::LocateOption"
aEnumTypes + "QStandardPaths::LocateOptions"
aEnumTypes + "QStandardPaths::StandardLocation"
aEnumTypes + "QFile::FileHandleFlags"
aEnumTypes + "QFile::Permissions"
aEnumTypes + "QDir::Filter"
aEnumTypes + "QDir::Filters"
aEnumTypes + "QDir::SortFlag"
aEnumTypes + "QDir::SortFlags"
aEnumTypes + "QQuickWidget::ResizeMode"
aEnumTypes + "QQuickWidget::Status"
aEnumTypes + "Qt::DropActions"
aEnumTypes + "Qt::MouseButtons"
aEnumTypes + "Qt::KeyboardModifiers"
aEnumTypes + "QClipboard::Mode"
aEnumTypes + "QChar::Category"
aEnumTypes + "QChar::Decomposition"
aEnumTypes + "QChar::Direction"
aEnumTypes + "QChar::JoiningType"
aEnumTypes + "QChar::Script"
aEnumTypes + "QChar::SpecialCharacter"
aEnumTypes + "QChar::UnicodeVersion"
aEnumTypes + "QGeoPositionInfo::Attribute"
aEnumTypes + "QGeoCoordinate::CoordinateFormat"
aEnumTypes + "QGeoCoordinate::CoordinateType"
aEnumTypes + "QGeoPositionInfoSource::Error"
aEnumTypes + "QGeoPositionInfoSource::PositioningMethod"
aEnumTypes + "QGeoPositionInfoSource::PositioningMethods"
aEnumTypes + "QGeoShape::ShapeType"
aEnumTypes + "QGeoSatelliteInfo::Attribute"
aEnumTypes + "QGeoSatelliteInfo::SatelliteSystem"
aEnumTypes + "QNmeaPositionInfoSource::UpdateMode"

$aMallocClassesList + "QModelIndex"

</runcode>

<addfreefunctionsprototype>

<loadfile> qapp.cf
<loadfile> qdesktopservices.cf
<loadfile> qtest.cf
<loadfile> qobject.cf
<loadfile> qwidget.cf
<loadfile> qlabel.cf
<loadfile> qpushbutton.cf
<loadfile> qbitmap.cf
<loadfile> qpixmap.cf
<loadfile> qpixmap2.cf
<loadfile> qicon.cf
<loadfile> qsize.cf
<loadfile> qlineedit.cf
<loadfile> qvboxlayout.cf
<loadfile> qhboxlayout.cf
<loadfile> qtextedit.cf
<loadfile> qlistwidget.cf
<loadfile> qtreeview.cf
<loadfile> qdir.cf
<loadfile> qfilesystemmodel.cf
<loadfile> qtreewidget.cf
<loadfile> qtreewidgetitem.cf
<loadfile> qcombobox.cf
<loadfile> qmenubar.cf
<loadfile> qmenu.cf
<loadfile> qtoolbar.cf
<loadfile> qmainwindow.cf
<loadfile> qstatusbar.cf
<loadfile> qdockwidget.cf
<loadfile> qtabwidget.cf
<loadfile> qtablewidgetitem.cf
<loadfile> qframe.cf
<loadfile> qframe2.cf
<loadfile> qframe3.cf
<loadfile> qabstractscrollarea.cf
<loadfile> qabstractitemview.cf
<loadfile> qtableview.cf
<loadfile> qtablewidget.cf
<loadfile> qprogressbar.cf
<loadfile> qspinbox.cf
<loadfile> qabstractslider.cf
<loadfile> qslider.cf
<loadfile> qdateedit.cf
<loadfile> qdatetimeedit.cf
<loadfile> qabstractspinbox.cf
<loadfile> qdial.cf

<filter> (sysget("RINGQT_ANDROID") = "" and sysget("RINGQT_NOWEBKIT") = "")
<loadfile> qwebview.cf
</filter>

<loadfile> qurl.cf
<loadfile> qcheckbox.cf
<loadfile> qabstractbutton.cf
<loadfile> qradiobutton.cf
<loadfile> qbuttongroup.cf
<loadfile> qmediaplayer.cf
<loadfile> qmediaplaylist.cf
<loadfile> qvideowidget.cf
<loadfile> qaction.cf
<loadfile> qevent.cf
<loadfile> qmessagebox.cf
<loadfile> qtimer.cf
<loadfile> qfiledialog.cf
<loadfile> qpainter.cf
<loadfile> qpainter2.cf
<loadfile> qpicture.cf
<loadfile> qpen.cf
<loadfile> qcolor.cf
<loadfile> qprinter.cf
<loadfile> qfont.cf
<loadfile> qbrush.cf
<loadfile> qbytearray.cf
<loadfile> qiodevice.cf
<loadfile> qabstractsocket.cf
<loadfile> qnetworkproxy.cf
<loadfile> qtcpsocket.cf
<loadfile> qtcpserver.cf
<loadfile> qhostaddress.cf
<loadfile> qhostinfo.cf
<loadfile> qfileinfo.cf
<loadfile> qdirmodel.cf
<loadfile> qfontdialog.cf
<loadfile> qdialog.cf
<loadfile> qtextcursor.cf
<loadfile> qcolordialog.cf
<loadfile> qstringlist.cf
<loadfile> qkeysequence.cf
<loadfile> qlcdnumber.cf
<loadfile> qinputdialog.cf
<loadfile> qallevents.cf
<loadfile> qdesktopwidget.cf
<loadfile> qrect.cf
<loadfile> qtextdocument.cf
<loadfile> qtextblock.cf
<loadfile> qtime.cf
<loadfile> qlistwidgetitem.cf
<loadfile> qsystemtrayicon.cf
<loadfile> qdate.cf
<loadfile> qtextcodec.cf
<loadfile> qsqldatabase.cf
<loadfile> qsqldriver.cf
<loadfile> qsqlquery.cf
<loadfile> qsqlerror.cf
<loadfile> qsqlindex.cf
<loadfile> qsqlrecord.cf
<loadfile> qsqlfield.cf
<loadfile> qsqldrivercreatorbase.cf
<loadfile> qvariant.cf
<loadfile> qnetworkrequest.cf
<loadfile> qnetworkaccessmanager.cf
<loadfile> qnetworkreply.cf
<loadfile> qpainterpath.cf
<loadfile> qimage.cf
<loadfile> ringcodehighlighter.cf
<loadfile> qxmlstreamreader.cf


<class>
name: QXmlStreamWriter
para: void
</class>

bool autoFormatting(void)
int autoFormattingIndent(void)
QTextCodec *codec(void)
QIODevice *device(void)
bool hasError(void)
void setAutoFormatting(bool enable)
void setAutoFormattingIndent(int spacesOrTabs)
void setCodec(QTextCodec *codec)
void setCodec@2(const char *codecName)
void setDevice(QIODevice *device)
void writeAttribute(QString, QString,QString)
void writeAttribute@2(QString, QString)
void writeAttribute@3(QXmlStreamAttribute)
void writeAttributes(QXmlStreamAttributes)
void writeCDATA(QString text)
void writeCharacters(QString text)
void writeComment(QString text)
void writeCurrentToken(QXmlStreamReader reader)
void writeDTD(QString dtd)
void writeDefaultNamespace(QString namespaceUri)
void writeEmptyElement(QString namespaceUri, QString name)
void writeEmptyElement@2(QString qualifiedName)
void writeEndDocument(void)
void writeEndElement(void)
void writeEntityReference(QString name)
void writeNamespace(QString namespaceUri, QString prefix)
void writeProcessingInstruction(QString target, QString data)
void writeStartDocument(QString version)
void writeStartDocument@2(QString version, bool standalone)
void writeStartDocument@3(void)
void writeStartElement(QString namespaceUri, QString name)
void writeStartElement@2(QString qualifiedName)
void writeTextElement(QString namespaceUri, QString name, QString text)
void writeTextElement@2(QString qualifiedName, QString text)

<class>
name: QXmlStreamNotationDeclaration
para: void
</class>

QStringRef name(void)
QStringRef publicId(void)
QStringRef systemId(void)

<class>
name: QXmlStreamNamespaceDeclaration
para: void
</class>

QStringRef namespaceUri(void)
QStringRef prefix(void)

<class>
name: QXmlStreamEntityResolver
para: void
</class>

<class>
name: QXmlStreamEntityDeclaration
para: void
</class>

QStringRef name(void)
QStringRef notationName(void)
QStringRef publicId(void)
QStringRef systemId(void)
QStringRef value(void)

<class>
name: QXmlStreamAttributes
para: void
</class>

void append(QString  namespaceUri, QString  name, QString  value)
void append@2(QString  qualifiedName, QString  value)
bool hasAttribute(QString  qualifiedName)
bool hasAttribute@2(QLatin1String qualifiedName)
bool hasAttribute@3(QString  namespaceUri, QString  name)
QStringRef value(QString  namespaceUri, QString  name)
QStringRef value@2(QString  namespaceUri, QLatin1String name)
QStringRef value@3(QLatin1String namespaceUri, QLatin1String name)
QStringRef value@4(QString  qualifiedName)
QStringRef value@5(QLatin1String qualifiedName)


<class>
name: QXmlStreamAttribute
para: void
</class>

bool isDefault(void)
QStringRef name(void)
QStringRef namespaceUri(void)
QStringRef prefix(void)
QStringRef qualifiedName(void)
QStringRef value(void)

<class>
name: QThread
para: QObject *
parent: QObject
codename: GThread
passvmpointer
</class>

QAbstractEventDispatcher *eventDispatcher(void)
void exit(int returnCode) # In RingQt use : void exitfromthread(int returnCode)
bool isFinished(void)
bool isInterruptionRequested(void)
bool isRunning(void)

<comment>
int loopLevel(void)
</comment>

QThread::Priority priority(void)
void requestInterruption(void)
void setEventDispatcher(QAbstractEventDispatcher *eventDispatcher)
void setPriority(QThread::Priority priority)
void setStackSize(uint stackSize)
uint stackSize(void)
bool wait(unsigned long time)
void quit(void)
void start(QThread::Priority priority)
void terminate(void)
QThread *currentThread(void)
Qt::HANDLE currentThreadId(void)
int idealThreadCount(void)
void msleep(unsigned long msecs)
void sleep(unsigned long secs)
void usleep(unsigned long usecs)
void yieldCurrentThread(void)

void setStartedEvent(const char *)
void setFinishedEvent(const char *)

const char *getStartedEvent(void)
const char *getFinishedEvent(void)

<class>
name: QThreadPool
para: void
parent: QObject
</class>

int activeThreadCount(void)

<comment>
void cancel(QRunnable * runnable)
</comment>

void clear(void)
int expiryTimeout(void)
int maxThreadCount(void)
void releaseThread(void)
void reserveThread(void)
void setExpiryTimeout(int expiryTimeout)
void setMaxThreadCount(int maxThreadCount)
void start(QRunnable * runnable, int priority)
bool tryStart(QRunnable * runnable)
bool waitForDone(int msecs)
QThreadPool *globalInstance(void)


<class>
name: QRegularExpression
para: void
</class>

int captureCount(void)
QString errorString(void)
QRegularExpressionMatchIterator globalMatch(QString  subject, int offset, QRegularExpression::MatchType matchType, QRegularExpression::MatchOptions matchOptions)

<comment>
QRegularExpressionMatchIterator globalMatch@2(QStringRef  subjectRef, int offset, QRegularExpression::MatchType matchType, QRegularExpression::MatchOptions matchOptions)
</comment>

bool isValid(void)
QRegularExpressionMatch match(QString  subject, int offset, QRegularExpression::MatchType matchType, QRegularExpression::MatchOptions matchOptions)

<comment>
QRegularExpressionMatch match@2(QStringRef  subjectRef, int offset, QRegularExpression::MatchType matchType, QRegularExpression::MatchOptions matchOptions)
</comment>

QStringList namedCaptureGroups(void)

<comment>
void optimize(void)
</comment>

QString pattern(void)
int patternErrorOffset(void)
QRegularExpression::PatternOptions patternOptions(void)
void setPattern(QString  pattern)
void setPatternOptions(QRegularExpression::PatternOptions options)
void swap(QRegularExpression  other)

<class>
name: QRegularExpressionMatch
para: void
</class>

QString captured(int nth)
QString captured@2(const QString  name)
int capturedEnd(int nth)
int capturedEnd@2(const QString  name)
int capturedLength(int nth)
int capturedLength@2(const QString  name)
QStringRef capturedRef(int nth)
QStringRef capturedRef@2(const QString  name)
int capturedStart(int nth)
int capturedStart@2(const QString  name)
QStringList capturedTexts(void)
bool hasMatch(void)
bool hasPartialMatch(void)
bool isValid(void)
int lastCapturedIndex(void)
QRegularExpression::MatchOptions matchOptions(void)
QRegularExpression::MatchType matchType(void)
QRegularExpression regularExpression(void)
void swap(QRegularExpressionMatch  other)

<class>
name: QRegularExpressionMatchIterator
para: void
</class>

bool hasNext(void)
bool isValid(void)
QRegularExpression::MatchOptions matchOptions(void)
QRegularExpression::MatchType matchType(void)
QRegularExpressionMatch next(void) # In RingQt use : QRegularExpressionMatch nextitem(void)
QRegularExpressionMatch peekNext(void)
QRegularExpression regularExpression(void)
void swap(QRegularExpressionMatchIterator other)

<class>
name: QJsonArray 
para: void
</class>

void append(QJsonValue  value)
QJsonValue at(int i)

<comment>
iterator begin(void)
const_iterator begin(void)
const_iterator constBegin(void)
const_iterator constEnd(void)
</comment>

bool contains(QJsonValue  value)
int count(void)
bool empty(void)

<comment>
iterator end(void)
const_iterator end@2(void)
iterator erase(iterator it)
</comment>

QJsonValue first(void)
void insert(int i, QJsonValue  value)

<comment>
iterator insert@2(iterator before, QJsonValue  value)
</comment>

bool isEmpty(void)
QJsonValue last(void)
void pop_back(void)
void pop_front(void)
void prepend(QJsonValue  value)
void push_back(QJsonValue  value)
void push_front(QJsonValue  value)
void removeAt(int i)
void removeFirst(void)
void removeLast(void)
void replace(int i, QJsonValue  value)
int size(void)
QJsonValue takeAt(int i)
QVariantList toVariantList(void)
QJsonArray fromStringList(QStringList  list)
QJsonArray fromVariantList(QVariantList  list)


<class>
name: QJsonDocument
para: void
</class>

QJsonArray array(void)
bool isArray(void)
bool isEmpty(void)
bool isNull(void)
bool isObject(void)
QJsonObject object(void)
const char * rawData(int * size)
void setArray(QJsonArray  array)
void setObject(QJsonObject  object)
QByteArray toBinaryData(void)
QByteArray toJson(QJsonDocument::JsonFormat format)
QVariant toVariant(void)

QJsonDocument fromBinaryData( QByteArray  data, QJsonDocument::DataValidation validation)
QJsonDocument fromJson( QByteArray  json, QJsonParseError * error)
QJsonDocument fromRawData( char * data, int size, QJsonDocument::DataValidation validation)
QJsonDocument fromVariant( QVariant  variant)


<class>
name: QJsonObject
para: void
</class>


<comment>
iterator begin(void)
const_iterator begin@2(void)
const_iterator constBegin(void)
const_iterator constEnd(void)
const_iterator constFind(QString  key)
</comment>

bool contains(QString  key)
int count(void)
bool empty(void)

<comment>
iterator end(void)
const_iterator end(void)
iterator erase(iterator it)
iterator find(QString  key)
const_iterator find(QString  key)
iterator insert(QString  key, QJsonValue  value)
</comment>

bool isEmpty(void)
QStringList keys(void)
int length(void)
void remove(QString  key)
int size(void)
QJsonValue take(QString  key)

<comment>
QVariantHash toVariantHash(void)
QJsonObject fromVariantHash(QVariantHash  hash)
</comment>

QVariantMap toVariantMap(void)
QJsonValue value(QString  key)

QJsonObject fromVariantMap(QVariantMap  map)


<class>
name: QJsonParseError
para: void
</class>

QString errorString(void)

<class>
name: QJsonValue
para: void
</class>

bool isArray(void)
bool isBool(void)
bool isDouble(void)
bool isNull(void)
bool isObject(void)
bool isString(void)
bool isUndefined(void)
QJsonArray toArray(QJsonArray  defaultValue)
QJsonArray toArray@2(void)
bool toBool(bool defaultValue  )
double toDouble(double defaultValue )
int toInt(int defaultValue )
QJsonObject toObject(QJsonObject  defaultValue)
QJsonObject toObject@2(void)
QString toString(QString  defaultValue  )
QVariant toVariant(void)
QJsonValue::Type type(void)
QJsonValue fromVariant(QVariant  variant)


<class>
name: QPlainTextEdit
para: QWidget *
parent: QAbstractScrollArea
codename: GPlainTextEdit
passvmpointer
</class>

QString anchorAt(QPoint pos)
bool backgroundVisible(void)
int blockCount(void)
bool canPaste(void)
bool centerOnScroll(void)
QMenu * createStandardContextMenu(void)

<comment>
QMenu * createStandardContextMenu@2(QPoint position)
</comment>

QTextCharFormat currentCharFormat(void)
QTextCursor cursorForPosition(QPoint pos)
QRect cursorRect(QTextCursor cursor)
QRect cursorRect@2(void)
int cursorWidth(void)
QTextDocument * document(void)
QString documentTitle(void)
void ensureCursorVisible(void)
QList<QTextEdit::ExtraSelection> extraSelections(void)
bool find(QString exp, QTextDocument::FindFlags options)

<comment>
bool find@2(QRegExp exp, QTextDocument::FindFlags options)
</comment>

bool isReadOnly(void)
bool isUndoRedoEnabled(void)
QPlainTextEdit::LineWrapMode lineWrapMode(void)

<comment>
virtual QVariant loadResource(int type, QUrl name)
</comment>

int maximumBlockCount(void)
void mergeCurrentCharFormat(QTextCharFormat modifier)
void moveCursor(QTextCursor::MoveOperation operation, QTextCursor::MoveMode mode)
bool overwriteMode(void)

<comment>
QString placeholderText(void)
</comment>

void print(QPagedPaintDevice *printer)
void setBackgroundVisible(bool visible)
void setCenterOnScroll(bool enabled)
void setCurrentCharFormat(QTextCharFormat format)
void setCursorWidth(int width)
void setDocument(QTextDocument *document)
void setDocumentTitle(QString title)
void setExtraSelections(QList<QTextEdit::ExtraSelection> selections)
void setLineWrapMode(QPlainTextEdit::LineWrapMode mode)
void setMaximumBlockCount(int maximum)
void setOverwriteMode(bool overwrite)

<comment>
void setPlaceholderText(QString placeholderText)
</comment>

void setReadOnly(bool ro)
void setTabChangesFocus(bool b)
void setTabStopWidth(int width)
void setTextCursor(QTextCursor cursor)
void setTextInteractionFlags(Qt::TextInteractionFlags flags)
void setUndoRedoEnabled(bool enable)
void setWordWrapMode(QTextOption::WrapMode policy)
bool tabChangesFocus(void)
int tabStopWidth(void)
QTextCursor textCursor(void)
Qt::TextInteractionFlags textInteractionFlags(void)
QString toPlainText(void)
QTextOption::WrapMode wordWrapMode(void)

void appendHtml(QString html)
void appendPlainText(QString text)
void centerCursor(void)
void clear(void)
void copy(void)
void cut(void)
void insertPlainText(QString text)
void paste(void)
void redo(void)
void selectAll(void)
void setPlainText(QString text)
void undo(void)
void zoomIn(int range)
void zoomOut(int range)

void setblockCountChangedEvent(const char *cStr)
void setcopyAvailableEvent(const char *cStr)
void setcursorPositionChangedEvent(const char *cStr)
void setmodificationChangedEvent(const char *cStr)
void setredoAvailableEvent(const char *cStr)
void setselectionChangedEvent(const char *cStr)
void settextChangedEvent(const char *cStr)
void setundoAvailableEvent(const char *cStr)
void setupdateRequestEvent(const char *cStr)

const char *getblockCountChangedEvent(void)
const char *getcopyAvailableEvent(void)
const char *getcursorPositionChangedEvent(void)
const char *getmodificationChangedEvent(void)
const char *getredoAvailableEvent(void)
const char *getselectionChangedEvent(void)
const char *gettextChangedEvent(void)
const char *getundoAvailableEvent(void)
const char *getupdateRequestEvent(void)

<register>
void cyanline(void)
</register>

<code>
RING_FUNC(ring_QPlainTextEdit_cyanline)
{
	RING_API_IGNORECPOINTERTYPE ;
	if ( ! RING_API_ISPOINTER(1) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}

	QPlainTextEdit *editor;
	editor = (QPlainTextEdit *) RING_API_GETCPOINTER(1,"QTextEdit *");

	QTextEdit::ExtraSelection highlight;
	highlight.cursor = editor->textCursor();
	highlight.format.setProperty(QTextFormat::FullWidthSelection, true);
	highlight.format.setBackground( Qt::cyan );

	QList<QTextEdit::ExtraSelection> extras;
	extras << highlight;
	editor->setExtraSelections( extras );
}
</code>

<register>
void setactivelinecolor(QColor)
</register>

<code>
RING_FUNC(ring_QPlainTextEdit_setactivelinecolor)
{
	RING_API_IGNORECPOINTERTYPE ;
	if ( RING_API_PARACOUNT != 2 ) {
		RING_API_ERROR(RING_API_MISS2PARA);
		return ;
	}
	if ( ! RING_API_ISPOINTER(1) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}

	QPlainTextEdit *editor;
	editor = (QPlainTextEdit *) RING_API_GETCPOINTER(1,"QTextEdit *");

	QTextEdit::ExtraSelection highlight;
	highlight.cursor = editor->textCursor();
	highlight.format.setProperty(QTextFormat::FullWidthSelection, true);
	highlight.format.setBackground( * (QColor *) RING_API_GETCPOINTER(2,"QColor") );

	QList<QTextEdit::ExtraSelection> extras;
	extras << highlight;
	editor->setExtraSelections( extras );
}
</code>

<class>
name: CodeEditor
para: QWidget *
parent: QPlainTextEdit
passvmpointer
</class>

void setCompleter(QCompleter *c)
QCompleter *completer(void)
void setLineNumbersAreaColor(QColor oColor)
void setLineNumbersAreaBackColor(QColor oColor)


<class>
name: QGridLayout
para: void
</class>


void addItem(QLayoutItem * item, int row, int column, int rowSpan , int columnSpan , Qt::Alignment alignment )
void addLayout(QLayout * layout, int row, int column, Qt::Alignment alignment )
void addLayout@2(QLayout * layout, int row, int column, int rowSpan, int columnSpan, Qt::Alignment alignment )
void addWidget(QWidget * widget, int row, int column, Qt::Alignment alignment )
void addWidget@2(QWidget * widget, int fromRow, int fromColumn, int rowSpan, int columnSpan, Qt::Alignment alignment )
QRect cellRect(int row, int column)
int columnCount(void)
int columnMinimumWidth(int column)
int columnStretch(int column)
void getItemPosition(int index, int * row, int * column, int * rowSpan, int * columnSpan)
int horizontalSpacing(void)
QLayoutItem * itemAtPosition(int row, int column)
Qt::Corner originCorner(void)
int rowCount(void)
int rowMinimumHeight(int row)
int rowStretch(int row)
void setColumnMinimumWidth(int column, int minSize)
void setColumnStretch(int column, int stretch)
void setHorizontalSpacing(int spacing)
void setOriginCorner(Qt::Corner corner)
void setRowMinimumHeight(int row, int minSize)
void setRowStretch(int row, int stretch)
void setSpacing(int spacing)
void setVerticalSpacing(int spacing)
int spacing(void)
int verticalSpacing(void)

<class>
name: QTextCharFormat 
para: void
</class>

QString anchorHref(void)
QStringList anchorNames(void)
QFont font(void)
QFont::Capitalization fontCapitalization(void)
QString fontFamily(void)
bool fontFixedPitch(void)
QFont::HintingPreference fontHintingPreference(void)
bool fontItalic(void)
bool fontKerning(void)
qreal fontLetterSpacing(void)
QFont::SpacingType fontLetterSpacingType(void)
bool fontOverline(void)
qreal fontPointSize(void)
int fontStretch(void)
bool fontStrikeOut(void)
QFont::StyleHint fontStyleHint(void)
QFont::StyleStrategy fontStyleStrategy(void)
bool fontUnderline(void)
int fontWeight(void)
qreal fontWordSpacing(void)
bool isAnchor(void)
bool isValid(void)
void setAnchor(bool anchor)
void setAnchorHref( QString   value)
void setAnchorNames( QStringList   names)
<comment>
void setFont( QFont   font, QTextCharFormat::FontPropertiesInheritanceBehavior behavior)
</comment>
void setFont@2( QFont   font)
void setFontCapitalization(QFont::Capitalization capitalization)
void setFontFamily( QString   family)
void setFontFixedPitch(bool fixedPitch)
void setFontHintingPreference(QFont::HintingPreference hintingPreference)
void setFontItalic(bool italic)
void setFontKerning(bool enable)
void setFontLetterSpacing(qreal spacing)
void setFontLetterSpacingType(QFont::SpacingType letterSpacingType)
void setFontOverline(bool overline)
void setFontPointSize(qreal size)
void setFontStretch(int factor)
void setFontStrikeOut(bool strikeOut)
void setFontStyleHint(QFont::StyleHint hint, QFont::StyleStrategy strategy )
void setFontStyleStrategy(QFont::StyleStrategy strategy)
void setFontUnderline(bool underline)
void setFontWeight(int weight)
void setFontWordSpacing(qreal spacing)
void setTextOutline( QPen   pen)
void setToolTip( QString   text)
void setUnderlineColor( QColor   color)
void setUnderlineStyle(QTextCharFormat::UnderlineStyle style)
void setVerticalAlignment(QTextCharFormat::VerticalAlignment alignment)
QPen textOutline(void)
QString toolTip(void)
QColor underlineColor(void)
QTextCharFormat::UnderlineStyle underlineStyle(void)
QTextCharFormat::VerticalAlignment verticalAlignment(void)


<class>
name: QCameraViewfinder
para: QWidget *
parent: QVideoWidget
</class>


<class>
name: QGraphicsVideoItem
para: void
</class>

Qt::AspectRatioMode aspectRatioMode(void)
QSizeF nativeSize(void)
QPointF offset(void)
void setAspectRatioMode(Qt::AspectRatioMode mode)
void setOffset(QPointF offset)
void setSize(QSizeF size)
QSizeF size(void)

<class>
name: QVideoWidgetControl
parent: QMediaControl
abstract
</class>

<class>
name: QCamera
para: void
parent: QMediaObject
</class>

QCamera::CaptureModes captureMode(void)
QCamera::Error error(void)
QString errorString(void)
QCameraExposure * exposure(void)
QCameraFocus * focus(void)
QCameraImageProcessing * imageProcessing(void)
bool isCaptureModeSupported(QCamera::CaptureModes mode)
QCamera::LockStatus lockStatus(void)
QCamera::LockStatus lockStatus@2(QCamera::LockType lockType)
QCamera::LockTypes requestedLocks(void)
void setViewfinder(QVideoWidget * viewfinder)
void setViewfinder@2(QGraphicsVideoItem * viewfinder)
void setViewfinder@3(QAbstractVideoSurface * surface)

<comment>
void setViewfinderSettings( QCameraViewfinderSettings   settings)
</comment>

QCamera::State state(void)
QCamera::Status status(void)
QCamera::LockTypes supportedLocks(void)

<comment>
QList<QCamera::FrameRateRange> supportedViewfinderFrameRateRanges( QCameraViewfinderSettings   settings )
QList<QVideoFrame::PixelFormat> supportedViewfinderPixelFormats( QCameraViewfinderSettings   settings )
QList<QSize> supportedViewfinderResolutions( QCameraViewfinderSettings   settings )
QList<QCameraViewfinderSettings> supportedViewfinderSettings( QCameraViewfinderSettings   settings )
QCameraViewfinderSettings viewfinderSettings(void)
</comment>

void load(void)
void searchAndLock(void)
void searchAndLock@2(QCamera::LockTypes locks)
void setCaptureMode(QCamera::CaptureModes mode)
void start(void)
void stop(void)
void unload(void)
void unlock(void)
void unlock@2(QCamera::LockTypes locks)


<class>
name: QCameraImageCapture
para: QMediaObject * mediaObject
</class>

QMultimedia::AvailabilityStatus availability(void)
QVideoFrame::PixelFormat bufferFormat(void)
QCameraImageCapture::CaptureDestinations captureDestination(void)
QImageEncoderSettings encodingSettings(void)
QCameraImageCapture::Error error(void)
QString errorString(void)
QString imageCodecDescription( QString   codec)
bool isAvailable(void)
bool isCaptureDestinationSupported(QCameraImageCapture::CaptureDestinations destination)
bool isReadyForCapture(void)
void setBufferFormat( QVideoFrame::PixelFormat format)
void setCaptureDestination(QCameraImageCapture::CaptureDestinations destination)
void setEncodingSettings( QImageEncoderSettings   settings)
QList<QVideoFrame::PixelFormat> supportedBufferFormats(void)
QStringList supportedImageCodecs(void)
QList<QSize> supportedResolutions( QImageEncoderSettings   settings , bool * continuous )
void cancelCapture(void)
int capture( QString   file )


<class>
name: QMediaObject
para: void
parent: QWidget
abstract
</class>

QStringList availableMetaData(void)
bool isMetaDataAvailable(void)
QVariant metaData( QString   key)
int notifyInterval(void)
void setNotifyInterval(int milliSeconds)


<class>
name: QHeaderView
para: Qt::Orientation, QWidget *
parent: QAbstractItemView
codename: GHeaderView
passvmpointer
</class>

bool cascadingSectionResizes(void)
int count(void)
Qt::Alignment defaultAlignment(void)
int defaultSectionSize(void)
int hiddenSectionCount(void)
void hideSection(int logicalIndex)
bool highlightSections(void)
bool isSectionHidden(int logicalIndex)
bool isSortIndicatorShown(void)
int length(void)
int logicalIndex(int visualIndex)
int logicalIndexAt(int position)
int logicalIndexAt@2(int x, int y)
int logicalIndexAt@3( QPoint   pos)
int maximumSectionSize(void)
int minimumSectionSize@2(void)
void moveSection(int from, int to)
int offset(void)
Qt::Orientation orientation(void)

<comment>
void resetDefaultSectionSize(void)
</comment>

int resizeContentsPrecision(void)
void resizeSection(int logicalIndex, int size)
void resizeSections(QHeaderView::ResizeMode mode)
bool restoreState( QByteArray   state)
QByteArray saveState(void)
int sectionPosition(int logicalIndex)
QHeaderView::ResizeMode sectionResizeMode(int logicalIndex)
int sectionSize(int logicalIndex)
int sectionSizeHint(int logicalIndex)
int sectionViewportPosition(int logicalIndex)
bool sectionsClickable(void)
bool sectionsHidden(void)
bool sectionsMovable(void)
bool sectionsMoved(void)
void setCascadingSectionResizes(bool enable)
void setDefaultAlignment(Qt::Alignment alignment)
void setDefaultSectionSize(int size)
void setHighlightSections(bool highlight)
void setMaximumSectionSize(int size)
void setMinimumSectionSize(int size)
void setResizeContentsPrecision(int precision)
void setSectionHidden(int logicalIndex, bool hide)
void setSectionResizeMode(QHeaderView::ResizeMode mode)
void setSectionResizeMode@2(int logicalIndex, QHeaderView::ResizeMode mode)
void setSectionsClickable(bool clickable)
void setSectionsMovable(bool movable)
void setSortIndicator(int logicalIndex, Qt::SortOrder order)
void setSortIndicatorShown(bool show)
void setStretchLastSection(bool stretch)
void showSection(int logicalIndex)
Qt::SortOrder sortIndicatorOrder(void)
int sortIndicatorSection(void)
bool stretchLastSection(void)
int stretchSectionCount(void)
void swapSections(int first, int second)
int visualIndex(int logicalIndex)
int visualIndexAt(int position)

void headerDataChanged(Qt::Orientation orientation, int logicalFirst, int logicalLast)
void setOffset(int offset)
void setOffsetToLastSection(void)
void setOffsetToSectionPosition(int visualSectionNumber)

void setgeometriesChangedEvent(const char *)
void setsectionClickedEvent(const char *)
void setsectionCountChangedEvent(const char *)
void setsectionDoubleClickedEvent(const char *)
void setsectionEnteredEvent(const char *)
void setsectionHandleDoubleClickedEvent(const char *)
void setsectionMovedEvent(const char *)
void setsectionPressedEvent(const char *)
void setsectionResizedEvent(const char *)
void setsortIndicatorChangedEvent(const char *)

const char *getgeometriesChangedEvent(void)
const char *getsectionClickedEvent(void)
const char *getsectionCountChangedEvent(void)
const char *getsectionDoubleClickedEvent(void)
const char *getsectionEnteredEvent(void)
const char *getsectionHandleDoubleClickedEvent(void)
const char *getsectionMovedEvent(void)
const char *getsectionPressedEvent(void)
const char *getsectionResizedEvent(void)
const char *getsortIndicatorChangedEvent(void)

void geteventparameters(void)

<class>
name: QFontMetrics
para: QFont
</class>

int ascent(void)
int averageCharWidth(void)
QRect boundingRect(QChar ch)
QRect boundingRect@2( QString   text)
QRect boundingRect@3(int x, int y, int width, int height, int flags,  QString   text, int tabStops , int * tabArray )
QRect boundingRect@4( QRect   rect, int flags,  QString   text, int tabStops , int * tabArray )
int descent(void)
QString elidedText( QString   text, Qt::TextElideMode mode, int width, int flags )
int height(void)
bool inFont(QChar ch)
bool inFontUcs4(uint character)
int leading(void)
int leftBearing(QChar ch)
int lineSpacing(void)
int lineWidth(void)
int maxWidth(void)
int minLeftBearing(void)
int minRightBearing(void)
int overlinePos(void)
int rightBearing(QChar ch)
QSize size(int flags,  QString   text, int tabStops , int * tabArray )
int strikeOutPos(void)
QRect tightBoundingRect( QString   text)
int underlinePos(void)
int width( QString   text, int len )
int width@2(QChar ch)
int xHeight(void)


<class>
name: QSplashScreen
para: QPixmap
parent: QWidget
</class>

void  finish(QWidget *mainWin)
QPixmap pixmap(void)
void repaint(void)
void setPixmap(QPixmap pixmap)

void clearMessage(void)
void showMessage(QString message, int alignment ,QColor color)

<class>
name: QBoxLayout
para: QBoxLayout::Direction dir, QWidget *parent
parent: QLayout
</class>

void  addLayout(QLayout * layout, int stretch )
void  addSpacerItem(QSpacerItem * spacerItem)
void  addSpacing(int size)
void  addStretch(int stretch )
void  addStrut(int size)
void  addWidget(QWidget * widget, int stretch , Qt::Alignment alignment )
QBoxLayout::Direction  direction(void)
void  insertLayout(int index, QLayout * layout, int stretch )
void  insertSpacerItem(int index, QSpacerItem * spacerItem)
void  insertSpacing(int index, int size)
void  insertStretch(int index, int stretch )
void  insertWidget(int index, QWidget * widget, int stretch , Qt::Alignment alignment )
void  setDirection(QBoxLayout::Direction direction)
void  setSpacing(int spacing)
void  setStretch(int index, int stretch)
bool  setStretchFactor(QWidget * widget, int stretch)
bool  setStretchFactor@2(QLayout * layout, int stretch)
int  spacing(void)
int  stretch(int index)


<class>
name: QLayout
para: QWidget *
parent: QObject
abstract
</class>

bool activate(void)
void addWidget(QWidget *w)
QMargins contentsMargins(void)
QRect contentsRect(void)
void getContentsMargins(int *left, int *top, int *right, int *bottom)
bool isEnabled(void)
QWidget *menuBar(void)
QWidget *parentWidget(void)
void removeItem(QLayoutItem *item)
void removeWidget(QWidget *widget)
bool setAlignment(QWidget *w, Qt::Alignment alignment)
void setAlignment@2(Qt::Alignment alignment)
bool setAlignment@3(QLayout *l, Qt::Alignment alignment)
void setContentsMargins(int left, int top, int right, int bottom)
void setContentsMargins@2(QMargins margins)
void setEnabled(bool enable)
void setMenuBar(QWidget *widget)
void setSizeConstraint(QLayout::SizeConstraint)
void setSpacing(int)
QLayout::SizeConstraint sizeConstraint(void)
int spacing(void)
void update(void)

QSize  closestAcceptableSize( QWidget * widget,  QSize   size)


<class>
name: QLinearGradient
para: void
parent: QGradient
</class>

QPointF finalStop(void)
void setFinalStop(QPointF stop)
void setFinalStop@2(qreal x,qreal y)
void setStart(QPointF start)
void setStart@2(qreal x,qreal y)
QPointF start(void)


<class>
name: QGradient
para: void
abstract
</class>


QGradient::CoordinateMode coordinateMode(void)
void setColorAt(qreal position,  QColor   color)
void setCoordinateMode(QGradient::CoordinateMode mode)
void setSpread(QGradient::Spread method)
void setStops(QGradientStops stopPoints)
QGradient::Spread spread(void)
QGradientStops stops(void)
QGradient::Type type(void)

<class>
name: QPointF
para: void
</class>

bool isNull(void)
qreal manhattanLength(void)
qreal rx(void)
qreal ry(void)
void setX(qreal x)
void setY(qreal y)
QPoint toPoint(void)
qreal x(void)
qreal y(void)

<class>
name: QPoint
para: void
</class>

bool isNull(void)
int manhattanLength(void)
int rx(void)
int ry(void)
void setX(int x)
void setY(int y)
int x(void)
int y(void)

<comment>

//<class>
name: QModelIndex
para: void
//</class>

QModelIndex child(int row, int column)
int column(void)
QVariant data(int role )
Qt::ItemFlags flags(void)
qint64 internalId(void)
void *internalPointer(void)
bool isValid(void)
QAbstractItemModel *model(void)
QModelIndex parent(void)
int row(void)
QModelIndex sibling(int row, int column)

</comment>


<class>
name:  QScrollArea 
para: QWidget *parent 
parent: QAbstractScrollArea
</class>

Qt::Alignment alignment(void)
void ensureVisible(int x, int y, int xmargin , int ymargin )
void ensureWidgetVisible(QWidget *childWidget, int xmargin , int ymargin )
void setAlignment(Qt::Alignment)
void setWidget(QWidget *widget)
void setWidgetResizable(bool resizable)
QWidget *takeWidget(void)
QWidget *widget(void)
bool widgetResizable(void)

<class>
name:  QSplitter
para: QWidget *parent 
parent: QFrame
</class>

void addWidget(QWidget *widget)
bool childrenCollapsible(void)
int count(void)
void getRange(int index, int *min, int *max)
QSplitterHandle * handle(int index)
int handleWidth(void)
int indexOf(QWidget *widget)
void insertWidget(int index, QWidget *widget)
bool isCollapsible(int index)
bool opaqueResize(void)
Qt::Orientation orientation(void)
void refresh(void)
bool restoreState( QByteArray  state)
QByteArray saveState(void)
void setChildrenCollapsible(bool)
void setCollapsible(int index, bool collapse)
void setHandleWidth(int)
void setOpaqueResize(bool opaque )
void setOrientation(Qt::Orientation)
void setSizes( QList<int>  list)
void setStretchFactor(int index, int stretch)
QList<int> sizes(void)
QWidget * widget(int index)


<class>
name: QCompleter
para: QObject *parent 
parent: QObject
</class>

Qt::CaseSensitivity caseSensitivity(void)
int completionColumn(void)
int completionCount(void)
QCompleter::CompletionMode completionMode(void)
QAbstractItemModel *completionModel(void)
QString completionPrefix(void)
int completionRole(void)
QString currentCompletion(void)
QModelIndex currentIndex(void)
int currentRow(void)
Qt::MatchFlags filterMode(void)
int maxVisibleItems(void)
QAbstractItemModel * model(void)
QCompleter::ModelSorting modelSorting(void)
QAbstractItemView * popup(void)
void setCaseSensitivity(Qt::CaseSensitivity caseSensitivity)
void setCompletionColumn(int column)
void setCompletionMode(QCompleter::CompletionMode mode)
void setCompletionRole(int role)
bool setCurrentRow(int row)
void setFilterMode(Qt::MatchFlags filterMode)
void setMaxVisibleItems(int maxItems)
void setModel(QAbstractItemModel *model)
void setModelSorting(QCompleter::ModelSorting sorting)
void setPopup(QAbstractItemView *popup)
void setWidget(QWidget *widget)
QWidget * widget(void)
bool wrapAround(void)

void complete(QRect  rect)
void setCompletionPrefix(QString prefix)
void setWrapAround(bool wrap)

<class>
name: QCompleter2
para: QAbstractItemModel *model, QObject *parent 
parent: QCompleter
codename: QCompleter
</class>

<class>
name: QCompleter3
para: QStringList list, QObject *parent
parent: QCompleter
codename: QCompleter
</class>

<class>
name: QString2
para: void
codename: QString
</class>

QString append( QString  str)
<comment>
QString append2( QChar *str, int len)
QString append3( QChar ch)
QString append( QStringRef  reference)
QString append( QLatin1String str)
QString append( char *str)
QString append( QByteArray  ba)
QString arg( QString  a, int fieldWidth , QChar fillChar ))
QString arg(qulonglong a, int fieldWidth , int base , QChar fillChar ))
QString arg(long a, int fieldWidth , int base , QChar fillChar ))
QString arg(ulong a, int fieldWidth , int base , QChar fillChar ))
QString arg(int a, int fieldWidth , int base , QChar fillChar ))
QString arg(uint a, int fieldWidth , int base , QChar fillChar ))
QString arg(short a, int fieldWidth , int base , QChar fillChar ))
QString arg(ushort a, int fieldWidth , int base , QChar fillChar ))
QString arg(double a, int fieldWidth , char format , int precision , QChar fillChar ))
QString arg(char a, int fieldWidth , QChar fillChar ))
QString arg(QChar a, int fieldWidth , QChar fillChar ))
QString arg(qlonglong a, int fieldWidth , int base , QChar fillChar ))
QString arg( QString  a1,  QString  a2)
QString arg( QString  a1,  QString  a2,  QString  a3)
QString arg( QString  a1,  QString  a2,  QString  a3,  QString  a4)
QString arg( QString  a1,  QString  a2,  QString  a3,  QString  a4,  QString  a5)
QString arg( QString  a1,  QString  a2,  QString  a3,  QString  a4,  QString  a5,  QString  a6)
QString arg( QString  a1,  QString  a2,  QString  a3,  QString  a4,  QString  a5,  QString  a6,  QString  a7)
QString arg( QString  a1,  QString  a2,  QString  a3,  QString  a4,  QString  a5,  QString  a6,  QString  a7,  QString  a8)
QString arg( QString  a1,  QString  a2,  QString  a3,  QString  a4,  QString  a5,  QString  a6,  QString  a7,  QString  a8,  QString  a9)
QChar at(int position)
iterator begin(void)
const_iterator begin(void)
int capacity(void)
const_iterator cbegin(void)
const_iterator cend(void)
void chop(int n)
void clear(void)
int compare(QLatin1String other, Qt::CaseSensitivity cs )
int compare( QString  other, Qt::CaseSensitivity cs )
int compare( QStringRef  ref, Qt::CaseSensitivity cs )
const_iterator constBegin(void)
 QChar * constData(void)
const_iterator constEnd(void)
bool contains( QString  str, Qt::CaseSensitivity cs )
bool contains(QChar ch, Qt::CaseSensitivity cs )
bool contains(QLatin1String str, Qt::CaseSensitivity cs )
bool contains( QStringRef  str, Qt::CaseSensitivity cs )
bool contains( QRegExp  rx)
bool contains(QRegExp  rx)
bool contains( QRegularExpression  re)
bool contains( QRegularExpression  re, QRegularExpressionMatch *match)
int count( QString  str, Qt::CaseSensitivity cs )
int count(QChar ch, Qt::CaseSensitivity cs )
int count(void)
int count( QStringRef  str, Qt::CaseSensitivity cs )
int count( QRegExp  rx)
int count( QRegularExpression  re)
const_reverse_iterator crbegin(void)
const_reverse_iterator crend(void)
QChar * data(void)
 QChar * data(void)
iterator end(void)
const_iterator end(void)
bool endsWith( QString  s, Qt::CaseSensitivity cs )
bool endsWith( QStringRef  s, Qt::CaseSensitivity cs )
bool endsWith(QLatin1String s, Qt::CaseSensitivity cs )
bool endsWith(QChar c, Qt::CaseSensitivity cs )
QString fill(QChar ch, int size )
int indexOf( QString  str, int from , Qt::CaseSensitivity cs )
int indexOf(QChar ch, int from , Qt::CaseSensitivity cs )
int indexOf(QLatin1String str, int from , Qt::CaseSensitivity cs )
int indexOf( QStringRef  str, int from , Qt::CaseSensitivity cs )
int indexOf( QRegExp  rx, int from )
int indexOf(QRegExp  rx, int from )
int indexOf( QRegularExpression  re, int from )
int indexOf( QRegularExpression  re, int from, QRegularExpressionMatch *rmatch)
QString insert(int position,  QString  str)
QString insert(int position,  QChar *unicode, int size)
QString insert(int position, QChar ch)
QString insert(int position,  QStringRef  str)
QString insert(int position, QLatin1String str)
QString insert(int position,  char *str)
QString insert(int position,  QByteArray  str)
bool isEmpty(void)
bool isNull(void)
bool isRightToLeft(void)
int lastIndexOf( QString  str, int from , Qt::CaseSensitivity cs )
int lastIndexOf(QChar ch, int from , Qt::CaseSensitivity cs )
int lastIndexOf(QLatin1String str, int from , Qt::CaseSensitivity cs )
int lastIndexOf( QStringRef  str, int from , Qt::CaseSensitivity cs )
int lastIndexOf( QRegExp  rx, int from )
int lastIndexOf(QRegExp  rx, int from )
int lastIndexOf( QRegularExpression  re, int from )
int lastIndexOf( QRegularExpression  re, int from, QRegularExpressionMatch *rmatch)
QString left(int n)
QString leftJustified(int width, QChar fill , bool truncate )
QStringRef leftRef(int n)
int length(void)
int localeAwareCompare( QString  other)
int localeAwareCompare( QStringRef  other)
QString mid(int position, int n )
QStringRef midRef(int position, int n )
QString normalized(NormalizationForm mode, QChar::UnicodeVersion version )
QString prepend( QString  str)
QString prepend( QChar *str, int len)
QString prepend(QChar ch)
QString prepend( QStringRef  str)
QString prepend(QLatin1String str)
QString prepend( char *str)
QString prepend( QByteArray  ba)
void push_back( QString  other)
void push_back(QChar ch)
void push_front( QString  other)
void push_front(QChar ch)
reverse_iterator rbegin(void)
const_reverse_iterator rbegin(void)
QString remove(int position, int n)
QString remove(QChar ch, Qt::CaseSensitivity cs )
QString remove( QString  str, Qt::CaseSensitivity cs )
QString remove( QRegExp  rx)
QString remove( QRegularExpression  re)
reverse_iterator rend(void)
const_reverse_iterator rend(void)
QString repeated(int times)
QString replace(int position, int n,  QString  after)
QString replace(int position, int n,  QChar *unicode, int size)
QString replace(int position, int n, QChar after)
QString replace(QChar before, QChar after, Qt::CaseSensitivity cs )
QString replace( QChar *before, int blen,  QChar *after, int alen, Qt::CaseSensitivity cs )
QString replace(QLatin1String before, QLatin1String after, Qt::CaseSensitivity cs )
QString replace(QLatin1String before,  QString  after, Qt::CaseSensitivity cs )
QString replace( QString  before, QLatin1String after, Qt::CaseSensitivity cs )
QString replace( QString  before,  QString  after, Qt::CaseSensitivity cs )
QString replace(QChar ch,  QString  after, Qt::CaseSensitivity cs )
QString replace(QChar c, QLatin1String after, Qt::CaseSensitivity cs )
QString replace( QRegExp  rx,  QString  after)
QString replace( QRegularExpression  re,  QString  after)
void reserve(int size)
void resize(int size)
void resize(int size, QChar fillChar)
QString right(int n)
QString rightJustified(int width, QChar fill , bool truncate )
QStringRef rightRef(int n)
QString section(QChar sep, int start, int end , SectionFlags flags )
QString section( QString  sep, int start, int end , SectionFlags flags )
QString section( QRegExp  reg, int start, int end , SectionFlags flags )
QString section( QRegularExpression  re, int start, int end , SectionFlags flags )
QString setNum(int n, int base )
QString setNum(ushort n, int base )
QString setNum(short n, int base )
QString setNum(uint n, int base )
QString setNum(long n, int base )
QString setNum(ulong n, int base )
QString setNum(qlonglong n, int base )
QString setNum(qulonglong n, int base )
QString setNum(float n, char format , int precision )
QString setNum(double n, char format , int precision )
QString setRawData( QChar *unicode, int size)
QString setUnicode( QChar *unicode, int size)
QString setUtf16( ushort *unicode, int size)
QString simplified(void)
int size(void)
QVector<QStringRef> splitRef( QString  sep, SplitBehavior behavior , Qt::CaseSensitivity cs )
QVector<QStringRef> splitRef(QChar sep, SplitBehavior behavior , Qt::CaseSensitivity cs )
QVector<QStringRef> splitRef( QRegExp  rx, SplitBehavior behavior )
QVector<QStringRef> splitRef( QRegularExpression  re, SplitBehavior behavior )
void squeeze(void)
bool startsWith( QString  s, Qt::CaseSensitivity cs )
bool startsWith( QStringRef  s, Qt::CaseSensitivity cs )
bool startsWith(QLatin1String s, Qt::CaseSensitivity cs )
bool startsWith(QChar c, Qt::CaseSensitivity cs )
void swap(QString  other)
CFStringRef toCFString(void)
QString toCaseFolded(void)
double toDouble(bool *ok )
float toFloat(bool *ok )
QString toHtmlEscaped(void)
int toInt(bool *ok , int base )
QByteArray toLatin1(void)
QByteArray toLocal8Bit(void)
long toLong(bool *ok , int base )
qlonglong toLongLong(bool *ok , int base )
QString toLower(void)
NSString * toNSString(void)
short toShort(bool *ok , int base )
std::string toStdString(void)
std::u16string toStdU16String(void)
std::u32string toStdU32String(void)
std::wstring toStdWString(void)
uint toUInt(bool *ok , int base )
ulong toULong(bool *ok , int base )
qulonglong toULongLong(bool *ok , int base )
ushort toUShort(bool *ok , int base )
QVector<uint> toUcs4(void)
QString toUpper(void)
QByteArray toUtf8(void)
int toWCharArray(wchar_t *array)
QString trimmed(void)
void truncate(int position)
ushort * utf16(void)
</comment>

QStringList split( QString  sep, QString::SplitBehavior behavior , Qt::CaseSensitivity cs )
QStringList split@2(QChar sep, QString::SplitBehavior behavior , Qt::CaseSensitivity cs )
QStringList split@3( QRegExp  rx, QString::SplitBehavior behavior )
QStringList split@4( QRegularExpression  re, QString::SplitBehavior behavior )

QChar * unicode(void)
QString number(ulong n, int base)

<class>
name: QProcess
para: QObject *
parent: QIODevice
codename: GProcess
passvmpointer
</class>

QStringList arguments(void)
void closeReadChannel(QProcess::ProcessChannel channel)
void closeWriteChannel(void)
QProcess::ProcessError error(void)
int exitCode(void)
QProcess::ExitStatus exitStatus(void)
QProcess::InputChannelMode inputChannelMode(void)
QProcess::ProcessChannelMode processChannelMode(void)
QProcessEnvironment processEnvironment(void)
QString program(void)
QByteArray readAllStandardError(void)
QByteArray readAllStandardOutput(void)
QProcess::ProcessChannel readChannel(void)
void setArguments( QStringList  arguments)
void setInputChannelMode(QProcess::InputChannelMode mode)
void setProcessChannelMode(QProcess::ProcessChannelMode mode)
void setProcessEnvironment( QProcessEnvironment  environment)
void setProgram( QString  program)
void setReadChannel(QProcess::ProcessChannel channel)
void setStandardErrorFile( QString  fileName, QIODevice::OpenMode mode )
void setStandardInputFile( QString  fileName)
void setStandardOutputFile( QString  fileName, QIODevice::OpenMode mode )
void setStandardOutputProcess(QProcess *destination)
void setWorkingDirectory( QString  dir)
void start( QString  program,  QStringList  arguments, QIODevice::OpenMode mode )
void start@2( QString  command, QIODevice::OpenMode mode )
void start@3(QIODevice::OpenMode mode )
QProcess::ProcessState state(void)
bool waitForFinished(int msecs )
bool waitForStarted(int msecs )
QString workingDirectory(void)

void kill(void)
void terminate(void)

void setreadyReadStandardErrorEvent(const char *)
void setreadyReadStandardOutputEvent(const char *)

const char *getreadyReadStandardErrorEvent(void)
const char *getreadyReadStandardOutputEvent(void)

<class>
name: QMdiArea
para: QWidget *
parent: QAbstractScrollArea
</class>

QMdiArea::WindowOrder activationOrder(void)
QMdiSubWindow * activeSubWindow(void)
QMdiSubWindow * addSubWindow(QWidget * widget, Qt::WindowFlags windowFlags )
QBrush background(void)
QMdiSubWindow * currentSubWindow(void)
bool documentMode(void)
void removeSubWindow(QWidget * widget)
void setActivationOrder(QMdiArea::WindowOrder order)
void setBackground( QBrush   background)
void setDocumentMode(bool enabled)
void setOption(QMdiArea::AreaOption option, bool on )
void setTabPosition(QTabWidget::TabPosition position)
void setTabShape(QTabWidget::TabShape shape)
void setTabsClosable(bool closable)
void setTabsMovable(bool movable)
void setViewMode(QMdiArea::ViewMode mode)
QList<QMdiSubWindow *> subWindowList(QMdiArea::WindowOrder order )
QTabWidget::TabPosition tabPosition(void)
QTabWidget::TabShape tabShape(void)
bool tabsClosable(void)
bool tabsMovable(void)
bool testOption(QMdiArea::AreaOption option)
QMdiArea::ViewMode viewMode(void)
void activateNextSubWindow(void)
void activatePreviousSubWindow(void)
void cascadeSubWindows(void)
void closeActiveSubWindow(void)
void closeAllSubWindows(void)
void setActiveSubWindow(QMdiSubWindow * window)
void tileSubWindows(void)

<class>
name: QMdiSubWindow
para: QWidget *
parent: QWidget
</class>

bool isShaded(void)
int keyboardPageStep(void)
int keyboardSingleStep(void)
QMdiArea * mdiArea(void)
void setKeyboardPageStep(int step)
void setKeyboardSingleStep(int step)
void setOption(QMdiSubWindow::SubWindowOption option, bool on )
void setSystemMenu(QMenu * systemMenu)
void setWidget(QWidget * widget)
QMenu * systemMenu(void)
bool testOption(QMdiSubWindow::SubWindowOption option)
QWidget * widget(void)

void showShaded(void)
void showSystemMenu(void)

<class>
name: QCursor
para: void
</class>

QBitmap *bitmap(void)
QPoint hotSpot(void)
QBitmap *mask(void)
QPixmap pixmap(void)
void setShape(Qt::CursorShape shape)
Qt::CursorShape shape(void)
QPoint pos(void)
QPoint pos@2(QScreen *)
void setPos(int x, int y)
void setPos@2(QScreen *screen, int x, int y)
void setPos@3(QPoint)
void setPos@4(QScreen *screen, QPoint)


<class>
name: QListView
para: QWidget *
parent: QAbstractItemView
</class>

int  batchSize(void)
void  clearPropertyFlags(void)
QListView::Flow  flow(void)
QSize  gridSize(void)
bool  isRowHidden(int row)
bool  isSelectionRectVisible(void)
bool  isWrapping(void)
QListView::LayoutMode  layoutMode(void)
int  modelColumn(void)
QListView::Movement  movement(void)
QListView::ResizeMode  resizeMode(void)
void  setBatchSize(int batchSize)
void  setFlow(QListView::Flow flow)
void  setGridSize( QSize   size)
void  setLayoutMode(QListView::LayoutMode mode)
void  setModelColumn(int column)
void  setMovement(QListView::Movement movement)
void  setResizeMode(QListView::ResizeMode mode)
void  setRowHidden(int row, bool hide)
void  setSelectionRectVisible(bool show)
void  setSpacing(int space)
void  setUniformItemSizes(bool enable)
void  setViewMode(QListView::ViewMode mode)
void  setWordWrap(bool on)
void  setWrapping(bool enable)
int  spacing(void)
bool  uniformItemSizes(void)
QListView::ViewMode  viewMode(void)
bool  wordWrap(void)

<filter> (iswindows() and sysget("RINGQT_ANDROID") = "")

<class>
name: QAxObject
para: QString
parent: QAxBase
</class>

<class>
name: QAxBase
para: QWidget *
parent: QObject
abstract
</class>

QVariant asVariant(void)
QString control(void)
void disableClassInfo(void)
void disableEventSink(void)
void disableMetaObject(void)
QVariant dynamicCall( char *function)
QVariant dynamicCall@2( char *function,QString)
QString generateDocumentation(void)
bool isNull(void)
QAxObject * querySubObject( char *name)
bool setControl( QString  )
QStringList verbs(void)

<comment>
QAxBase::PropertyBag propertyBag(void)
void setPropertyBag(QAxBase::PropertyBag bag)
long queryInterface( QUuid  uuid, void **iface)
</comment>

</filter>

<class>
name: QUuid
para: void
</class>

QString toString(void) 


<class>
name: QToolButton
para: QWidget *
parent: QAbstractButton
codename: GToolButton
passvmpointer
</class>

Qt::ArrowType arrowType(void)
bool autoRaise(void)
QAction * defaultAction(void)
QMenu * menu(void)
QToolButton::ToolButtonPopupMode popupMode(void)
void setArrowType(Qt::ArrowType type)
void setAutoRaise(bool enable)
void setMenu(QMenu * menu)
void setPopupMode(QToolButton::ToolButtonPopupMode mode)
Qt::ToolButtonStyle toolButtonStyle(void)
void setDefaultAction(QAction * action)
void setToolButtonStyle(Qt::ToolButtonStyle style)
void showMenu(void)

void settriggeredEvent(const char *)
const char *gettriggeredEvent(void)

void setClickEvent(const char *)
const char *getClickEvent(void)

<filter> (sysget("RINGQT_ANDROID") = "")

<class>
name: QSerialPort
para: QObject *
parent: QIODevice
codename: GSerialPort
passvmpointer
</class>

<runcode>
aEnumTypes + "QSerialPort::BaudRate"
aEnumTypes + "QSerialPort::DataBits"
aEnumTypes + "QSerialPort::Direction"
aEnumTypes + "QSerialPort::Directions"
aEnumTypes + "QSerialPort::FlowControl"
aEnumTypes + "QSerialPort::Parity"
aEnumTypes + "QSerialPort::PinoutSignal"
aEnumTypes + "QSerialPort::PinoutSignals"
aEnumTypes + "QSerialPort::SerialPortError"
aEnumTypes + "QSerialPort::StopBits"
</runcode>

qint32 baudRate(QSerialPort::Directions directions)
bool clear(QSerialPort::Directions directions)
void clearError(void)
QSerialPort::DataBits dataBits(void)
QSerialPort::SerialPortError error(void)
QSerialPort::FlowControl flowControl(void)
bool flush(void)
void *handle(void)
bool isDataTerminalReady(void)
bool isRequestToSend(void)
QSerialPort::Parity parity(void)
QSerialPort::PinoutSignals pinoutSignals(void)
QString portName(void)
qint64 readBufferSize(void)
bool setBaudRate(qint32 baudRate, QSerialPort::Directions directions)
bool setBreakEnabled(bool set)
bool setDataBits(QSerialPort::DataBits dataBits)
bool setDataTerminalReady(bool set)
bool setFlowControl(QSerialPort::FlowControl flowControl)
bool setParity(QSerialPort::Parity parity)
void setPort(QSerialPortInfo serialPortInfo)
void setPortName(QString name)
void setReadBufferSize(qint64 size)
bool setRequestToSend(bool set)
bool setStopBits(QSerialPort::StopBits stopBits)
QSerialPort::StopBits stopBits(void)

void setbaudRateChangedEvent(const char *)
void setbreakEnabledChangedEvent(const char *)
void setdataBitsChangedEvent(const char *)
void setdataTerminalReadyChangedEvent(const char *)
void seterrorEvent(const char *)
void setflowControlChangedEvent(const char *)
void setparityChangedEvent(const char *)
void setrequestToSendChangedEvent(const char *)
void setstopBitsChangedEvent(const char *)

const char *getbaudRateChangedEvent(void)
const char *getbreakEnabledChangedEvent(void)
const char *getdataBitsChangedEvent(void)
const char *getdataTerminalReadyChangedEvent(void)
const char *geterrorEvent(void)
const char *getflowControlChangedEvent(void)
const char *getparityChangedEvent(void)
const char *getrequestToSendChangedEvent(void)
const char *getstopBitsChangedEvent(void)


<class>
name: QSerialPortInfo
para: void
</class>

QString description(void)
bool hasProductIdentifier(void)
bool hasVendorIdentifier(void)
bool isBusy(void)
bool isNull(void)
QString manufacturer(void)
QString portName(void)
quint16 productIdentifier(void)
void swap(QSerialPortInfo other)
QString systemLocation(void)
quint16 vendorIdentifier(void)

</filter>


<class>
name: QStringRef
para: void
</class>


QStringRef appendTo(QString * string)
QChar at(int position)
void clear(void)
<comment>
int compare(QString other, Qt::CaseSensitivity cs)
</comment>
int compare@2(QStringRef other, Qt::CaseSensitivity cs)
int compare@3(QLatin1String other, Qt::CaseSensitivity cs)
QChar * constData(void)
bool contains(QString str, Qt::CaseSensitivity cs)
bool contains@2(QChar ch, Qt::CaseSensitivity cs)
bool contains@3(QStringRef str, Qt::CaseSensitivity cs)
bool contains@4(QLatin1String str, Qt::CaseSensitivity cs)
int count(void)
int count@2(QString str, Qt::CaseSensitivity cs)
int count@3(QChar ch, Qt::CaseSensitivity cs)
int count@4(QStringRef str, Qt::CaseSensitivity cs)
QChar * data(void)
bool endsWith(QString str, Qt::CaseSensitivity cs)
bool endsWith@2(QChar ch, Qt::CaseSensitivity cs)
bool endsWith@3(QLatin1String str, Qt::CaseSensitivity cs)
bool endsWith@4(QStringRef str, Qt::CaseSensitivity cs)
int indexOf(QString str, int from, Qt::CaseSensitivity cs)
int indexOf@2(QLatin1String str, int from, Qt::CaseSensitivity cs)
int indexOf@3(QChar ch, int from, Qt::CaseSensitivity cs)
int indexOf@4(QStringRef str, int from, Qt::CaseSensitivity cs)
bool isEmpty(void)
bool isNull(void)
int lastIndexOf(QString str, int from, Qt::CaseSensitivity cs)
int lastIndexOf@2(QChar ch, int from, Qt::CaseSensitivity cs)
int lastIndexOf@3(QLatin1String str, int from, Qt::CaseSensitivity cs)
int lastIndexOf@4(QStringRef str, int from, Qt::CaseSensitivity cs)
int length(void)
int localeAwareCompare(QString other)
int localeAwareCompare@2(QStringRef other)
int position(void)
int size(void)
bool startsWith(QString str, Qt::CaseSensitivity cs)
bool startsWith@2(QLatin1String str, Qt::CaseSensitivity cs)
bool startsWith@3(QStringRef str, Qt::CaseSensitivity cs)
bool startsWith@4(QChar ch, Qt::CaseSensitivity cs)
QString * string(void)
QByteArray toLatin1(void)
QByteArray toLocal8Bit(void)
QString toString(void)
QVector<uint> toUcs4(void)
QByteArray toUtf8(void)
QChar * unicode(void)
int compare@4(QStringRef s1, QString s2, Qt::CaseSensitivity cs)
int compare@5(QStringRef s1, QStringRef s2, Qt::CaseSensitivity cs)
int compare@6(QStringRef s1, QLatin1String s2, Qt::CaseSensitivity cs)
int localeAwareCompare@3(QStringRef s1, QString s2)
int localeAwareCompare@4(QStringRef s1, QStringRef s2)

<class>
name: QMutex
para: QMutex::RecursionMode
</class>

bool isRecursive(void)
void lock(void)
void unlock(void)

<class>
name: QMutexLocker
para: QMutex *
</class>

QMutex * mutex(void)
void relock(void)
void unlock(void)

<class>
name: QBuffer
para: QObject *
parent: QIODevice
</class>

QByteArray buffer(void)
QByteArray data(void)
void setBuffer(QByteArray *byteArray)
void setData(QByteArray data)
void setData@2(char *data, int size)

<class>
name: QBluetoothAddress
para: void
</class>

void clear(void)
bool isNull(void)
QString toString(void)
quint64 toUInt64(void)

<class>
name: QBluetoothDeviceDiscoveryAgent
para: QObject *
codename: GBluetoothDeviceDiscoveryAgent
passvmpointer
</class>

QList<QBluetoothDeviceInfo> discoveredDevices(void)
QBluetoothDeviceDiscoveryAgent::Error error(void)
QString errorString(void)
QBluetoothDeviceDiscoveryAgent::InquiryType inquiryType(void)
bool isActive(void)
void setInquiryType(QBluetoothDeviceDiscoveryAgent::InquiryType type)
void start(void)
void stop(void)

void setcanceledEvent(const char *)
void setdeviceDiscoveredEvent(const char *)
void seterrorEvent(const char *)
void setfinishedEvent(const char *)

const char *getcanceledEvent(void)
const char *getdeviceDiscoveredEvent(void)
const char *geterrorEvent(void)
const char *getfinishedEvent(void)

<class>
name: QBluetoothDeviceInfo
para: void
</class>

QBluetoothAddress address(void)
<comment>
QBluetoothDeviceInfo::CoreConfigurations coreConfigurations(void)
QBluetoothUuid deviceUuid(void)
</comment>
bool isCached(void)
bool isValid(void)
QBluetoothDeviceInfo::MajorDeviceClass majorDeviceClass(void)
quint8 minorDeviceClass(void)
QString name(void)
qint16 rssi(void)
QBluetoothDeviceInfo::ServiceClasses serviceClasses(void)
QList<QBluetoothUuid> serviceUuids(QBluetoothDeviceInfo::DataCompleteness *completeness)
QBluetoothDeviceInfo::DataCompleteness serviceUuidsCompleteness(void)
void setCached(bool cached)
<comment>
void setCoreConfigurations(QBluetoothDeviceInfo::CoreConfigurations coreConfigs)
void setDeviceUuid(QBluetoothUuid uuid)
</comment>
void setRssi(qint16 signal)
void setServiceUuids(QList<QBluetoothUuid> uuids, QBluetoothDeviceInfo::DataCompleteness completeness)

<class>
name: QBluetoothHostInfo
para: void
</class>

QBluetoothAddress address(void)
QString name(void)
void setAddress(QBluetoothAddress address)
void setName(QString name)

<class>
name: QBluetoothLocalDevice
para: QObject *
codename: GBluetoothLocalDevice
passvmpointer
</class>

QBluetoothAddress address(void)
<comment>
QList<QBluetoothAddress> connectedDevices(void)
<comment>
QBluetoothLocalDevice::HostMode hostMode(void)
bool isValid(void)
QString name(void)
QBluetoothLocalDevice::Pairing pairingStatus(QBluetoothAddress address)
void powerOn(void)
void requestPairing(QBluetoothAddress address, QBluetoothLocalDevice::Pairing pairing)
void setHostMode(QBluetoothLocalDevice::HostMode mode)
void pairingConfirmation(bool accept)
QList<QBluetoothHostInfo> allDevices(void)

void setdeviceConnectedEvent(const char *)
void setdeviceDisconnectedEvent(const char *)
void seterrorEvent(const char *)
void sethostModeStateChangedEvent(const char *)
void setpairingDisplayConfirmationEvent(const char *)
void setpairingDisplayPinCodeEvent(const char *)
void setpairingFinishedEvent(const char *)

const char *getdeviceConnectedEvent(void)
const char *getdeviceDisconnectedEvent(void)
const char *geterrorEvent(void)
const char *gethostModeStateChangedEvent(void)
const char *getpairingDisplayConfirmationEvent(void)
const char *getpairingDisplayPinCodeEvent(void)
const char *getpairingFinishedEvent(void)

<class>
name: QBluetoothServer
para: QBluetoothServiceInfo::Protocol,QObject *
parent: QObject
codename: GBluetoothServer
passvmpointer
</class>


void close(void)
QBluetoothServer::Error error(void)
bool hasPendingConnections(void)
bool isListening(void)
bool listen(QBluetoothAddress address, quint16 port)
QBluetoothServiceInfo listen@2(QBluetoothUuid uuid, QString serviceName))
int maxPendingConnections(void)
QBluetoothSocket * nextPendingConnection(void)
QBluetooth::SecurityFlags securityFlags(void)
QBluetoothAddress serverAddress(void)
quint16 serverPort(void)
QBluetoothServiceInfo::Protocol serverType(void)
void setMaxPendingConnections(int numConnections)
void setSecurityFlags(QBluetooth::SecurityFlags security)

void seterrorEvent(const char *)
void setnewConnectionEvent(const char *)

const char *geterrorEvent(void)
const char *getnewConnectionEvent(void)

<class>
name: QBluetoothServiceDiscoveryAgent
para: QObject *
parent: QObject
codename: GBluetoothServiceDiscoveryAgent
passvmpointer
</class>

QList<QBluetoothServiceInfo> discoveredServices(void)
QBluetoothServiceDiscoveryAgent::Error error(void)
QString errorString(void)
bool isActive(void)
QBluetoothAddress remoteAddress(void)
bool setRemoteAddress(QBluetoothAddress address)
void setUuidFilter(QList<QBluetoothUuid> uuids)
void setUuidFilter@2(QBluetoothUuid uuid)
QList<QBluetoothUuid> uuidFilter(void)
void clear(void)
void start(QBluetoothServiceDiscoveryAgent::DiscoveryMode mode)
void stop(void)

void setcanceledEvent(const char *)
void seterrorEvent(const char *)
void setfinishedEvent(const char *)
void setserviceDiscoveredEvent(const char *)

const char *getcanceledEvent(void)
const char *geterrorEvent(void)
const char *getfinishedEvent(void)
const char *getserviceDiscoveredEvent(void)

<class>
name: QBluetoothServiceInfo
para: void
</class>



QVariant attribute(quint16 attributeId)
QList<quint16> attributes(void)
bool contains(quint16 attributeId)
QBluetoothDeviceInfo device(void)
bool isComplete(void)
bool isRegistered(void)
bool isValid(void)
QBluetoothServiceInfo::Sequence protocolDescriptor(QBluetoothUuid::ProtocolUuid protocol)
int protocolServiceMultiplexer(void)
bool registerService(QBluetoothAddress localAdapter))
void removeAttribute(quint16 attributeId)
int serverChannel(void)
quint8 serviceAvailability(void)
QList<QBluetoothUuid> serviceClassUuids(void)
QString serviceDescription(void)
QString serviceName(void)
QString serviceProvider(void)
QBluetoothUuid serviceUuid(void)
void setAttribute(quint16 attributeId, QVariant value)
void setAttribute@2(quint16 attributeId, QBluetoothUuid value)
void setAttribute@3(quint16 attributeId, QBluetoothServiceInfo::Sequence value)
void setDevice(QBluetoothDeviceInfo device)
void setServiceAvailability(quint8 availability)
void setServiceDescription(QString description)
void setServiceName(QString name)
void setServiceProvider(QString provider)
void setServiceUuid(QBluetoothUuid uuid)
bool unregisterService(void)

<class>
name: QBluetoothSocket
para: QBluetoothServiceInfo::Protocol,QObject *
parent: QIODevice
codename: GBluetoothSocket
passvmpointer
</class>

void abort(void)
void connectToService(QBluetoothServiceInfo service, QIODevice::OpenMode openMode)
void connectToService@2(QBluetoothAddress address, QBluetoothUuid uuid, QIODevice::OpenMode openMode)
void connectToService@3(QBluetoothAddress address, quint16 port, QIODevice::OpenMode openMode)
void disconnectFromService(void)
QBluetoothSocket::SocketError error(void)
QString errorString(void)
QBluetoothAddress localAddress(void)
QString localName(void)
quint16 localPort(void)
QBluetoothAddress peerAddress(void)
QString peerName(void)
quint16 peerPort(void)
bool setSocketDescriptor(int socketDescriptor, QBluetoothServiceInfo::Protocol socketType, QBluetoothSocket::SocketState socketState, QIODevice::OpenMode openMode)
int socketDescriptor(void)
QBluetoothServiceInfo::Protocol socketType(void)
QBluetoothSocket::SocketState state(void)

void setconnectedEvent(const char *)
void setdisconnectedEvent(const char *)
void seterrorEvent(const char *)
void setstateChangedEvent(const char *)

const char *getconnectedEvent(void)
const char *getdisconnectedEvent(void)
const char *geterrorEvent(void)
const char *getstateChangedEvent(void)

<class>
name: QBluetoothTransferManager
para: QObject *
parent: QObject
codename: GBluetoothTransferManager
passvmpointer
</class>


QBluetoothTransferReply * put(QBluetoothTransferRequest request, QIODevice *data)
void setfinishedEvent(const char *)
const char *getfinishedEvent(void)

<class>
name: QBluetoothTransferReply
para: QObject *
parent: QObject
codename: GBluetoothTransferReply
passvmpointer
abstract
</class>

QBluetoothTransferManager * manager(void)
QBluetoothTransferRequest request(void)
void abort(void)

void seterrorEvent(const char *)
void setfinishedEvent(const char *)
void settransferProgressEvent(const char *)

const char *geterrorEvent(void)
const char *getfinishedEvent(void)
const char *gettransferProgressEvent(void)

<class>
name: QBluetoothTransferRequest
para: QBluetoothAddress
</class>

QBluetoothAddress address(void)
QVariant attribute(QBluetoothTransferRequest::Attribute code, QVariant defaultValue))
void setAttribute(QBluetoothTransferRequest::Attribute code, QVariant value)

<class>
name: QBluetoothUuid
para: void
parent: QUuid
</class>

int minimumSize(void)
quint16 toUInt16(bool *ok)
quint32 toUInt32(bool *ok)
quint128 toUInt128(void)
<comment>
QString characteristicToString(QBluetoothUuid::CharacteristicType uuid)
QString descriptorToString(QBluetoothUuid::DescriptorType uuid)
QString protocolToString(QBluetoothUuid::ProtocolUuid uuid)
QString serviceClassToString(QBluetoothUuid::ServiceClassUuid uuid)
</comment>

<class>
name: QDateTime
para: void
</class>

QDateTime addDays(int ndays)
QDateTime addMSecs(qint64 msecs)
QDateTime addMonths(int nmonths)
QDateTime addSecs(int s)
QDateTime addYears(int nyears)
QDate date(void)
int daysTo(QDateTime other)
bool isNull(void)
bool isValid(void)
qint64 msecsTo(QDateTime other)
int secsTo(QDateTime other)
void setDate(QDate date)
void setMSecsSinceEpoch(qint64 msecs)
void setTime(QTime time)
void setTimeSpec(Qt::TimeSpec spec)
void setTime_t(uint seconds)
QTime time(void)
Qt::TimeSpec timeSpec(void)
QDateTime toLocalTime(void)
qint64 toMSecsSinceEpoch(void)
QString toString(QString format)
QString toString@2(Qt::DateFormat format)
QDateTime toTimeSpec(Qt::TimeSpec specification)
uint toTime_t(void)
QDateTime toUTC(void)
QDateTime currentDateTime(void)
QDateTime currentDateTimeUtc(void)
qint64 currentMSecsSinceEpoch(void)
QDateTime fromMSecsSinceEpoch(qint64 msecs)
QDateTime fromString(QString string, Qt::DateFormat format)
QDateTime fromString@2(QString string, QString format)
QDateTime fromTime_t(uint seconds)

<class>
name: QScreen
abstract
</class>

int angleBetween(Qt::ScreenOrientation a, Qt::ScreenOrientation b)
QRect availableGeometry(void)
QSize availableSize(void)
QRect availableVirtualGeometry(void)
QSize availableVirtualSize(void)
int depth(void)
qreal devicePixelRatio(void)
QRect geometry(void)
QPixmap grabWindow(int window, int x, int y, int width, int height)
QPixmap grabWindow@2(int window)
QPlatformScreen * handle(void)
bool isLandscape(Qt::ScreenOrientation o)
bool isPortrait(Qt::ScreenOrientation o)
qreal logicalDotsPerInch(void)
qreal logicalDotsPerInchX(void)
qreal logicalDotsPerInchY(void)
QRect mapBetween(Qt::ScreenOrientation a, Qt::ScreenOrientation b, QRect rect)
QString name(void)
Qt::ScreenOrientation nativeOrientation(void)
Qt::ScreenOrientation orientation(void)
Qt::ScreenOrientations orientationUpdateMask(void)
qreal physicalDotsPerInch(void)
qreal physicalDotsPerInchX(void)
qreal physicalDotsPerInchY(void)
QSizeF physicalSize(void)
Qt::ScreenOrientation primaryOrientation(void)
qreal refreshRate(void)
void setOrientationUpdateMask(Qt::ScreenOrientations mask)
QSize size(void)
QTransform transformBetween(Qt::ScreenOrientation a, Qt::ScreenOrientation b, QRect target)

<class>
name: QWindow
para: QScreen *
parent: QObject
codename: GWindow
passvmpointer
</class>

<runcode>
 aEnumTypes + "QWindow::AncestorMode"
 aEnumTypes + "QWindow::Visibility"
</runcode>

QSize baseSize(void)
Qt::ScreenOrientation contentOrientation(void)
void create(void)
QCursor cursor(void)
void destroy(void)
qreal devicePixelRatio(void)
QString filePath(void)
Qt::WindowFlags flags(void)
QObject * focusObject(void)
QRect frameGeometry(void)
QMargins frameMargins(void)
QPoint framePosition(void)
QRect geometry(void)
int height(void)
QIcon icon(void)
bool isActive(void)
bool isAncestorOf(QWindow *child, QWindow::AncestorMode mode)
bool isExposed(void)
bool isModal(void)
bool isTopLevel(void)
bool isVisible(void)
QPoint mapFromGlobal(QPoint pos)
QPoint mapToGlobal(QPoint pos)
QRegion mask(void)
int maximumHeight(void)
QSize maximumSize(void)
int maximumWidth(void)
int minimumHeight(void)
QSize minimumSize(void)
int minimumWidth(void)
Qt::WindowModality modality(void)
qreal opacity(void)
QPoint position(void)
void reportContentOrientationChange(Qt::ScreenOrientation orientation)
QSurfaceFormat requestedFormat(void)
void resize(QSize newSize)
void resize@2(int w, int h)
QScreen * screen(void)
void setBaseSize(QSize size)
void setCursor(QCursor cursor)
void setFilePath(QString filePath)
void setFlags(Qt::WindowFlags flags)
void setFormat(QSurfaceFormat format)
void setFramePosition(QPoint point)
void setGeometry(int posx, int posy, int w, int h)
void setGeometry@2(QRect rect)
void setIcon(QIcon icon)
bool setKeyboardGrabEnabled(bool grab)
void setMask(QRegion region)
void setMaximumSize(QSize size)
void setMinimumSize(QSize size)
void setModality(Qt::WindowModality modality)
bool setMouseGrabEnabled(bool grab)
void setOpacity(qreal level)
void setParent(QWindow *parent)
void setPosition(QPoint pt)
void setPosition@2(int posx, int posy)
void setScreen(QScreen *newScreen)
void setSizeIncrement(QSize size)
void setTransientParent(QWindow *parent)
void setVisibility(QWindow::Visibility v)
void setWindowState(Qt::WindowState state)
QSize sizeIncrement(void)
QString title(void)
QWindow * transientParent(void)
Qt::WindowType type(void)
void unsetCursor(void)
QWindow::Visibility visibility(void)
int width(void)
WId winId(void)
Qt::WindowState windowState(void)
int x(void)
int y(void)
void alert(int msec)
bool close(void)
void hide(void)
void lower(void)
void raise(void)
void requestActivate(void)
void setHeight(int arg)
void setMaximumHeight(int h)
void setMaximumWidth(int w)
void setMinimumHeight(int h)
void setMinimumWidth(int w)
void setTitle(QString )
void setVisible(bool visible)
void setWidth(int arg)
void setX(int arg)
void setY(int arg)
void show(void)
void showFullScreen(void)
void showMaximized(void)
void showMinimized(void)
void showNormal(void)
QWindow * fromWinId(WId id)

void setactiveChangedEvent(const char *)
void setcontentOrientationChangedEvent(const char *)
void setfocusObjectChangedEvent(const char *)
void setheightChangedEvent(const char *)
void setmaximumHeightChangedEvent(const char *)
void setmaximumWidthChangedEvent(const char *)
void setminimumHeightChangedEvent(const char *)
void setminimumWidthChangedEvent(const char *)
void setmodalityChangedEvent(const char *)
void setopacityChangedEvent(const char *)
void setscreenChangedEvent(const char *)
void setvisibilityChangedEvent(const char *)
void setvisibleChangedEvent(const char *)
void setwidthChangedEvent(const char *)
void setwindowStateChangedEvent(const char *)
void setwindowTitleChangedEvent(const char *)
void setxChangedEvent(const char *)
void setyChangedEvent(const char *)

const char *getactiveChangedEvent(void)
const char *getcontentOrientationChangedEvent(void)
const char *getfocusObjectChangedEvent(void)
const char *getheightChangedEvent(void)
const char *getmaximumHeightChangedEvent(void)
const char *getmaximumWidthChangedEvent(void)
const char *getminimumHeightChangedEvent(void)
const char *getminimumWidthChangedEvent(void)
const char *getmodalityChangedEvent(void)
const char *getopacityChangedEvent(void)
const char *getscreenChangedEvent(void)
const char *getvisibilityChangedEvent(void)
const char *getvisibleChangedEvent(void)
const char *getwidthChangedEvent(void)
const char *getwindowStateChangedEvent(void)
const char *getwindowTitleChangedEvent(void)
const char *getxChangedEvent(void)
const char *getyChangedEvent(void)

<class>
name: QGuiApplication
parent: QCoreApplication
para: int,char **
codename: GGuiApplication
passvmpointer
</class>


qreal devicePixelRatio(void)
bool isSavingSession(void)
bool isSessionRestored(void)
QString sessionId(void)
QString sessionKey(void)
QWindowList allWindows(void)
QString applicationDisplayName(void)
Qt::ApplicationState applicationState(void)
void changeOverrideCursor(QCursor cursor)
QClipboard * clipboard(void)
bool desktopSettingsAware(void)
int exec(void)
QObject * focusObject(void)
QWindow * focusWindow(void)
QFont font(void)
QInputMethod * inputMethod(void)
bool isLeftToRight(void)
bool isRightToLeft(void)
Qt::KeyboardModifiers keyboardModifiers(void)
Qt::LayoutDirection layoutDirection(void)
QWindow * modalWindow(void)
Qt::MouseButtons mouseButtons(void)
QCursor * overrideCursor(void)
QPalette palette(void)
QString platformName(void)
QPlatformNativeInterface * platformNativeInterface(void)
QScreen * primaryScreen(void)
Qt::KeyboardModifiers queryKeyboardModifiers(void)
bool quitOnLastWindowClosed(void)
void restoreOverrideCursor(void)
QList<QScreen *> screens(void)
void setApplicationDisplayName(QString name)
void setDesktopSettingsAware(bool on)
void setFont(QFont font)
void setLayoutDirection(Qt::LayoutDirection direction)
void setOverrideCursor(QCursor cursor)
void setPalette(QPalette pal)
void setQuitOnLastWindowClosed(bool quit)
QStyleHints * styleHints(void)
void sync(void)
QWindow * topLevelAt(QPoint pos)
QWindowList topLevelWindows(void)
void setapplicationDisplayNameChangedEvent(const char *)
void setapplicationStateChangedEvent(const char *)
void setcommitDataRequestEvent(const char *)
void setfocusObjectChangedEvent(const char *)
void setfocusWindowChangedEvent(const char *)
void setfontDatabaseChangedEvent(const char *)
void setlastWindowClosedEvent(const char *)
void setlayoutDirectionChangedEvent(const char *)
void setpaletteChangedEvent(const char *)
void setprimaryScreenChangedEvent(const char *)
void setsaveStateRequestEvent(const char *)
void setscreenAddedEvent(const char *)
void setscreenRemovedEvent(const char *)

const char *getapplicationDisplayNameChangedEvent(void)
const char *getapplicationStateChangedEvent(void)
const char *getcommitDataRequestEvent(void)
const char *getfocusObjectChangedEvent(void)
const char *getfocusWindowChangedEvent(void)
const char *getfontDatabaseChangedEvent(void)
const char *getlastWindowClosedEvent(void)
const char *getlayoutDirectionChangedEvent(void)
const char *getpaletteChangedEvent(void)
const char *getprimaryScreenChangedEvent(void)
const char *getsaveStateRequestEvent(void)
const char *getscreenAddedEvent(void)
const char *getscreenRemovedEvent(void)

<class>
name: QCoreApplication
parent: QObject
nonew
</class>

void installNativeEventFilter(QAbstractNativeEventFilter *filterObj)
void removeNativeEventFilter(QAbstractNativeEventFilter *filterObject)
void quit(void)
void addLibraryPath(QString path)
QString applicationDirPath(void)
QString applicationFilePath(void)
QString applicationName(void)
qint64 applicationPid(void)
QString applicationVersion(void)
QStringList arguments(void)
bool closingDown(void)
QAbstractEventDispatcher * eventDispatcher(void)
int exec(void)
void exit(int returnCode)
bool installTranslator(QTranslator *translationFile)
QCoreApplication * instance(void)
bool isQuitLockEnabled(void)
QStringList libraryPaths(void)
QString organizationDomain(void)
QString organizationName(void)
void postEvent(QObject *receiver, QEvent *event, int priority)
void processEvents(QEventLoop::ProcessEventsFlags flags)
void processEvents@2(QEventLoop::ProcessEventsFlags flags, int maxtime)
void removeLibraryPath(QString path)
void removePostedEvents(QObject *receiver, int eventType)
bool removeTranslator(QTranslator *translationFile)
bool sendEvent(QObject *receiver, QEvent *event)
void sendPostedEvents(QObject *receiver, int event_type)
void setApplicationName(QString application)
void setApplicationVersion(QString version)
void setAttribute(Qt::ApplicationAttribute attribute, bool on)
void setEventDispatcher(QAbstractEventDispatcher *eventDispatcher)
void setLibraryPaths(QStringList paths)
void setOrganizationDomain(QString orgDomain)
void setOrganizationName(QString orgName)
void setQuitLockEnabled(bool enabled)
bool startingUp(void)
bool testAttribute(Qt::ApplicationAttribute attribute)
QString translate(char *context, char *sourceText, char *disambiguation, int n)

<class>
name: QTextBrowser
para: QWidget *
parent: QTextEdit
codename: GTextBrowser
passvmpointer
</class>

int backwardHistoryCount(void)
void clearHistory(void)
int forwardHistoryCount(void)
QString historyTitle(int i)
QUrl historyUrl(int i)
bool isBackwardAvailable(void)
bool isForwardAvailable(void)
bool openExternalLinks(void)
bool openLinks(void)
QStringList searchPaths(void)
void setOpenExternalLinks(bool open)
void setOpenLinks(bool open)
void setSearchPaths(QStringList paths)
QUrl source(void)

void setanchorClickedEvent(const char *)
void setbackwardAvailableEvent(const char *)
void setforwardAvailableEvent(const char *)
void sethighlightedEvent(const char *)
void sethistoryChangedEvent(const char *)
void setsourceChangedEvent(const char *)

const char *getanchorClickedEvent(void)
const char *getbackwardAvailableEvent(void)
const char *getforwardAvailableEvent(void)
const char *gethighlightedEvent(void)
const char *gethistoryChangedEvent(void)
const char *getsourceChangedEvent(void)

<class>
name: QRegion
para: void
</class>

QRect boundingRect(void)
bool contains(QPoint p)
bool contains@2(QRect r)
QRegion intersected(QRegion r)
QRegion intersected@2(QRect rect)
bool intersects(QRegion region)
bool intersects@2(QRect rect)
bool isEmpty(void)
bool isNull(void)
int rectCount(void)
QVector<QRect> rects(void)
void setRects(QRect *rects, int number)
QRegion subtracted(QRegion r)
void swap(QRegion other)
void translate(int dx, int dy)
void translate@2(QPoint point)
QRegion translated(int dx, int dy)
QRegion translated@2(QPoint p)
QRegion united(QRegion r)
QRegion united@2(QRect rect)
QRegion xored(QRegion r)

<class>
name: QStackedWidget
para: QWidget *
parent: QFrame
codename: GStackedWidget
passvmpointer
</class>

int addWidget(QWidget *widget)
int count(void)
int currentIndex(void)
QWidget * currentWidget(void)
int indexOf(QWidget *widget)
int insertWidget(int index, QWidget *widget)
void removeWidget(QWidget *widget)
QWidget * widget(int index)
void setCurrentIndex(int index)
void setCurrentWidget(QWidget *widget)

void setcurrentChangedEvent(const char *)
void setwidgetRemovedEvent(const char *)

const char *getcurrentChangedEvent(void)
const char *getwidgetRemovedEvent(void)


<class>
name: QCalendarWidget
para: QWidget *
parent: QWidget
codename: GCalendarWidget
passvmpointer
</class>

int dateEditAcceptDelay(void)
QMap<QDate, QTextCharFormat> dateTextFormat(void)
QTextCharFormat dateTextFormat@2(QDate date)
Qt::DayOfWeek firstDayOfWeek(void)
QTextCharFormat headerTextFormat(void)
QCalendarWidget::HorizontalHeaderFormat horizontalHeaderFormat(void)
bool isDateEditEnabled(void)
bool isGridVisible(void)
bool isNavigationBarVisible(void)
QDate maximumDate(void)
QDate minimumDate(void)
int monthShown(void)
QDate selectedDate(void)
QCalendarWidget::SelectionMode selectionMode(void)
void setDateEditAcceptDelay(int delay)
void setDateEditEnabled(bool enable)
void setDateTextFormat(QDate date, QTextCharFormat format)
void setFirstDayOfWeek(Qt::DayOfWeek dayOfWeek)
void setHeaderTextFormat(QTextCharFormat format)
void setHorizontalHeaderFormat(QCalendarWidget::HorizontalHeaderFormat format)
void setMaximumDate(QDate date)
void setMinimumDate(QDate date)
void setSelectionMode(QCalendarWidget::SelectionMode mode)
void setVerticalHeaderFormat(QCalendarWidget::VerticalHeaderFormat format)
void setWeekdayTextFormat(Qt::DayOfWeek dayOfWeek, QTextCharFormat format)
QCalendarWidget::VerticalHeaderFormat verticalHeaderFormat(void)
QTextCharFormat weekdayTextFormat(Qt::DayOfWeek dayOfWeek)
int yearShown(void)
void setCurrentPage(int year, int month)
void setDateRange(QDate min, QDate max)
void setGridVisible(bool show)
void setNavigationBarVisible(bool visible)
void setSelectedDate(QDate date)
void showNextMonth(void)
void showNextYear(void)
void showPreviousMonth(void)
void showPreviousYear(void)
void showSelectedDate(void)
void showToday(void)

void setactivatedEvent(const char *)
void setclickedEvent(const char *)
void setcurrentPageChangedEvent(const char *)
void setselectionChangedEvent(const char *)

const char *getactivatedEvent(void)
const char *getclickedEvent(void)
const char *getcurrentPageChangedEvent(void)
const char *getselectionChangedEvent(void)

<filter> ((iswindows() or ismacosx()) and sysget("RINGQT_ANDROID") = "")

<class>
name: QOpenGLFunctions
para: void
</class>

<runcode>
aNumberTypes + "GLint"
aNumberTypes + "GLuint"
aNumberTypes + "unsigned"
aNumberTypes + "GLboolean"
aNumberTypes + "GLdouble"
aNumberTypes + "GLfloat"
aNumberTypes + "GLchar"
aNumberTypes + "GLsizeiptr"
aNumberTypes + "GLintptr"
aNumberTypes + "GLbyte"
aNumberTypes + "GLshort"
aNumberTypes + "GLubyte"
aNumberTypes + "GLushort"
aNumberTypes + "GLulong"
aNumberTypes + "GLclampd"

aEnumTypes + "GLbitfield"
aEnumTypes + "GLenum"
aEnumTypes + "GLsizei"
aEnumTypes + "GLclampf"
</runcode>

void glActiveTexture(GLenum texture)
void glAttachShader(GLuint program, GLuint shader)
void glBindAttribLocation(GLuint program, GLuint index, char *name)
void glBindBuffer(GLenum target, GLuint buffer)
void glBindFramebuffer(GLenum target, GLuint framebuffer)
void glBindRenderbuffer(GLenum target, GLuint renderbuffer)
void glBindTexture(GLenum target, GLuint texture)
void glBlendColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
void glBlendEquation(GLenum mode)
void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
void glBlendFunc(GLenum sfactor, GLenum dfactor)
void glBlendFuncSeparate(GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)
void glBufferData(GLenum target, qopengl_GLsizeiptr size, void *data, GLenum usage)
void glBufferSubData(GLenum target, qopengl_GLintptr offset, qopengl_GLsizeiptr size, void *data)
GLenum glCheckFramebufferStatus(GLenum target)
void glClear(GLbitfield mask)
void glClearColor(GLclampf red, GLclampf green, GLclampf blue, GLclampf alpha)
void glClearDepthf(GLclampf depth)
void glClearStencil(GLint s)
void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
void glCompileShader(GLuint shader)
void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, void *data)
void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, void *data)
void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
GLuint glCreateProgram(void)
GLuint glCreateShader(GLenum type)
void glCullFace(GLenum mode)
void glDeleteBuffers(GLsizei n, GLuint *buffers)
void glDeleteFramebuffers(GLsizei n, GLuint *framebuffers)
void glDeleteProgram(GLuint program)
void glDeleteRenderbuffers(GLsizei n, GLuint *renderbuffers)
void glDeleteShader(GLuint shader)
void glDeleteTextures(GLsizei n, GLuint *textures)
void glDepthFunc(GLenum func)
void glDepthMask(GLboolean flag)
void glDepthRangef(GLclampf zNear, GLclampf zFar)
void glDetachShader(GLuint program, GLuint shader)
void glDisable(GLenum cap)
void glDisableVertexAttribArray(GLuint index)
void glDrawArrays(GLenum mode, GLint first, GLsizei count)
void glDrawElements(GLenum mode, GLsizei count, GLenum type, GLvoid *indices)
void glEnable(GLenum cap)
void glEnableVertexAttribArray(GLuint index)
void glFinish(void)
void glFlush(void)
void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
void glFrontFace(GLenum mode)
void glGenBuffers(GLsizei n, GLuint *buffers)
void glGenFramebuffers(GLsizei n, GLuint *framebuffers)
void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
void glGenTextures(GLsizei n, GLuint *textures)
void glGenerateMipmap(GLenum target)
void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufsize, GLsizei *length, GLint *size, GLenum *type, char *name)
void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufsize, GLsizei *length, GLint *size, GLenum *type, char *name)
void glGetAttachedShaders(GLuint program, GLsizei maxcount, GLsizei *count, GLuint *shaders)
GLint glGetAttribLocation(GLuint program, char *name)
void glGetBooleanv(GLenum pname, GLboolean *params)
void glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
GLenum glGetError(void)
void glGetFloatv(GLenum pname, GLfloat *params)
void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
void glGetIntegerv(GLenum pname, GLint *params)
void glGetProgramInfoLog(GLuint program, GLsizei bufsize, GLsizei *length, char *infolog)
void glGetProgramiv(GLuint program, GLenum pname, GLint *params)
void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
void glGetShaderInfoLog(GLuint shader, GLsizei bufsize, GLsizei *length, char *infolog)
void glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)
void glGetShaderSource(GLuint shader, GLsizei bufsize, GLsizei *length, char *source)
void glGetShaderiv(GLuint shader, GLenum pname, GLint *params)
GLubyte * glGetString(GLenum name)
void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
void glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
GLint glGetUniformLocation(GLuint program, char *name)
void glGetUniformfv(GLuint program, GLint location, GLfloat *params)
void glGetUniformiv(GLuint program, GLint location, GLint *params)
<comment>
void glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer)
</comment>
void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
void glHint(GLenum target, GLenum mode)
GLboolean glIsBuffer(GLuint buffer)
GLboolean glIsEnabled(GLenum cap)
GLboolean glIsFramebuffer(GLuint framebuffer)
GLboolean glIsProgram(GLuint program)
GLboolean glIsRenderbuffer(GLuint renderbuffer)
GLboolean glIsShader(GLuint shader)
GLboolean glIsTexture(GLuint texture)
void glLineWidth(GLfloat width)
void glLinkProgram(GLuint program)
void glPixelStorei(GLenum pname, GLint param)
void glPolygonOffset(GLfloat factor, GLfloat units)
void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
void glReleaseShaderCompiler(void)
void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
void glSampleCoverage(GLclampf value, GLboolean invert)
void glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
void glShaderBinary(GLint n, GLuint *shaders, GLenum binaryformat, void *binary, GLint length)
<comment>
void glShaderSource(GLuint shader, GLsizei count, char **string, GLint *length)\
</comment>
void glStencilFunc(GLenum func, GLint ref, GLuint mask)
void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
void glStencilMask(GLuint mask)
void glStencilMaskSeparate(GLenum face, GLuint mask)
void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
void glStencilOpSeparate(GLenum face, GLenum fail, GLenum zfail, GLenum zpass)
void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, GLvoid *pixels)
void glTexParameterf(GLenum target, GLenum pname, GLfloat param)
void glTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
void glTexParameteri(GLenum target, GLenum pname, GLint param)
void glTexParameteriv(GLenum target, GLenum pname, GLint *params)
void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
void glUniform1f(GLint location, GLfloat x)
void glUniform1fv(GLint location, GLsizei count, GLfloat *v)
void glUniform1i(GLint location, GLint x)
void glUniform1iv(GLint location, GLsizei count, GLint *v)
void glUniform2f(GLint location, GLfloat x, GLfloat y)
void glUniform2fv(GLint location, GLsizei count, GLfloat *v)
void glUniform2i(GLint location, GLint x, GLint y)
void glUniform2iv(GLint location, GLsizei count, GLint *v)
void glUniform3f(GLint location, GLfloat x, GLfloat y, GLfloat z)
void glUniform3fv(GLint location, GLsizei count, GLfloat *v)
void glUniform3i(GLint location, GLint x, GLint y, GLint z)
void glUniform3iv(GLint location, GLsizei count, GLint *v)
void glUniform4f(GLint location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
void glUniform4fv(GLint location, GLsizei count, GLfloat *v)
void glUniform4i(GLint location, GLint x, GLint y, GLint z, GLint w)
void glUniform4iv(GLint location, GLsizei count, GLint *v)
void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUseProgram(GLuint program)
void glValidateProgram(GLuint program)
void glVertexAttrib1f(GLuint indx, GLfloat x)
void glVertexAttrib1fv(GLuint indx, GLfloat *values)
void glVertexAttrib2f(GLuint indx, GLfloat x, GLfloat y)
void glVertexAttrib2fv(GLuint indx, GLfloat *values)
void glVertexAttrib3f(GLuint indx, GLfloat x, GLfloat y, GLfloat z)
void glVertexAttrib3fv(GLuint indx, GLfloat *values)
void glVertexAttrib4f(GLuint indx, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
void glVertexAttrib4fv(GLuint indx, GLfloat *values)
void glVertexAttribPointer(GLuint indx, GLint size, GLenum type, GLboolean normalized, GLsizei stride, void *ptr)
void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
bool hasOpenGLFeature(QOpenGLFunctions::OpenGLFeature feature)
void initializeOpenGLFunctions(void)
QOpenGLFunctions::OpenGLFeatures openGLFeatures(void)

<class>
name: QOpenGLContext
para: QObject *
parent: QObject
</class>

bool create(void)
GLuint defaultFramebufferObject(void)
void doneCurrent(void)
QSet<QByteArray> extensions(void)
<comment>
QOpenGLExtraFunctions * extraFunctions(void)
</comment>
QSurfaceFormat format(void)
QOpenGLFunctions * functions(void)
QFunctionPointer getProcAddress(QByteArray procName)
QFunctionPointer getProcAddress@2(char *procName)
bool hasExtension(QByteArray extension)
bool isOpenGLES(void)
bool isValid(void)
bool makeCurrent(QSurface *surface)
QVariant nativeHandle(void)
QScreen * screen(void)
void setFormat(QSurfaceFormat format)
void setNativeHandle(QVariant handle)
void setScreen(QScreen *screen)
void setShareContext(QOpenGLContext *shareContext)
QOpenGLContext * shareContext(void)
QOpenGLContextGroup * shareGroup(void)
QSurface * surface(void)
void swapBuffers(QSurface *surface)
QAbstractOpenGLFunctions * versionFunctions(QOpenGLVersionProfile versionProfile))
TYPE * versionFunctions@2(void)
bool areSharing(QOpenGLContext *first, QOpenGLContext *second)
QOpenGLContext * currentContext(void)
QOpenGLContext * globalShareContext(void)
void * openGLModuleHandle(void)
QOpenGLContext::OpenGLModuleType openGLModuleType(void)
bool supportsThreadedOpenGL(void)

<register>
QOpenGLFunctions_3_2_Core *opengl32(void)
<register>

<code>
RING_FUNC(ring_QOpenGLContext_opengl32)
{
	QOpenGLFunctions_3_2_Core *f = QOpenGLContext::currentContext()->versionFunctions<QOpenGLFunctions_3_2_Core>();
	RING_API_RETCPOINTER(f,"QOpenGLFunctions_3_2_Core") ;
}
</code>

<class>
name: QOpenGLFunctions_3_2_Core
para: void
</class>

void glActiveTexture(GLenum texture)
void glAttachShader(GLuint program, GLuint shader)
void glBeginConditionalRender(GLuint id, GLenum mode)
void glBeginQuery(GLenum target, GLuint id)
void glBeginTransformFeedback(GLenum primitiveMode)
void glBindAttribLocation(GLuint program, GLuint index, GLchar *name)
void glBindBuffer(GLenum target, GLuint buffer)
void glBindBufferBase(GLenum target, GLuint index, GLuint buffer)
void glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)
void glBindFragDataLocation(GLuint program, GLuint color, GLchar *name)
void glBindFramebuffer(GLenum target, GLuint framebuffer)
void glBindRenderbuffer(GLenum target, GLuint renderbuffer)
void glBindTexture(GLenum target, GLuint texture)
void glBindVertexArray(GLuint array)
void glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
void glBlendEquation(GLenum mode)
void glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)
void glBlendFunc(GLenum sfactor, GLenum dfactor)
void glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)
void glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)
void glBufferData(GLenum target, GLsizeiptr size, GLvoid *data, GLenum usage)
void glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
GLenum glCheckFramebufferStatus(GLenum target)
void glClampColor(GLenum target, GLenum clamp)
void glClear(GLbitfield mask)
void glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)
void glClearBufferfv(GLenum buffer, GLint drawbuffer, GLfloat *value)
void glClearBufferiv(GLenum buffer, GLint drawbuffer, GLint *value)
void glClearBufferuiv(GLenum buffer, GLint drawbuffer, GLuint *value)
void glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)
void glClearDepth(GLdouble depth)
void glClearStencil(GLint s)
GLenum glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)
void glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)
void glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)
void glCompileShader(GLuint shader)
void glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, GLvoid *data)
void glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, GLvoid *data)
void glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, GLvoid *data)
void glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, GLvoid *data)
void glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, GLvoid *data)
void glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, GLvoid *data)
void glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)
void glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)
void glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)
void glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)
void glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)
void glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)
GLuint glCreateProgram(void)
GLuint glCreateShader(GLenum type)
void glCullFace(GLenum mode)
void glDeleteBuffers(GLsizei n, GLuint *buffers)
void glDeleteFramebuffers(GLsizei n, GLuint *framebuffers)
void glDeleteProgram(GLuint program)
void glDeleteQueries(GLsizei n, GLuint *ids)
void glDeleteRenderbuffers(GLsizei n, GLuint *renderbuffers)
void glDeleteShader(GLuint shader)
void glDeleteSync(GLsync sync)
void glDeleteTextures(GLsizei n, GLuint *textures)
void glDeleteVertexArrays(GLsizei n, GLuint *arrays)
void glDepthFunc(GLenum func)
void glDepthMask(GLboolean flag)
void glDepthRange(GLdouble nearVal, GLdouble farVal)
void glDetachShader(GLuint program, GLuint shader)
void glDisable(GLenum cap)
void glDisableVertexAttribArray(GLuint index)
void glDisablei(GLenum target, GLuint index)
void glDrawArrays(GLenum mode, GLint first, GLsizei count)
void glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount)
void glDrawBuffer(GLenum mode)
void glDrawBuffers(GLsizei n, GLenum *bufs)
void glDrawElements(GLenum mode, GLsizei count, GLenum type, GLvoid *indices)
void glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, GLvoid *indices, GLint basevertex)
void glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, GLvoid *indices, GLsizei instancecount)
void glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, GLvoid *indices, GLsizei instancecount, GLint basevertex)
void glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLvoid *indices)
void glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, GLvoid *indices, GLint basevertex)
void glEnable(GLenum cap)
void glEnableVertexAttribArray(GLuint index)
void glEnablei(GLenum target, GLuint index)
void glEndConditionalRender(void)
void glEndQuery(GLenum target)
void glEndTransformFeedback(void)
GLsync glFenceSync(GLenum condition, GLbitfield flags)
void glFinish(void)
void glFlush(void)
void glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)
void glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)
void glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)
void glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
void glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)
void glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)
void glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)
void glFrontFace(GLenum mode)
void glGenBuffers(GLsizei n, GLuint *buffers)
void glGenFramebuffers(GLsizei n, GLuint *framebuffers)
void glGenQueries(GLsizei n, GLuint *ids)
void glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)
void glGenTextures(GLsizei n, GLuint *textures)
void glGenVertexArrays(GLsizei n, GLuint *arrays)
void glGenerateMipmap(GLenum target)
void glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
void glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)
void glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)
void glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)
void glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)
void glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, GLuint *uniformIndices, GLenum pname, GLint *params)
void glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *obj)
GLint glGetAttribLocation(GLuint program, GLchar *name)
void glGetBooleani_v(GLenum target, GLuint index, GLboolean *data)
void glGetBooleanv(GLenum pname, GLboolean *params)
void glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params)
void glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)
<comment>
void glGetBufferPointerv(GLenum target, GLenum pname, GLvoid **params)
</comment>
void glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, GLvoid *data)
void glGetCompressedTexImage(GLenum target, GLint level, GLvoid *img)
void glGetDoublev(GLenum pname, GLdouble *params)
GLenum glGetError(void)
void glGetFloatv(GLenum pname, GLfloat *params)
GLint glGetFragDataLocation(GLuint program, GLchar *name)
void glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)
void glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data)
void glGetInteger64v(GLenum pname, GLint64 *params)
void glGetIntegeri_v(GLenum target, GLuint index, GLint *data)
void glGetIntegerv(GLenum pname, GLint *params)
void glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val)
<comment>
void glGetPointerv(GLenum pname, GLvoid **params)
</comment>
void glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
void glGetProgramiv(GLuint program, GLenum pname, GLint *params)
void glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params)
void glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)
void glGetQueryiv(GLenum target, GLenum pname, GLint *params)
void glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)
void glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)
void glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)
void glGetShaderiv(GLuint shader, GLenum pname, GLint *params)
GLubyte * glGetString(GLenum name)
GLubyte * glGetStringi(GLenum name, GLuint index)
void glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)
void glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLvoid *pixels)
void glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)
void glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)
void glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params)
void glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)
void glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
void glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)
void glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)
GLuint glGetUniformBlockIndex(GLuint program, GLchar *uniformBlockName)
<comment>
void glGetUniformIndices(GLuint program, GLsizei uniformCount, GLchar * *uniformNames, GLuint *uniformIndices)
</comment>
GLint glGetUniformLocation(GLuint program, GLchar *name)
void glGetUniformfv(GLuint program, GLint location, GLfloat *params)
void glGetUniformiv(GLuint program, GLint location, GLint *params)
void glGetUniformuiv(GLuint program, GLint location, GLuint *params)
void glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)
void glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)
<comment>
void glGetVertexAttribPointerv(GLuint index, GLenum pname, GLvoid **pointer)
</comment>
void glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)
void glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)
void glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)
void glHint(GLenum target, GLenum mode)
void glIndexub(GLubyte c)
void glIndexubv(GLubyte *c)
GLboolean glIsBuffer(GLuint buffer)
GLboolean glIsEnabled(GLenum cap)
GLboolean glIsEnabledi(GLenum target, GLuint index)
GLboolean glIsFramebuffer(GLuint framebuffer)
GLboolean glIsProgram(GLuint program)
GLboolean glIsQuery(GLuint id)
GLboolean glIsRenderbuffer(GLuint renderbuffer)
GLboolean glIsShader(GLuint shader)
GLboolean glIsSync(GLsync sync)
GLboolean glIsTexture(GLuint texture)
GLboolean glIsVertexArray(GLuint array)
void glLineWidth(GLfloat width)
void glLinkProgram(GLuint program)
void glLogicOp(GLenum opcode)
GLvoid * glMapBuffer(GLenum target, GLenum access)
GLvoid * glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)
void glMultiDrawArrays(GLenum mode, GLint *first, GLsizei *count, GLsizei drawcount)
<comment>
void glMultiDrawElements(GLenum mode, GLsizei *count, GLenum type, GLvoid * *indices, GLsizei drawcount)
void glMultiDrawElementsBaseVertex(GLenum mode, GLsizei *count, GLenum type, GLvoid * *indices, GLsizei drawcount, GLint *basevertex)
</comment>
void glPixelStoref(GLenum pname, GLfloat param)
void glPixelStorei(GLenum pname, GLint param)
void glPointParameterf(GLenum pname, GLfloat param)
void glPointParameterfv(GLenum pname, GLfloat *params)
void glPointParameteri(GLenum pname, GLint param)
void glPointParameteriv(GLenum pname, GLint *params)
void glPointSize(GLfloat size)
void glPolygonMode(GLenum face, GLenum mode)
void glPolygonOffset(GLfloat factor, GLfloat units)
void glPrimitiveRestartIndex(GLuint index)
void glProvokingVertex(GLenum mode)
void glReadBuffer(GLenum mode)
void glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
void glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)
void glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)
void glSampleCoverage(GLfloat value, GLboolean invert)
void glSampleMaski(GLuint index, GLbitfield mask)
void glScissor(GLint x, GLint y, GLsizei width, GLsizei height)
<comment>
void glShaderSource(GLuint shader, GLsizei count, GLchar * *string, GLint *length)
</comment>
void glStencilFunc(GLenum func, GLint ref, GLuint mask)
void glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)
void glStencilMask(GLuint mask)
void glStencilMaskSeparate(GLenum face, GLuint mask)
void glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)
void glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)
void glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer)
void glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, GLvoid *pixels)
void glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, GLvoid *pixels)
void glTexImage2DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)
void glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, GLvoid *pixels)
void glTexImage3DMultisample(GLenum target, GLsizei samples, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)
void glTexParameterIiv(GLenum target, GLenum pname, GLint *params)
void glTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)
void glTexParameterf(GLenum target, GLenum pname, GLfloat param)
void glTexParameterfv(GLenum target, GLenum pname, GLfloat *params)
void glTexParameteri(GLenum target, GLenum pname, GLint param)
void glTexParameteriv(GLenum target, GLenum pname, GLint *params)
void glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, GLvoid *pixels)
void glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, GLvoid *pixels)
void glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLvoid *pixels)
<comment>
void glTransformFeedbackVaryings(GLuint program, GLsizei count, GLchar * *varyings, GLenum bufferMode)
</comment>
void glUniform1f(GLint location, GLfloat v0)
void glUniform1fv(GLint location, GLsizei count, GLfloat *value)
void glUniform1i(GLint location, GLint v0)
void glUniform1iv(GLint location, GLsizei count, GLint *value)
void glUniform1ui(GLint location, GLuint v0)
void glUniform1uiv(GLint location, GLsizei count, GLuint *value)
void glUniform2f(GLint location, GLfloat v0, GLfloat v1)
void glUniform2fv(GLint location, GLsizei count, GLfloat *value)
void glUniform2i(GLint location, GLint v0, GLint v1)
void glUniform2iv(GLint location, GLsizei count, GLint *value)
void glUniform2ui(GLint location, GLuint v0, GLuint v1)
void glUniform2uiv(GLint location, GLsizei count, GLuint *value)
void glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)
void glUniform3fv(GLint location, GLsizei count, GLfloat *value)
void glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)
void glUniform3iv(GLint location, GLsizei count, GLint *value)
void glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)
void glUniform3uiv(GLint location, GLsizei count, GLuint *value)
void glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
void glUniform4fv(GLint location, GLsizei count, GLfloat *value)
void glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)
void glUniform4iv(GLint location, GLsizei count, GLint *value)
void glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)
void glUniform4uiv(GLint location, GLsizei count, GLuint *value)
void glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)
void glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
void glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, GLfloat *value)
GLboolean glUnmapBuffer(GLenum target)
void glUseProgram(GLuint program)
void glValidateProgram(GLuint program)
<comment>
void glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, GLvoid *pointer)
</comment>
void glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, GLvoid *pointer)
void glViewport(GLint x, GLint y, GLsizei width, GLsizei height)
void glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)

<class>
name: QSurfaceFormat
para: void
</class>

int alphaBufferSize(void)
int blueBufferSize(void)
<comment>
QSurfaceFormat::ColorSpace colorSpace(void)
</comment>
int depthBufferSize(void)
int greenBufferSize(void)
bool hasAlpha(void)
int majorVersion(void)
int minorVersion(void)
QSurfaceFormat::FormatOptions options(void)
QSurfaceFormat::OpenGLContextProfile profile(void)
int redBufferSize(void)
QSurfaceFormat::RenderableType renderableType(void)
int samples(void)
void setAlphaBufferSize(int size)
void setBlueBufferSize(int size)
<comment>
void setColorSpace(QSurfaceFormat::ColorSpace colorSpace)
</comment>
void setDepthBufferSize(int size)
void setGreenBufferSize(int size)
void setMajorVersion(int major)
void setMinorVersion(int minor)
void setOption(QSurfaceFormat::FormatOption option, bool on)
void setOptions(QSurfaceFormat::FormatOptions options)
void setProfile(QSurfaceFormat::OpenGLContextProfile profile)
void setRedBufferSize(int size)
void setRenderableType(QSurfaceFormat::RenderableType type)
void setSamples(int numSamples)
void setStencilBufferSize(int size)
void setStereo(bool enable)
void setSwapBehavior(QSurfaceFormat::SwapBehavior behavior)
void setSwapInterval(int interval)
void setVersion(int major, int minor)
int stencilBufferSize(void)
bool stereo(void)
QSurfaceFormat::SwapBehavior swapBehavior(void)
int swapInterval(void)
bool testOption(QSurfaceFormat::FormatOption option)
QSurfaceFormat defaultFormat(void)
void setDefaultFormat(QSurfaceFormat format)

<class>
name: QOpenGLWidget
para: QWidget *
parent: QWidget
codename: OpenGLWidget
passvmpointer
</class>

void geteventparameters(void) 
void setInitEvent(const char *cStr)
const char *getInitEvent(void)
void setPaintEvent(const char *cStr)
const char *getPaintEvent(void)
void setResizeEvent(const char *cStr)
const char *getResizeEvent(void)

QOpenGLContext * context(void)
GLuint defaultFramebufferObject(void)
void doneCurrent(void)
QSurfaceFormat format(void)
QImage grabFramebuffer(void)
bool isValid(void)
void makeCurrent(void)
void setFormat(QSurfaceFormat format)
<comment>
void setTextureFormat(GLenum texFormat)
GLenum textureFormat(void)
</comment>
void setUpdateBehavior(QOpenGLWidget::UpdateBehavior updateBehavior)
QOpenGLWidget::UpdateBehavior updateBehavior(void)

<class>
name: QOpenGLVersionProfile
para: void
</class>

bool hasProfiles(void)
bool isLegacyVersion(void)
bool isValid(void)
QSurfaceFormat::OpenGLContextProfile profile(void)
void setProfile(QSurfaceFormat::OpenGLContextProfile profile)
void setVersion(int majorVersion, int minorVersion)
QPair<int, int> version(void)

</filter>

<class>
name: QVector2D
para: float,float
</class>

float distanceToLine(QVector2D point, QVector2D direction)
float distanceToPoint(QVector2D point)
bool isNull(void)
float length(void)
float lengthSquared(void)
void normalize(void)
QVector2D normalized(void)
void setX(float x)
void setY(float y)
QPoint toPoint(void)
QPointF toPointF(void)
QVector3D toVector3D(void)
QVector4D toVector4D(void)
float x(void)
float y(void)
float dotProduct(QVector2D v1, QVector2D v2)

<class>
name: QVector3D
para: float,float,float
</class>

float distanceToLine(QVector3D point, QVector3D direction)
float distanceToPlane(QVector3D plane, QVector3D normal)
float distanceToPlane@2(QVector3D plane1, QVector3D plane2, QVector3D plane3)
float distanceToPoint(QVector3D point)
bool isNull(void)
float length(void)
float lengthSquared(void)
void normalize(void)
QVector3D normalized(void)
<comment>
QVector3D project(QMatrix4x4 modelView, QMatrix4x4 projection, QRect viewport)
</comment>
void setX(float x)
void setY(float y)
void setZ(float z)
QPoint toPoint(void)
QPointF toPointF(void)
QVector2D toVector2D(void)
QVector4D toVector4D(void)
<comment>
QVector3D unproject(QMatrix4x4 modelView, QMatrix4x4 projection, QRect viewport)
</comment>
float x(void)
float y(void)
float z(void)
QVector3D crossProduct(QVector3D v1, QVector3D v2)
float dotProduct(QVector3D v1, QVector3D v2)
QVector3D normal(QVector3D v1, QVector3D v2)
QVector3D normal@2(QVector3D v1, QVector3D v2, QVector3D v3)

<class>
name: QVector4D
para: float,float,float,float
</class>

bool isNull(void)
float length(void)
float lengthSquared(void)
void normalize(void)
QVector4D normalized(void)
void setW(float w)
void setX(float x)
void setY(float y)
void setZ(float z)
QPoint toPoint(void)
QPointF toPointF(void)
QVector2D toVector2D(void)
QVector2D toVector2DAffine(void)
QVector3D toVector3D(void)
QVector3D toVector3DAffine(void)
float w(void)
float x(void)
float y(void)
float z(void)
float dotProduct(QVector4D v1, QVector4D v2)

<class>
name: QQuaternion
para: float,float,float,float
</class>

<comment>
QQuaternion conjugated(void)
void getAxes(QVector3D *xAxis, QVector3D *yAxis, QVector3D *zAxis)
void getAxisAndAngle(float *x, float *y, float *z, float *angle)
void getAxisAndAngle@2(QVector3D *axis, float *angle)
void getEulerAngles(float *pitch, float *yaw, float *roll)
QQuaternion inverted(void)
</comment>
bool isIdentity(void)
bool isNull(void)
float length(void)
float lengthSquared(void)
void normalize(void)
QQuaternion normalized(void)
QVector3D rotatedVector(QVector3D vector)
float scalar(void)
void setScalar(float scalar)
void setVector(QVector3D vector)
void setVector@2(float x, float y, float z)
void setX(float x)
void setY(float y)
void setZ(float z)
<comment>
QVector3D toEulerAngles(void)
QMatrix3x3 toRotationMatrix(void)
</comment>
QVector4D toVector4D(void)
QVector3D vector(void)
float x(void)
float y(void)
float z(void)
<comment>
float dotProduct(QQuaternion q1, QQuaternion q2)
QQuaternion fromAxes(QVector3D xAxis, QVector3D yAxis, QVector3D zAxis)
QQuaternion fromDirection(QVector3D direction, QVector3D up)
QQuaternion fromEulerAngles(float pitch, float yaw, float roll)
QQuaternion fromEulerAngles@2(QVector3D eulerAngles)
QQuaternion fromRotationMatrix(QMatrix3x3 rot3x3)
QQuaternion rotationTo(QVector3D from, QVector3D to)
</comment>
QQuaternion fromAxisAndAngle(QVector3D axis, float angle)
QQuaternion fromAxisAndAngle@2(float x, float y, float z, float angle)
QQuaternion nlerp(QQuaternion q1, QQuaternion q2, float t)
QQuaternion slerp(QQuaternion q1, QQuaternion q2, float t)

<class>
name: QMatrix4x4
para: qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal,qreal
</class>

QVector4D column(int index)
qreal * constData(void)
<comment>
void copyDataTo(qreal * values)
</comment>
qreal * data(void)
qreal * data@2(void)
qreal determinant(void)
void fill(qreal value)
void flipCoordinates(void)
void frustum(qreal left, qreal right, qreal bottom, qreal top, qreal nearPlane, qreal farPlane)
QMatrix4x4 inverted(bool * invertible)
bool isIdentity(void)
void lookAt(QVector3D eye, QVector3D center, QVector3D up)
QPoint map(QPoint point)
QPointF map@2(QPointF point)
QVector3D map@3(QVector3D point)
QVector4D map@4(QVector4D point)
QRect mapRect(QRect rect)
QRectF mapRect@2(QRectF rect)
QVector3D mapVector(QVector3D vector)
QMatrix3x3 normalMatrix(void)
void optimize(void)
void ortho(qreal left, qreal right, qreal bottom, qreal top, qreal nearPlane, qreal farPlane)
void ortho@2(QRect rect)
void ortho@3(QRectF rect)
void perspective(qreal angle, qreal aspect, qreal nearPlane, qreal farPlane)
void rotate(qreal angle, QVector3D vector)
void rotate@2(QQuaternion quaternion)
void rotate@3(qreal angle, qreal x, qreal y, qreal z)
QVector4D row(int index)
void scale(QVector3D vector)
void scale@2(qreal x, qreal y)
void scale@3(qreal x, qreal y, qreal z)
void scale@4(qreal factor)
void setColumn(int index, QVector4D value)
void setRow(int index, QVector4D value)
void setToIdentity(void)
QMatrix toAffine(void)
<comment>
QGenericMatrix<N, M, qreal> toGenericMatrix(void)
</comment>
QTransform toTransform(void)
QTransform toTransform@2(qreal distanceToPlane)
void translate(QVector3D vector)
void translate@2(qreal x, qreal y)
void translate@3(qreal x, qreal y, qreal z)
QMatrix4x4 transposed(void)

<filter> (iswindows() and sysget("RINGQT_ANDROID") = "")

<class>
name: QOpenGLPaintDevice
para: void
parent: QPaintDevice
</class>


QOpenGLContext * context(void)
qreal dotsPerMeterX(void)
qreal dotsPerMeterY(void)
void ensureActiveTarget(void)
bool paintFlipped(void)
void setDevicePixelRatio(qreal devicePixelRatio)
void setDotsPerMeterX(qreal dpmx)
void setDotsPerMeterY(qreal dpmy)
void setPaintFlipped(bool flipped)
void setSize(QSize size)
QSize size(void)

<class>
name: QPaintDevice
nonew
</class>

int colorCount(void)
int depth(void)
int devicePixelRatio(void)
<comment>
qreal devicePixelRatioF(void)
</comment>
int height(void)
int heightMM(void)
int logicalDpiX(void)
int logicalDpiY(void)
QPaintEngine * paintEngine(void)
bool paintingActive(void)
int physicalDpiX(void)
int physicalDpiY(void)
int width(void)
int widthMM(void)

<filter> (sysget("RINGQT_ANDROID") = "")

<class>
name: QOpenGLTimerQuery
para: QObject *
</class>

void begin(void)
bool create(void)
void destroy(void)
void end(void)
bool isCreated(void)
bool isResultAvailable(void)
GLuint objectId(void)
void recordTimestamp(void)
GLuint64 waitForResult(void)
GLuint64 waitForTimestamp(void)

<class>
name: QOpenGLDebugLogger
para: QObject *
</class>

void disableMessages(QOpenGLDebugMessage::Sources sources, QOpenGLDebugMessage::Types types, QOpenGLDebugMessage::Severities severities)
void disableMessages@2(QVector<GLuint> ids, QOpenGLDebugMessage::Sources sources, QOpenGLDebugMessage::Types types)
void enableMessages(QOpenGLDebugMessage::Sources sources, QOpenGLDebugMessage::Types types, QOpenGLDebugMessage::Severities severities)
void enableMessages@2(QVector<GLuint> ids, QOpenGLDebugMessage::Sources sources, QOpenGLDebugMessage::Types types)
bool initialize(void)
bool isLogging(void)
QList<QOpenGLDebugMessage> loggedMessages(void)
QOpenGLDebugLogger::LoggingMode loggingMode(void)
qint64 maximumMessageLength(void)
void popGroup(void)
void pushGroup(QString name, GLuint id, QOpenGLDebugMessage::Source source)
void logMessage(QOpenGLDebugMessage debugMessage)
void startLogging(QOpenGLDebugLogger::LoggingMode loggingMode)
void stopLogging(void)

<class>
name: QOpenGLFramebufferObject
para: int,int,GLenum
</class>

<comment>
void addColorAttachment(QSize size, GLenum internalFormat)
void addColorAttachment@2(int width, int height, GLenum internalFormat)
</comment>
QOpenGLFramebufferObject::Attachment attachment(void)
bool bind(void)
QOpenGLFramebufferObjectFormat format(void)
GLuint handle(void)
int height(void)
bool isBound(void)
bool isValid(void)
bool release(void)
void setAttachment(QOpenGLFramebufferObject::Attachment attachment)
QSize size(void)
<comment>
QVector<QSize> sizes(void)
GLuint takeTexture(void)
GLuint takeTexture@2(int colorQOpenGLFramebufferObject::AttachmentIndex)
</comment>
GLuint texture(void)
<comment>
QVector<GLuint> textures(void)
</comment>
<comment>
QImage toImage(bool flipped)
QImage toImage@3(bool flipped, int colorQOpenGLFramebufferObject::AttachmentIndex)
</comment>
QImage toImage@2(void)
int width(void)
bool bindDefault(void)
<comment>
void blitFramebuffer(QOpenGLFramebufferObject *target, QRect targetRect, QOpenGLFramebufferObject *source, QRect sourceRect, GLbitfield buffers, GLenum filter, int readColorQOpenGLFramebufferObject::AttachmentIndex, int drawColorQOpenGLFramebufferObject::AttachmentIndex, QOpenGLFramebufferObject::FramebufferRestorePolicy restorePolicy)
void blitFramebuffer@2(QOpenGLFramebufferObject *target, QRect targetRect, QOpenGLFramebufferObject *source, QRect sourceRect, GLbitfield buffers, GLenum filter, int readColorQOpenGLFramebufferObject::AttachmentIndex, int drawColorQOpenGLFramebufferObject::AttachmentIndex)
void blitFramebuffer@3(QOpenGLFramebufferObject *target, QRect targetRect, QOpenGLFramebufferObject *source, QRect sourceRect, GLbitfield buffers, GLenum filter)
void blitFramebuffer@4(QOpenGLFramebufferObject *target, QOpenGLFramebufferObject *source, GLbitfield buffers, GLenum filter)
</comment>
bool hasOpenGLFramebufferBlit(void)
bool hasOpenGLFramebufferObjects(void)

<class>
name: QOpenGLVertexArrayObject
para: QObject *
</class>

void bind(void)
bool create(void)
void destroy(void)
bool isCreated(void)
GLuint objectId(void)
void release(void)

<class>
name: QOpenGLBuffer
para: void
</class>

void allocate(void *data, int count)
void allocate@2(int count)
bool bind(void)
GLuint bufferId(void)
bool create(void)
void destroy(void)
bool isCreated(void)
void * map(QOpenGLBuffer::Access access)
<comment>
void * mapRange(int offset, int count, QOpenGLBuffer::RangeAccessFlags access)
</comment>
bool read(int offset, void *data, int count)
void release(void)
void setUsagePattern(QOpenGLBuffer::UsagePattern value)
int size(void)
QOpenGLBuffer::Type type(void)
bool unmap(void)
QOpenGLBuffer::UsagePattern usagePattern(void)
void write(int offset, void *data, int count)
void release@2(QOpenGLBuffer::Type type)

<class>
name: QOpenGLShaderProgram
para: QObject *
</class>

<comment>
bool addCacheableShaderFromSourceCode(QOpenGLShader::ShaderType type, char *source)
bool addCacheableShaderFromSourceCode@2(QOpenGLShader::ShaderType type, QByteArray source)
bool addCacheableShaderFromSourceCode@3(QOpenGLShader::ShaderType type, QString source)
bool addCacheableShaderFromSourceFile(QOpenGLShader::ShaderType type, QString fileName)
</comment>
bool addShader(QOpenGLShader *shader)
bool addShaderFromSourceCode(QOpenGLShader::ShaderType type, char *source)
bool addShaderFromSourceCode@2(QOpenGLShader::ShaderType type, QByteArray source)
bool addShaderFromSourceCode@3(QOpenGLShader::ShaderType type, QString source)
bool addShaderFromSourceFile(QOpenGLShader::ShaderType type, QString fileName)
int attributeLocation(char *name)
int attributeLocation@2(QByteArray name)
int attributeLocation@3(QString name)
bool bind(void)
void bindAttributeLocation(char *name, int location)
void bindAttributeLocation@2(QByteArray name, int location)
void bindAttributeLocation@3(QString name, int location)
<comment>
bool create(void)
</comment>
QVector<float> defaultInnerTessellationLevels(void)
QVector<float> defaultOuterTessellationLevels(void)
void disableAttributeArray(int location)
void disableAttributeArray@2(char *name)
void enableAttributeArray(int location)
void enableAttributeArray@2(char *name)
bool isLinked(void)
bool link(void)
QString log(void)
int maxGeometryOutputVertices(void)
int patchVertexCount(void)
GLuint programId(void)
void release(void)
void removeAllShaders(void)
void removeShader(QOpenGLShader *shader)
void setAttributeArray(int location, GLfloat *values, int tupleSize, int stride)
void setAttributeArray@2(int location, QVector2D *values, int stride)
void setAttributeArray@3(int location, QVector3D *values, int stride)
void setAttributeArray@4(int location, QVector4D *values, int stride)
void setAttributeArray@5(int location, GLenum type, void *values, int tupleSize, int stride)
void setAttributeArray@6(char *name, GLfloat *values, int tupleSize, int stride)
void setAttributeArray@7(char *name, QVector2D *values, int stride)
void setAttributeArray@8(char *name, QVector3D *values, int stride)
void setAttributeArray@9(char *name, QVector4D *values, int stride)
void setAttributeArray@10(char *name, GLenum type, void *values, int tupleSize, int stride)
void setAttributeBuffer(int location, GLenum type, int offset, int tupleSize, int stride)
void setAttributeBuffer@2(char *name, GLenum type, int offset, int tupleSize, int stride)
void setAttributeValue(int location, GLfloat value)
void setAttributeValue@2(int location, GLfloat x, GLfloat y)
void setAttributeValue@3(int location, GLfloat x, GLfloat y, GLfloat z)
void setAttributeValue@4(int location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
void setAttributeValue@5(int location, QVector2D value)
void setAttributeValue@6(int location, QVector3D value)
void setAttributeValue@7(int location, QVector4D value)
void setAttributeValue@8(int location, QColor value)
void setAttributeValue@9(int location, GLfloat *values, int columns, int rows)
void setAttributeValue@10(char *name, GLfloat value)
void setAttributeValue@11(char *name, GLfloat x, GLfloat y)
void setAttributeValue@12(char *name, GLfloat x, GLfloat y, GLfloat z)
void setAttributeValue@13(char *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
void setAttributeValue@14(char *name, QVector2D value)
void setAttributeValue@15(char *name, QVector3D value)
void setAttributeValue@16(char *name, QVector4D value)
<comment>
void setAttributeValue@17(char *name, QColor value)
void setAttributeValue@18(char *name, GLfloat *values, int columns, int rows)
</comment>

void setDefaultInnerTessellationLevels(QVector<float> levels)
void setDefaultOuterTessellationLevels(QVector<float> levels)
void setPatchVertexCount(int count)
void setUniformValue(int location, GLfloat value)
void setUniformValue@2(int location, GLint value)
void setUniformValue@3(char *name, QColor color)
void setUniformValue@4(char *name, QPoint point)
void setUniformValue@5(char *name, QPointF point)
void setUniformValue@6(char *name, QSize size)
void setUniformValue@7(char *name, QSizeF size)
void setUniformValue@8(char *name, QMatrix2x2 value)
void setUniformValue@9(char *name, QMatrix2x3 value)
void setUniformValue@10(char *name, QMatrix2x4 value)
void setUniformValue@11(char *name, QMatrix3x2 value)
void setUniformValue@12(char *name, QMatrix3x3 value)
void setUniformValue@13(char *name, QMatrix3x4 value)
void setUniformValue@14(char *name, QMatrix4x2 value)
void setUniformValue@15(char *name, QMatrix4x3 value)
void setUniformValue@16(char *name, QMatrix4x4 value)
<comment>
void setUniformValue@17(char *name, GLfloat[2][2] value)
void setUniformValue@18(char *name, GLfloat[3][3] value)
void setUniformValue@19(char *name, GLfloat[4][4] value)
</comment>
void setUniformValue@20(char *name, QTransform value)
void setUniformValue@21(int location, GLuint value)
void setUniformValue@22(int location, GLfloat x, GLfloat y)
void setUniformValue@23(int location, GLfloat x, GLfloat y, GLfloat z)
void setUniformValue@24(int location, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
void setUniformValue@25(int location, QVector2D value)
void setUniformValue@26(int location, QVector3D value)
void setUniformValue@27(int location, QVector4D value)
void setUniformValue@28(int location, QColor color)
void setUniformValue@29(int location, QPoint point)
void setUniformValue@30(int location, QPointF point)
void setUniformValue@31(int location, QSize size)
void setUniformValue@32(int location, QSizeF size)
void setUniformValue@33(int location, QMatrix2x2 value)
void setUniformValue@34(int location, QMatrix2x3 value)
void setUniformValue@35(int location, QMatrix2x4 value)
void setUniformValue@36(int location, QMatrix3x2 value)
void setUniformValue@37(int location, QMatrix3x3 value)
void setUniformValue@38(int location, QMatrix3x4 value)
void setUniformValue@39(int location, QMatrix4x2 value)
void setUniformValue@40(int location, QMatrix4x3 value)
void setUniformValue@41(int location, QMatrix4x4 value)
<comment>
void setUniformValue@42(int location, GLfloat[2][2] value)
void setUniformValue@43(int location, GLfloat[3][3] value)
void setUniformValue@44(int location, GLfloat[4][4] value)
</comment>
void setUniformValue@45(int location, QTransform value)
void setUniformValue@46(char *name, GLfloat value)
void setUniformValue@47(char *name, GLint value)
void setUniformValue@48(char *name, GLuint value)
void setUniformValue@49(char *name, GLfloat x, GLfloat y)
void setUniformValue@50(char *name, GLfloat x, GLfloat y, GLfloat z)
void setUniformValue@51(char *name, GLfloat x, GLfloat y, GLfloat z, GLfloat w)
void setUniformValue@52(char *name, QVector2D value)
void setUniformValue@53(char *name, QVector3D value)
void setUniformValue@54(char *name, QVector4D value)
void setUniformValueArray(int location, GLfloat *values, int count, int tupleSize)
void setUniformValueArray@2(int location, GLint *values, int count)
void setUniformValueArray@3(int location, GLuint *values, int count)
void setUniformValueArray@4(int location, QVector2D *values, int count)
void setUniformValueArray@5(int location, QVector3D *values, int count)
void setUniformValueArray@6(int location, QVector4D *values, int count)
void setUniformValueArray@7(int location, QMatrix2x2 *values, int count)
void setUniformValueArray@8(int location, QMatrix2x3 *values, int count)
void setUniformValueArray@9(int location, QMatrix2x4 *values, int count)
void setUniformValueArray@10(int location, QMatrix3x2 *values, int count)
void setUniformValueArray@11(int location, QMatrix3x3 *values, int count)
void setUniformValueArray@12(int location, QMatrix3x4 *values, int count)
void setUniformValueArray@13(int location, QMatrix4x2 *values, int count)
void setUniformValueArray@14(int location, QMatrix4x3 *values, int count)
void setUniformValueArray@15(int location, QMatrix4x4 *values, int count)
void setUniformValueArray@16(char *name, GLfloat *values, int count, int tupleSize)
void setUniformValueArray@17(char *name, GLint *values, int count)
void setUniformValueArray@18(char *name, GLuint *values, int count)
void setUniformValueArray@19(char *name, QVector2D *values, int count)
void setUniformValueArray@20(char *name, QVector3D *values, int count)
void setUniformValueArray@21(char *name, QVector4D *values, int count)
void setUniformValueArray@22(char *name, QMatrix2x2 *values, int count)
void setUniformValueArray@23(char *name, QMatrix2x3 *values, int count)
void setUniformValueArray@24(char *name, QMatrix2x4 *values, int count)
void setUniformValueArray@25(char *name, QMatrix3x2 *values, int count)
void setUniformValueArray@26(char *name, QMatrix3x3 *values, int count)
void setUniformValueArray@27(char *name, QMatrix3x4 *values, int count)
void setUniformValueArray@28(char *name, QMatrix4x2 *values, int count)
void setUniformValueArray@29(char *name, QMatrix4x3 *values, int count)
void setUniformValueArray@30(char *name, QMatrix4x4 *values, int count)
QList<QOpenGLShader *> shaders(void)
int uniformLocation(char *name)
int uniformLocation@2(QByteArray name)
int uniformLocation@3(QString name)
bool hasOpenGLShaderPrograms(QOpenGLContext *context)

<class>
name: QOpenGLShader
para: QOpenGLShader::ShaderType,QObject *
</class>

bool compileSourceCode(char *source)
bool compileSourceCode@2(QByteArray source)
bool compileSourceCode@3(QString source)
bool compileSourceFile(QString fileName)
bool isCompiled(void)
QString log(void)
GLuint shaderId(void)
QOpenGLShader::ShaderType shaderType(void)
QByteArray sourceCode(void)
bool hasOpenGLShaders(QOpenGLShader::ShaderType type, QOpenGLContext *context)

<class>
name: QOpenGLTexture
para: QOpenGLTexture::Target
</class>

void allocateStorage(void)
<comment>
void allocateStorage@2(QOpenGLTexture::PixelFormat pixelFormat, QOpenGLTexture::PixelType pixelType)
</comment>
void bind(void)
void bind@2(uint unit, QOpenGLTexture::TextureUnitReset reset)
QColor borderColor(void)
void borderColor@2(float *border)
void borderColor@3(int *border)
void borderColor@4(unsigned int *border)
<comment>
QOpenGLTexture::ComparisonFunction comparisonFunction(void)
QOpenGLTexture::ComparisonMode comparisonMode(void)
</comment>
bool create(void)
QOpenGLTexture * createTextureView(QOpenGLTexture::Target target, QOpenGLTexture::TextureFormat viewFormat, int minimumMipmapLevel, int maximumMipmapLevel, int minimumLayer, int maximumLayer)
int depth(void)
QOpenGLTexture::DepthStencilMode depthStencilMode(void)
void destroy(void)
int faces(void)
QOpenGLTexture::TextureFormat format(void)
void generateMipMaps(void)
void generateMipMaps@2(int baseLevel, bool resetBaseLevel)
int height(void)
bool isAutoMipMapGenerationEnabled(void)
bool isBound(void)
bool isBound@2(uint unit)
bool isCreated(void)
<comment>
bool isFixedSamplePositions(void)
</comment>
bool isStorageAllocated(void)
bool isTextureView(void)
int layers(void)
QPair<float, float> levelOfDetailRange(void)
float levelofDetailBias(void)
QOpenGLTexture::Filter magnificationFilter(void)
float maximumAnisotropy(void)
float maximumLevelOfDetail(void)
int maximumMipLevels(void)
<comment>
QPair<QOpenGLTexture::Filter, QOpenGLTexture::Filter> minMagQOpenGLTexture::Filters(void)
</comment>
QOpenGLTexture::Filter minificationFilter(void)
float minimumLevelOfDetail(void)
int mipBaseLevel(void)
<comment>
QPair<int, int> mipLevelRange(void)
</comment>
int mipLevels(void)
int mipMaxLevel(void)
void release(void)
void release@2(uint unit, QOpenGLTexture::TextureUnitReset reset)
<comment>
int samples(void)
</comment>
void setAutoMipMapGenerationEnabled(bool enabled)
void setBorderColor(QColor color)
<comment>
void setBorderColor@2(float r, float g, float b, float a)
</comment>
void setBorderColor@3(int r, int g, int b, int a)
void setBorderColor@4(uint r, uint g, uint b, uint a)
<comment>
void setComparisonFunction(QOpenGLTexture::ComparisonFunction function)
void setComparisonMode(QOpenGLTexture::ComparisonMode mode)
</comment>
void setCompressedData(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, void *data, QOpenGLPixelTransferOptions * options)
<comment>
void setCompressedData@2(int mipLevel, int layer, int layerCount, QOpenGLTexture::CubeMapFace cubeFace, int dataSize, void *data, QOpenGLPixelTransferOptions * options)
</comment>
void setCompressedData@3(int mipLevel, int layer, int dataSize, void *data, QOpenGLPixelTransferOptions * options)
void setCompressedData@4(int mipLevel, int dataSize, void *data, QOpenGLPixelTransferOptions * options)
void setCompressedData@5(int dataSize, void *data, QOpenGLPixelTransferOptions * options)
void setData(int mipLevel, int layer, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, QOpenGLPixelTransferOptions * options)
<comment>
void setData@2(int mipLevel, int layer, int layerCount, QOpenGLTexture::CubeMapFace cubeFace, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, QOpenGLPixelTransferOptions * options)
</comment>
void setData@3(int mipLevel, int layer, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, QOpenGLPixelTransferOptions * options)
void setData@4(int mipLevel, QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, QOpenGLPixelTransferOptions * options)
void setData@5(QOpenGLTexture::PixelFormat sourceFormat, QOpenGLTexture::PixelType sourceType, void *data, QOpenGLPixelTransferOptions * options)
void setData@6(QImage image, QOpenGLTexture::MipMapGeneration genMipMaps)
void setDepthStencilMode(QOpenGLTexture::DepthStencilMode mode)
<comment>
void setFixedSamplePositions(bool fixed)
</comment>
void setFormat(QOpenGLTexture::TextureFormat format)
void setLayers(int layers)
void setLevelOfDetailRange(float min, float max)
void setLevelofDetailBias(float bias)
void setMagnificationFilter(QOpenGLTexture::Filter filter)
void setMaximumAnisotropy(float anisotropy)
void setMaximumLevelOfDetail(float value)
void setMinMagFilters(QOpenGLTexture::Filter minificationQOpenGLTexture::Filter, QOpenGLTexture::Filter magnificationQOpenGLTexture::Filter)
void setMinificationFilter(QOpenGLTexture::Filter filter)
void setMinimumLevelOfDetail(float value)
void setMipBaseLevel(int baseLevel)
void setMipLevelRange(int baseLevel, int maxLevel)
void setMipLevels(int levels)
void setMipMaxLevel(int maxLevel)
<comment>
void setSamples(int samples)
</comment>
void setSize(int width, int height, int depth)
void setSwizzleMask(QOpenGLTexture::SwizzleComponent component, QOpenGLTexture::SwizzleValue value)
void setSwizzleMask@2(QOpenGLTexture::SwizzleValue r, QOpenGLTexture::SwizzleValue g, QOpenGLTexture::SwizzleValue b, QOpenGLTexture::SwizzleValue a)
void setWrapMode(QOpenGLTexture::WrapMode mode)
void setWrapMode@2(QOpenGLTexture::CoordinateDirection direction, QOpenGLTexture::WrapMode mode)
QOpenGLTexture::SwizzleValue swizzleMask(QOpenGLTexture::SwizzleComponent component)
<comment>
QOpenGLTexture::Target target(void)
</comment>
GLuint textureId(void)
int width(void)
QOpenGLTexture::WrapMode wrapMode(QOpenGLTexture::CoordinateDirection direction)
GLuint boundTextureId(QOpenGLTexture::BindingTarget target)
<comment>
GLuint boundTextureId@2(uint unit, QOpenGLTexture::Target target)
</comment>
bool hasFeature(QOpenGLTexture::Feature feature)

</filter>

<class>
name: QTabBar
para: QWidget *
parent: QWidget
codename: GTabBar
passvmpointer
</class>

int addTab(QString text)
int addTab@2(QIcon icon, QString text)
int count(void)
int currentIndex(void)
bool documentMode(void)
bool drawBase(void)
Qt::TextElideMode elideMode(void)
bool expanding(void)
QSize iconSize(void)
int insertTab(int index, QString text)
int insertTab@2(int index, QIcon icon, QString text)
bool isMovable(void)
bool isTabEnabled(int index)
void moveTab(int from, int to)
void removeTab(int index)
QTabBar::SelectionBehavior selectionBehaviorOnRemove(void)
void setDocumentMode(bool set)
void setDrawBase(bool drawTheBase)
void setElideMode(Qt::TextElideMode)
void setExpanding(bool enabled)
void setIconSize(QSize size)
void setMovable(bool movable)
void setSelectionBehaviorOnRemove(QTabBar::SelectionBehavior behavior)
void setShape(QTabBar::Shape shape)
void setTabButton(int index, QTabBar::ButtonPosition position, QWidget * widget)
void setTabData(int index, QVariant data)
void setTabEnabled(int index, bool enabled)
void setTabIcon(int index, QIcon icon)
void setTabText(int index, QString text)
void setTabTextColor(int index, QColor color)
void setTabToolTip(int index, QString tip)
void setTabWhatsThis(int index, QString text)
void setTabsClosable(bool closable)
void setUsesScrollButtons(bool useButtons)
QTabBar::Shape shape(void)
int tabAt(QPoint position)
QWidget * tabButton(int index, QTabBar::ButtonPosition position)
QVariant tabData(int index)
QIcon tabIcon(int index)
QRect tabRect(int index)
QString tabText(int index)
QColor tabTextColor(int index)
QString tabToolTip(int index)
QString tabWhatsThis(int index)
bool tabsClosable(void)
bool usesScrollButtons(void)
void setCurrentIndex(int index)

void setcurrentChangedEvent(const char *)
void settabCloseRequestedEvent(const char *)
void settabMovedEvent(const char *)

const char *getcurrentChangedEvent(void)
const char *gettabCloseRequestedEvent(void)
const char *gettabMovedEvent(void)

<class>
name: QFile
para: void
parent: QFileDevice
</class>

bool copy(QString newName)
bool exists(void)
bool link(QString linkName)
bool open(FILE *fh, QIODevice::OpenMode mode, QFile::FileHandleFlags handleFlags)
bool open@2(int fd, QIODevice::OpenMode mode, QFile::FileHandleFlags handleFlags)
bool remove(void)
bool rename(QString newName)
void setFileName(QString name)
QString symLinkTarget(void)
bool copy@2(QString fileName, QString newName)
QString decodeName(QByteArray localFileName)
QString decodeName@2(char *localFileName)
QByteArray encodeName(QString fileName)
bool exists@2(QString fileName)
bool link@2(QString fileName, QString linkName)
QFile::Permissions permissions(QString fileName)
bool remove@2(QString fileName)
bool rename@2(QString oldName, QString newName)
bool resize(QString fileName, qint64 sz)
bool setPermissions(QString fileName, QFile::Permissions permissions)
QString symLinkTarget@2(QString fileName)

<class>
name: QFileDevice
parent: QIODevice
nonew
</class>

QFileDevice::FileError error(void)
bool flush(void)
int handle(void)
uchar * map(qint64 offset, qint64 size, QFileDevice::MemoryMapFlags flags)
QFileDevice::Permissions permissions(void)
bool resize(qint64 sz)
QString fileName(void)
<comment>
QDateTime fileTime(QFileDevice::FileTime time)
bool setFileTime(QDateTime newDate, QFileDevice::FileTime fileTime)
</comment>
bool setPermissions(QFileDevice::Permissions permissions)
bool unmap(uchar *address)
void unsetError(void)

<class>
name: QStandardPaths
para: void
nonew
staticmethods
</class>

QString displayName(QStandardPaths::StandardLocation type)
QString findExecutable(QString executableName, QStringList paths))
QString locate(QStandardPaths::StandardLocation type, QString fileName, QStandardPaths::LocateOptions options)
QStringList locateAll(QStandardPaths::StandardLocation type, QString fileName, QStandardPaths::LocateOptions options)
void setTestModeEnabled(bool testMode)
QStringList standardLocations(QStandardPaths::StandardLocation type)
QString writableLocation(QStandardPaths::StandardLocation type)

<filter> (iswindows() or ismacosx()) 

<class>
name: QQuickWidget
para: QWidget *
parent: QWidget
codename: GQuickWidget
passvmpointer
</class>

QQmlEngine *engine(void)
QList<QQmlError> errors(void)
QSurfaceFormat format(void)
QImage grabFramebuffer(void)
QSize initialSize(void)
QQuickWindow *quickWindow(void)
QQuickWidget::ResizeMode resizeMode(void)
QQmlContext *rootContext(void)
QQuickItem *rootObject(void)
void setClearColor(QColor color)
void setFormat(QSurfaceFormat format)
void setResizeMode(QQuickWidget::ResizeMode)
QUrl source(void)
QQuickWidget::Status status(void)
void setSource(QUrl url)

void setsceneGraphErrorEvent(const char *)
void setstatusChangedEvent(const char *)

const char *getsceneGraphErrorEvent(void)
const char *getstatusChangedEvent(void)

<class>
name: QQmlError
para: void
</class>


int column(void)
QString description(void)
bool isValid(void)
int line(void)
QObject * object(void)
void setColumn(int column)
void setDescription(QString description)
void setLine(int line)
void setObject(QObject *object)
void setUrl(QUrl url)
QString toString(void)
QUrl url(void)

</filter>


<filter> (sysget("RINGQT_ANDROID") = "" and sysget("RINGQT_NOWEBKIT") = "1")
<class>
name: QWebEngineView
para: QWidget *parent
parent: QWidget
codename: GWebEngineView
passvmpointer
</class>

bool hasSelection(void)
QWebEngineHistory *history(void)
void load(QUrl) # In RingQt use : void loadpage(QUrl) 
QWebEnginePage *page(void)
QAction *pageAction(QWebEnginePage::WebAction action)
QString selectedText(void)
void setContent(QByteArray,QString,QUrl)
void setHtml(QString,QUrl)
void setPage(QWebEnginePage *page)
void setUrl(QUrl)
void setZoomFactor(qreal factor)
QWebSettings *settings(void)
QString title(void)
void triggerPageAction(QWebEnginePage::WebAction action, bool checked)
QUrl url(void)
qreal zoomFactor(void)
void back(void)
void forward(void)
void reload(void)
void stop(void)

void setloadFinishedEvent(const char *)
void setloadProgressEvent(const char *)
void setloadStartedEvent(const char *)
void setselectionChangedEvent(const char *)
void settitleChangedEvent(const char *)
void seturlChangedEvent(const char *)

const char *getloadFinishedEvent(void)
const char *getloadProgressEvent(void)
const char *getloadStartedEvent(void)
const char *getselectionChangedEvent(void)
const char *gettitleChangedEvent(void)
const char *geturlChangedEvent(void)


</filter>

<class>
name: QScrollBar
para: QWidget *parent
parent: QAbstractSlider
</class>

<class>
name: QDrag
para: QObject *
parent: QObject
codename: GDrag
passvmpointer
</class>


Qt::DropAction defaultAction(void)
QPixmap dragCursor(Qt::DropAction action)
Qt::DropAction exec(Qt::DropActions supportedActions)
Qt::DropAction exec@2(Qt::DropActions supportedActions, Qt::DropAction defaultDropAction)
QPoint hotSpot(void)
QMimeData *mimeData(void)
QPixmap pixmap(void)
void setDragCursor(QPixmap cursor, Qt::DropAction action)
void setHotSpot(QPoint hotspot)
void setMimeData(QMimeData * data)
void setPixmap(QPixmap pixmap)
QObject * source(void)
Qt::DropActions supportedActions(void)
QObject * target(void)

void setactionChangedEvent(const char *)
void settargetChangedEvent(const char *)

const char *getactionChangedEvent(void)
const char *gettargetChangedEvent(void)

<class>
name: QMimeData
para: void
parent: QObject
</class>

void clear(void)
QVariant colorData(void)
QByteArray data(QString mimeType)
QStringList formats(void)
bool hasColor(void)
bool hasFormat(QString mimeType)
bool hasHtml(void)
bool hasImage(void)
bool hasText(void)
bool hasUrls(void)
QString html(void)
QVariant imageData(void)
void removeFormat(QString mimeType)
void setColorData(QVariant color)
void setData(QString mimeType, QByteArray data)
void setHtml(QString html)
void setImageData(QVariant image)
void setText(QString text)
void setUrls(QList<QUrl> urls)
QString text(void)
QList<QUrl> urls(void)

<class>
name: QDropEvent
para: QPointF,Qt::DropActions,const QMimeData *,Qt::MouseButtons,Qt::KeyboardModifiers,QEvent::Type
parent: QEvent
</class>

void acceptProposedAction(void)
Qt::DropAction dropAction(void)
Qt::KeyboardModifiers keyboardModifiers(void)
QMimeData * mimeData(void)
Qt::MouseButtons mouseButtons(void)
QPoint pos(void)
QPointF posF(void)
Qt::DropActions possibleActions(void)
Qt::DropAction proposedAction(void)
void setDropAction(Qt::DropAction action)
QObject * source(void)

<class>
name: QDragMoveEvent
para: QPoint,Qt::DropActions,const QMimeData *,Qt::MouseButtons,Qt::KeyboardModifiers,QEvent::Type
parent: QDropEvent
</class>


void accept(QRect rectangle)
void accept@2(void)
QRect answerRect(void)
void ignore(QRect rectangle)
void ignore@2(void)

<class>
name: QDragEnterEvent
para: QPoint,Qt::DropActions,const QMimeData *,Qt::MouseButtons,Qt::KeyboardModifiers
parent: QDragMoveEvent
</class>


<class>
name: QDragLeaveEvent
para: void
parent: QEvent
</class>


<class>
name: QClipboard
nonew
</class>

void clear(QClipboard::Mode mode)
QImage image(QClipboard::Mode mode)
QMimeData * mimeData(QClipboard::Mode mode)
bool ownsClipboard(void)
bool ownsFindBuffer(void)
bool ownsSelection(void)
QPixmap pixmap(QClipboard::Mode mode)
void setImage(QImage image, QClipboard::Mode mode)
void setMimeData(QMimeData * src, QClipboard::Mode mode)
void setPixmap(QPixmap pixmap, QClipboard::Mode mode)
void setText(QString text, QClipboard::Mode mode)
bool supportsFindBuffer(void)
bool supportsSelection(void)
QString text(QClipboard::Mode mode)

<class>
name: QChar
para: int
</class>

QChar::Category category(void)
uchar cell(void)
unsigned char combiningClass(void)
QString decomposition(void)
QChar::Decomposition decompositionTag(void)
int digitValue(void)
QChar::Direction direction(void)
bool hasMirrored(void)
bool isDigit(void)
bool isHighSurrogate(void)
bool isLetter(void)
bool isLetterOrNumber(void)
bool isLowSurrogate(void)
bool isLower(void)
bool isMark(void)
bool isNonCharacter(void)
bool isNull(void)
bool isNumber(void)
bool isPrint(void)
bool isPunct(void)
bool isSpace(void)
bool isSurrogate(void)
bool isSymbol(void)
bool isTitleCase(void)
bool isUpper(void)
QChar mirroredChar(void)
uchar row(void)
QChar::Script script(void)
QChar toCaseFolded(void)
char toLatin1(void)
QChar toLower(void)
QChar toTitleCase(void)
QChar toUpper(void)
ushort unicode(void)
ushort unicode@2(void)
QChar::UnicodeVersion unicodeVersion(void)
QChar::Category category@2(uint ucs4)
unsigned char combiningClass@2(uint ucs4)
QChar::UnicodeVersion currentUnicodeVersion(void)
QString decomposition@2(uint ucs4)
QChar::Decomposition decompositionTag@2(uint ucs4)
int digitValue@2(uint ucs4)
QChar::Direction direction@2(uint ucs4)
QChar fromLatin1(char c)
bool hasMirrored@2(uint ucs4)
ushort highSurrogate(uint ucs4)
bool isDigit@2(uint ucs4)
bool isHighSurrogate@2(uint ucs4)
bool isLetter@2(uint ucs4)
bool isLetterOrNumber@2(uint ucs4)
bool isLowSurrogate@2(uint ucs4)
bool isLower@2(uint ucs4)
bool isMark@2(uint ucs4)
bool isNonCharacter@2(uint ucs4)
bool isNumber@2(uint ucs4)
bool isPrint@2(uint ucs4)
bool isPunct@2(uint ucs4)
bool isSpace@2(uint ucs4)
bool isSurrogate@2(uint ucs4)
bool isSymbol@2(uint ucs4)
bool isTitleCase@2(uint ucs4)
bool isUpper@2(uint ucs4)
ushort lowSurrogate(uint ucs4)
uint mirroredChar@2(uint ucs4)
bool requiresSurrogates(uint ucs4)
QChar::Script script@2(uint ucs4)
uint surrogateToUcs4(ushort high, ushort low)
uint surrogateToUcs4@2(QChar high, QChar low)
uint toCaseFolded@2(uint ucs4)
uint toLower@2(uint ucs4)
uint toTitleCase@2(uint ucs4)
uint toUpper@2(uint ucs4)
QChar::UnicodeVersion unicodeVersion@2(uint ucs4)

<class>
name: QChildEvent
para: QEvent::Type,QObject *
parent: QEvent
</class>

bool added(void)
QObject *child(void)
bool polished(void)
bool removed(void)


<class>
name: QGeoPositionInfo
para: void
</class>

qreal attribute(QGeoPositionInfo::Attribute attribute)
QGeoCoordinate coordinate(void)
bool hasAttribute(QGeoPositionInfo::Attribute attribute)
bool isValid(void)
void removeAttribute(QGeoPositionInfo::Attribute attribute)
void setAttribute(QGeoPositionInfo::Attribute attribute, qreal value)
void setCoordinate(QGeoCoordinate coordinate)
void setTimestamp(QDateTime timestamp)
QDateTime timestamp(void)

<class>
name: QGeoCoordinate
para: void
</class>

double altitude(void)
QGeoCoordinate atDistanceAndAzimuth(qreal distance, qreal azimuth, qreal distanceUp)
qreal azimuthTo(QGeoCoordinate other)
qreal distanceTo(QGeoCoordinate other)
bool isValid(void)
double latitude(void)
double longitude(void)
void setAltitude(double altitude)
void setLatitude(double latitude)
void setLongitude(double longitude)
QString toString(QGeoCoordinate::CoordinateFormat format)
QGeoCoordinate::CoordinateType type(void)

<class>
name: QGeoAddress
para: void
</class>

QString city(void)
void clear(void)
QString country(void)
QString countryCode(void)
QString county(void)
QString district(void)
bool isEmpty(void)
bool isTextGenerated(void)
QString postalCode(void)
void setCity(QString city)
void setCountry(QString country)
void setCountryCode(QString countryCode)
void setCounty(QString county)
void setDistrict(QString district)
void setPostalCode(QString postalCode)
void setState(QString state)
void setStreet(QString street)
void setText(QString text)
QString state(void)
QString street(void)
QString text(void)

<class>
name: QGeoAreaMonitorInfo
para: QString
</class>

QGeoShape area(void)
QDateTime expiration(void)
QString identifier(void)
bool isPersistent(void)
bool isValid(void)
QString name(void)
QVariantMap notificationParameters(void)
void setArea(QGeoShape newShape)
void setExpiration(QDateTime expiry)
void setName(QString name)
void setNotificationParameters(QVariantMap parameters)
void setPersistent(bool isPersistent)

<class>
name: QGeoAreaMonitorSource
para: QObject *
parent: QObject
nonew
</class>

QString sourceName(void)
QStringList availableSources(void)
QGeoAreaMonitorSource * createDefaultSource(QObject * parent)
QGeoAreaMonitorSource * createSource(QString sourceName, QObject * parent)

<class>
name: QGeoCircle
para: void
</class>

QGeoCoordinate center(void)
qreal radius(void)
void setCenter(QGeoCoordinate center)
void setRadius(qreal radius)
void translate(double degreesLatitude, double degreesLongitude)
QGeoCircle translated(double degreesLatitude, double degreesLongitude)

<class>
name: QGeoPositionInfoSource
parent: QObject
codename: GGeoPositionInfoSource 
passvmpointer
abstract
</class>

QGeoPositionInfoSource::PositioningMethods preferredPositioningMethods(void)
QString sourceName(void)
int updateInterval(void)

void seterrorEvent(const char *)
void setpositionUpdatedEvent(const char *)
void setupdateTimeoutEvent(const char *)

const char *geterrorEvent(void)
const char *getpositionUpdatedEvent(void)
const char *getupdateTimeoutEvent(void)

<register>
QStringList availableSources(void)
QGeoPositionInfoSource *createDefaultSource(QObject *parent)
QGeoPositionInfoSource *createSource(QString sourceName, QObject *parent)
</register>

<code>
RING_FUNC(ring_QGeoPositionInfoSource_availableSources)
{
	if ( RING_API_PARACOUNT != 0 ) {
		RING_API_ERROR(RING_API_BADPARACOUNT);
		return ;
	}
	RING_API_IGNORECPOINTERTYPE ;
	{
		QStringList *pValue ; 
		pValue = new QStringList() ;
		*pValue = QGeoPositionInfoSource::availableSources();
		RING_API_RETMANAGEDCPOINTER(pValue,"QStringList",ring_QStringList_freefunc);
	}
}


RING_FUNC(ring_QGeoPositionInfoSource_createDefaultSource)
{
	if ( RING_API_PARACOUNT != 1 ) {
		RING_API_ERROR(RING_API_MISS1PARA);
		return ;
	}
	RING_API_IGNORECPOINTERTYPE ;
	if ( ! RING_API_ISPOINTER(1) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	RING_API_RETCPOINTER(QGeoPositionInfoSource::createDefaultSource((QObject *) RING_API_GETCPOINTER(1,"QObject")),"QGeoPositionInfoSource");
}


RING_FUNC(ring_QGeoPositionInfoSource_createSource)
{
	if ( RING_API_PARACOUNT != 2 ) {
		RING_API_ERROR(RING_API_MISS2PARA);
		return ;
	}
	RING_API_IGNORECPOINTERTYPE ;
	if ( ! RING_API_ISSTRING(1) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	if ( ! RING_API_ISPOINTER(2) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	RING_API_RETCPOINTER(QGeoPositionInfoSource::createSource(RING_API_GETSTRING(1),(QObject *) RING_API_GETCPOINTER(2,"QObject")),"QGeoPositionInfoSource");
}



</code>

<class>
name: QGeoRectangle
para: void
parent: QGeoShape
</class>

QGeoCoordinate bottomLeft(void)
QGeoCoordinate bottomRight(void)
QGeoCoordinate center(void)
bool contains(QGeoRectangle rectangle)
double height(void)
bool intersects(QGeoRectangle rectangle)
void setBottomLeft(QGeoCoordinate bottomLeft)
void setBottomRight(QGeoCoordinate bottomRight)
void setCenter(QGeoCoordinate center)
void setHeight(double degreesHeight)
void setTopLeft(QGeoCoordinate topLeft)
void setTopRight(QGeoCoordinate topRight)
void setWidth(double degreesWidth)
QGeoCoordinate topLeft(void)
QGeoCoordinate topRight(void)
void translate(double degreesLatitude, double degreesLongitude)
QGeoRectangle translated(double degreesLatitude, double degreesLongitude)
QGeoRectangle united(QGeoRectangle rectangle)
double width(void)

<class>
name: QGeoShape
para: void
</class>

bool contains(QGeoCoordinate coordinate)
bool isEmpty(void)
bool isValid(void)
QGeoShape::ShapeType type(void)

<class>
name: QGeoSatelliteInfo
para: void
</class>

qreal attribute(QGeoSatelliteInfo::Attribute attribute)
bool hasAttribute(QGeoSatelliteInfo::Attribute attribute)
void removeAttribute(QGeoSatelliteInfo::Attribute attribute)
int satelliteIdentifier(void)
QGeoSatelliteInfo::SatelliteSystem satelliteSystem(void)
void setAttribute(QGeoSatelliteInfo::Attribute attribute, qreal value)
void setSatelliteIdentifier(int satId)
void setSatelliteSystem(QGeoSatelliteInfo::SatelliteSystem system)
void setSignalStrength(int signalStrength)
int signalStrength(void)

<class>
name: QGeoSatelliteInfoSource
nonew
</class>

QString sourceName(void)
int updateInterval(void)

<class>
name: QNmeaPositionInfoSource
para: QNmeaPositionInfoSource::UpdateMode,QObject *
parent: QGeoPositionInfoSource
</class>

QIODevice * device(void)
void setDevice(QIODevice * device)
QNmeaPositionInfoSource::UpdateMode updateMode(void)
