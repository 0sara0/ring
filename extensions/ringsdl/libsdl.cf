<code>
/* Copyright (c) 2013-2016 Mahmoud Fayed <msfclipper@yahoo.com> */
#include "SDL.h"
</code>

<runcode>
aNumberTypes + "Uint32"
aNumberTypes + "SDL_bool"
aNumberTypes + "Uint16"
aEnumTypes + "SDL_HintPriority"
aEnumTypes + "SDL_LOG_CATEGORY"
aEnumTypes + "SDL_LogPriority"
aEnumTypes + "SDL_AssertState"
aEnumTypes + "SDL_BlendMode"
aEnumTypes + "SDL_GLattr"
aEnumTypes + "SDL_GLcontextFlag"
aEnumTypes + "SDL_GLprofile"
aEnumTypes + "SDL_HitTestResult"
aEnumTypes + "SDL_MessageBoxButtonFlags"
aEnumTypes + "SDL_MessageBoxColorType"
aEnumTypes + "SDL_MessageBoxFlags"
aEnumTypes + "SDL_WindowEventID"
aEnumTypes + "SDL_WindowFlags"
</runcode>

<funcstart>
sdl
</funcstart>

<struct>
SDL_Rect {x,y,w,h}
SDL_assert_data
SDL_version {major,minor,patch}
SDL_DisplayMode
SDL_MessageBoxButtonData
SDL_MessageBoxColor
SDL_MessageBoxColorScheme
SDL_MessageBoxData
SDL_WindowEvent
</struct>

<register>
void SDL_RenderCopy2(SDL_Renderer *,SDL_Texture *)
</register>

<code>
RING_FUNC(ring_SDL_RenderCopy2)
{
	if ( RING_API_PARACOUNT != 2 ) {
		RING_API_ERROR(RING_API_MISS2PARA);
		return ;
	}
	if ( ! RING_API_ISPOINTER(1) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	if ( ! RING_API_ISPOINTER(2) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	SDL_RenderCopy((SDL_Renderer *) RING_API_GETCPOINTER(1,"SDL_Renderer"),(SDL_Texture *) RING_API_GETCPOINTER(2,"SDL_Texture"),NULL,NULL);
}
</code>

SDL_Renderer *SDL_CreateRenderer(SDL_Window *, int, int)
SDL_Surface *SDL_LoadBMP(const char *)
SDL_Texture *SDL_CreateTextureFromSurface(SDL_Renderer *,SDL_Surface *)
void SDL_FreeSurface(SDL_Surface *)
void SDL_RenderClear(SDL_Renderer *)
void SDL_RenderCopy(SDL_Renderer *,SDL_Texture *,void *,void *)
void SDL_RenderPresent(SDL_Renderer *)
void SDL_Delay(int)
void SDL_DestroyTexture(SDL_Texture *)
void SDL_DestroyRenderer(SDL_Renderer *)
int SDL_RenderDrawRect(SDL_Renderer *renderer,SDL_Rect *rect)
int SDL_SetRenderDrawColor(SDL_Renderer *renderer,int,int,int,int) 

<comment>
Initialization and Shutdown
</comment>

void SDL_Init(int)
int SDL_InitSubSystem(Uint32 flags)
void SDL_Quit(void)
void SDL_QuitSubSystem(Uint32 flags)
void SDL_SetMainReady(void)
Uint32 SDL_WasInit(Uint32 flags)
<comment>
int SDL_WinRTRunApp(MainFunction mainFunction, void *reserved)
</comment>

<comment>
Configuration Variables
</comment>

<comment>
void SDL_AddHintCallback(const char *name,SDL_HintCallback callback, void *userdata)
</comment>
void SDL_ClearHints(void)
<comment>
void SDL_DelHintCallback(const char *name, SDL_HintCallback callback,void *userdata)
</comment>
const char *SDL_GetHint(const char* name)
SDL_bool SDL_SetHint(const char *name,const char *value)
SDL_bool SDL_SetHintWithPriority(const char *name,const char *value,SDL_HintPriority priority)

<comment>
Error Handling
</comment>

void SDL_ClearError(void)
const char *SDL_GetError(void)
int SDL_SetError(const char *fmt)

<comment>
Log Handling
</comment>

void SDL_Log(const char *fmt)
void SDL_LogCritical(int category,const char *fmt)
void SDL_LogDebug(int category,const char *fmt)
void SDL_LogError(int category,const char* fmt)
<comment>
void SDL_LogGetOutputFunction(SDL_LogOutputFunction *callback,void **userdata)
</comment>
SDL_LogPriority SDL_LogGetPriority(int category)
void SDL_LogInfo(int category, const char *fmt)
void SDL_LogMessage(int category,SDL_LogPriority priority,const char *fmt)
<comment>
void SDL_LogMessageV(int category,SDL_LogPriority priority, const char *fmt,va_list ap)
</comment>
void SDL_LogResetPriorities(void)
void SDL_LogSetAllPriority(SDL_LogPriority priority)
<comment>
void SDL_LogSetOutputFunction(SDL_LogOutputFunction callback,void *userdata)
</comment>
void SDL_LogSetPriority(int category,SDL_LogPriority priority)
void SDL_LogVerbose(int category, const char *fmt)
void SDL_LogWarn(int category,const char *fmt)

<comment>
Assertions
</comment>

<comment>
SDL_AssertionHandler SDL_GetAssertionHandler(void **puserdata)
</comment>
SDL_AssertData *SDL_GetAssertionReport(void)
SDL_AssertionHandler SDL_GetDefaultAssertionHandler(void)
void SDL_ResetAssertionReport(void)
void SDL_SetAssertionHandler(SDL_AssertionHandler handler,void *userdata)
void SDL_TriggerBreakpoint(void)
void SDL_assert(int)
void SDL_assert_paranoid(int)
void SDL_assert_release(int)

<comment>
Querying SDL Version
</comment>

const char* SDL_GetRevision(void)
int SDL_GetRevisionNumber(void)
void SDL_GetVersion(SDL_version *ver)

<comment>
SDL_COMPILEDVERSION
SDL_REVISION
SDL_VERSION
SDL_VERSIONNUM
SDL_VERSION_ATLEAST
</comment>

<comment>
Display and Window Management
</comment>

SDL_Window *SDL_CreateWindow(const char* title,int x, int y,int w,int h,Uint32 flags)
<comment>
int SDL_CreateWindowAndRenderer(int width,int height,Uint32 window_flags,SDL_Window **window,SDL_Renderer **renderer)
</comment>
SDL_Window *SDL_CreateWindowFrom(const void *data)
void SDL_DestroyWindow(SDL_Window *window)
void SDL_DisableScreenSaver(void)
void SDL_EnableScreenSaver(void)
SDL_GLContext SDL_GL_CreateContext(SDL_Window *window)
void SDL_GL_DeleteContext(SDL_GLContext context)
SDL_bool SDL_GL_ExtensionSupported(const char *extension)
int SDL_GL_GetAttribute(SDL_GLattr attr,int *value)
SDL_GLContext SDL_GL_GetCurrentContext(void)
SDL_Window *SDL_GL_GetCurrentWindow(void)
void SDL_GL_GetDrawableSize(SDL_Window *window,int *w,int *h)
void *SDL_GL_GetProcAddress(const char *proc)
int SDL_GL_GetSwapInterval(void)
int SDL_GL_LoadLibrary(const char *path)
int SDL_GL_MakeCurrent(SDL_Window *window,SDL_GLContext context)
void SDL_GL_ResetAttributes(void)
int SDL_GL_SetAttribute(SDL_GLattr attr,int value)
int SDL_GL_SetSwapInterval(int interval)
void SDL_GL_SwapWindow(SDL_Window *window)
void SDL_GL_UnloadLibrary(void)
SDL_DisplayMode *SDL_GetClosestDisplayMode(int displayIndex,SDL_DisplayMode *mode,SDL_DisplayMode *closest)
int SDL_GetCurrentDisplayMode(int displayIndex,SDL_DisplayMode *mode)
const char *SDL_GetCurrentVideoDriver(void)
int SDL_GetDesktopDisplayMode(int displayIndex,SDL_DisplayMode *mode)
int SDL_GetDisplayBounds(int displayIndex,SDL_Rect *rect)
<comment>
int SDL_GetDisplayDPI(int displayIndex,float *ddpi,float *hdpi,float * vdpi)
<comment>
int SDL_GetDisplayMode(int displayIndex,int modeIndex,SDL_DisplayMode* mode)
const char *SDL_GetDisplayName(int displayIndex)
<comment>
int SDL_GetDisplayUsableBounds(int displayIndex,SDL_Rect *rect)
SDL_Window *SDL_GetGrabbedWindow(void)
</comment>
int SDL_GetNumDisplayModes(int displayIndex)
int SDL_GetNumVideoDisplays(void)
int SDL_GetNumVideoDrivers(void)
const char* SDL_GetVideoDriver(int index)
<comment>
int SDL_GetWindowBordersSize(SDL_Window *window,int *top,int *left,int *bottom,int *right)
</comment>
float SDL_GetWindowBrightness(SDL_Window *window)
void *SDL_GetWindowData(SDL_Window *window,const char *name)
int SDL_GetWindowDisplayIndex(SDL_Window *window)
int SDL_GetWindowDisplayMode(SDL_Window *window,SDL_DisplayMode *mode)
Uint32 SDL_GetWindowFlags(SDL_Window *window)
SDL_Window *SDL_GetWindowFromID(Uint32 id)
int SDL_GetWindowGammaRamp(SDL_Window *window,Uint16 *red,Uint16 *green,Uint16 *blue)
SDL_bool SDL_GetWindowGrab(SDL_Window *window)
Uint32 SDL_GetWindowID(SDL_Window* window)
void SDL_GetWindowMaximumSize(SDL_Window *window,int *w,int *h)
void SDL_GetWindowMinimumSize(SDL_Window *window,int *w,int *h)
<comment>
int SDL_GetWindowOpacity(SDL_Window *window,float *opacity)'
</comment>
Uint32 SDL_GetWindowPixelFormat(SDL_Window *window)
void SDL_GetWindowPosition(SDL_Window *window,int *x,int *y)
void SDL_GetWindowSize(SDL_Window *window,int *w,int *h)
SDL_Surface *SDL_GetWindowSurface(SDL_Window *window)
const char *SDL_GetWindowTitle(SDL_Window *window)
<comment>
SDL_bool SDL_GetWindowWMInfo(SDL_Window *window,SDL_SysWMinfo *info)
</comment>
void SDL_HideWindow(SDL_Window *window)
SDL_bool SDL_IsScreenSaverEnabled(void)
void SDL_MaximizeWindow(SDL_Window *window)
void SDL_MinimizeWindow(SDL_Window *window)
void SDL_RaiseWindow(SDL_Window *window)
void SDL_RestoreWindow(SDL_Window *window)
void SDL_SetWindowBordered(SDL_Window *window,SDL_bool bordered)
int SDL_SetWindowBrightness(SDL_Window *window,float brightness)
void *SDL_SetWindowData(SDL_Window *window,const char *name,void *userdata)
int SDL_SetWindowDisplayMode(SDL_Window *window,const SDL_DisplayMode *mode)
int SDL_SetWindowFullscreen(SDL_Window *window,Uint32 flags)
int SDL_SetWindowGammaRamp(SDL_Window *window,const Uint16 *red,const Uint16 *green,const Uint16* blue)
void SDL_SetWindowGrab(SDL_Window *window,SDL_bool grabbed)
<comment>
int SDL_SetWindowHitTest(SDL_Window *window,SDL_HitTest callback,void *callback_data)
</comment>
void SDL_SetWindowIcon(SDL_Window *window,SDL_Surface *icon)
<comment>
int SDL_SetWindowInputFocus(SDL_Window *window)
</comment>
void SDL_SetWindowMaximumSize(SDL_Window *window,int max_w,int max_h)
void SDL_SetWindowMinimumSize(SDL_Window* window,int min_w,int min_h)
<comment>
int SDL_SetWindowModalFor(SDL_Window * modal_window,SDL_Window * parent_window)
int SDL_SetWindowOpacity(SDL_Window * window,float opacity)
</comment>
void SDL_SetWindowPosition(SDL_Window *window,int x,int y)
void SDL_SetWindowSize(SDL_Window *window,int w,int h)
void SDL_SetWindowTitle(SDL_Window *window,const char *title)
int SDL_ShowMessageBox(const SDL_MessageBoxData *messageboxdata,int *buttonid)
int SDL_ShowSimpleMessageBox(Uint32 flags,const char *title,const char *message,SDL_Window *window)
void SDL_ShowWindow(SDL_Window *window)
int SDL_UpdateWindowSurface(SDL_Window *window)
int SDL_UpdateWindowSurfaceRects(SDL_Window *window,const SDL_Rect *rects,int numrects)
int SDL_VideoInit(const char *driver_name)
void SDL_VideoQuit(void)
