<code>
/* Copyright (c) 2013-2016 Mahmoud Fayed <msfclipper@yahoo.com> */
#include "SDL.h"
</code>

<runcode>
aNumberTypes + "Uint32"
aNumberTypes + "SDL_bool"
aEnumTypes + "SDL_HintPriority"
aEnumTypes + "SDL_LOG_CATEGORY"
aEnumTypes + "SDL_LogPriority"
aEnumTypes + "SDL_AssertState"
</runcode>

<funcstart>
sdl
</funcstart>

<struct>
SDL_Rect {x,y,w,h}
SDL_assert_data
SDL_version {major,minor,patch}
</struct>

<register>
void SDL_RenderCopy2(SDL_Renderer *,SDL_Texture *)
</register>

<code>
RING_FUNC(ring_SDL_RenderCopy2)
{
	if ( RING_API_PARACOUNT != 2 ) {
		RING_API_ERROR(RING_API_MISS2PARA);
		return ;
	}
	if ( ! RING_API_ISPOINTER(1) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	if ( ! RING_API_ISPOINTER(2) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	SDL_RenderCopy((SDL_Renderer *) RING_API_GETCPOINTER(1,"SDL_Renderer"),(SDL_Texture *) RING_API_GETCPOINTER(2,"SDL_Texture"),NULL,NULL);
}
</code>

SDL_Window *SDL_CreateWindow(const char *, int, int, int, int, int)
SDL_Renderer *SDL_CreateRenderer(SDL_Window *, int, int)
SDL_Surface *SDL_LoadBMP(const char *)
SDL_Texture *SDL_CreateTextureFromSurface(SDL_Renderer *,SDL_Surface *)
void SDL_FreeSurface(SDL_Surface *)
void SDL_RenderClear(SDL_Renderer *)
void SDL_RenderCopy(SDL_Renderer *,SDL_Texture *,void *,void *)
void SDL_RenderPresent(SDL_Renderer *)
void SDL_Delay(int)
void SDL_DestroyTexture(SDL_Texture *)
void SDL_DestroyRenderer(SDL_Renderer *)
void SDL_DestroyWindow(SDL_Window *)
int SDL_RenderDrawRect(SDL_Renderer *renderer,SDL_Rect *rect)
int SDL_SetRenderDrawColor(SDL_Renderer *renderer,int,int,int,int) 

<comment>
Initialization and Shutdown
</comment>

void SDL_Init(int)
int SDL_InitSubSystem(Uint32 flags)
void SDL_Quit(void)
void SDL_QuitSubSystem(Uint32 flags)
void SDL_SetMainReady(void)
Uint32 SDL_WasInit(Uint32 flags)
<comment>
int SDL_WinRTRunApp(MainFunction mainFunction, void *reserved)
</comment>

<comment>
Configuration Variables
</comment>

<comment>
void SDL_AddHintCallback(const char *name,SDL_HintCallback callback, void *userdata)
</comment>
void SDL_ClearHints(void)
<comment>
void SDL_DelHintCallback(const char *name, SDL_HintCallback callback,void *userdata)
</comment>
const char *SDL_GetHint(const char* name)
SDL_bool SDL_SetHint(const char *name,const char *value)
SDL_bool SDL_SetHintWithPriority(const char *name,const char *value,SDL_HintPriority priority)

<comment>
Error Handling
</comment>

void SDL_ClearError(void)
const char *SDL_GetError(void)
int SDL_SetError(const char *fmt)

<comment>
Log Handling
</comment>

void SDL_Log(const char *fmt)
void SDL_LogCritical(int category,const char *fmt)
void SDL_LogDebug(int category,const char *fmt)
void SDL_LogError(int category,const char* fmt)
<comment>
void SDL_LogGetOutputFunction(SDL_LogOutputFunction *callback,void **userdata)
</comment>
SDL_LogPriority SDL_LogGetPriority(int category)
void SDL_LogInfo(int category, const char *fmt)
void SDL_LogMessage(int category,SDL_LogPriority priority,const char *fmt)
<comment>
void SDL_LogMessageV(int category,SDL_LogPriority priority, const char *fmt,va_list ap)
</comment>
void SDL_LogResetPriorities(void)
void SDL_LogSetAllPriority(SDL_LogPriority priority)
<comment>
void SDL_LogSetOutputFunction(SDL_LogOutputFunction callback,void *userdata)
</comment>
void SDL_LogSetPriority(int category,SDL_LogPriority priority)
void SDL_LogVerbose(int category, const char *fmt)
void SDL_LogWarn(int category,const char *fmt)

<comment>
Assertions
</comment>

<comment>
SDL_AssertionHandler SDL_GetAssertionHandler(void **puserdata)
</comment>
SDL_AssertData *SDL_GetAssertionReport(void)
SDL_AssertionHandler SDL_GetDefaultAssertionHandler(void)
void SDL_ResetAssertionReport(void)
void SDL_SetAssertionHandler(SDL_AssertionHandler handler,void *userdata)
void SDL_TriggerBreakpoint(void)
void SDL_assert(int)
void SDL_assert_paranoid(int)
void SDL_assert_release(int)

<comment>
Querying SDL Version
</comment>

const char* SDL_GetRevision(void)
int SDL_GetRevisionNumber(void)
void SDL_GetVersion(SDL_version *ver)

<comment>
SDL_COMPILEDVERSION
SDL_REVISION
SDL_VERSION
SDL_VERSIONNUM
SDL_VERSION_ATLEAST
</comment>
