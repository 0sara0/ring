<code>
/* Copyright (c) 2013-2016 Mahmoud Fayed <msfclipper@yahoo.com> */
#include "SDL.h"
#include "SDL_syswm.h"
#include "SDL_events.h"
</code>

<runcode>
aNumberTypes + "Uint32"
aNumberTypes + "SDL_bool"
aNumberTypes + "Uint16"
aNumberTypes + "Uint8"
aEnumTypes + "SDL_HintPriority"
aEnumTypes + "SDL_LOG_CATEGORY"
aEnumTypes + "SDL_LogPriority"
aEnumTypes + "SDL_AssertState"
aEnumTypes + "SDL_BlendMode"
aEnumTypes + "SDL_GLattr"
aEnumTypes + "SDL_GLcontextFlag"
aEnumTypes + "SDL_GLprofile"
aEnumTypes + "SDL_HitTestResult"
aEnumTypes + "SDL_MessageBoxButtonFlags"
aEnumTypes + "SDL_MessageBoxColorType"
aEnumTypes + "SDL_MessageBoxFlags"
aEnumTypes + "SDL_WindowEventID"
aEnumTypes + "SDL_WindowFlags"
aEnumTypes + "SDL_RendererFlags"
aEnumTypes + "SDL_RendererFlip"
aEnumTypes + "SDL_TextureAccess"
aEnumTypes + "SDL_TextureModulate"
aEnumTypes + "SDL_PixelFormatEnum"
aEnumTypes + "SDL_SYSWM_TYPE"
aEnumTypes + "SDL_EventType"
aEnumTypes + "SDL_WindowEventID"
</runcode>

<funcstart>
sdl
</funcstart>

<struct>
SDL_assert_data
SDL_version {major,minor,patch}
SDL_DisplayMode
SDL_MessageBoxButtonData
SDL_MessageBoxColor
SDL_MessageBoxColorScheme
SDL_MessageBoxData
SDL_RendererInfo
SDL_Color
SDL_Palette
SDL_PixelFormat
SDL_Point {x,y}
SDL_Rect {x,y,w,h}
SDL_Surface
SDL_SysWMinfo
SDL_SysWMmsg
SDL_ControllerAxisEvent
SDL_ControllerButtonEvent
SDL_ControllerDeviceEvent
SDL_DollarGestureEvent
SDL_DropEvent
SDL_Event
SDL_Finger
SDL_JoyAxisEvent
SDL_JoyBallEvent
SDL_JoyButtonEvent
SDL_JoyDeviceEvent
SDL_JoyHatEvent
SDL_KeyboardEvent
SDL_MouseButtonEvent
SDL_MouseMotionEvent
SDL_MouseWheelEvent
SDL_MultiGestureEvent
SDL_QuitEvent
SDL_SysWMEvent
SDL_TextEditingEvent
SDL_TextInputEvent
SDL_TouchFingerEvent
SDL_UserEvent
SDL_WindowEvent
</struct>

<register>
void SDL_RenderCopy2(SDL_Renderer *,SDL_Texture *)
</register>

<code>
RING_FUNC(ring_SDL_RenderCopy2)
{
	if ( RING_API_PARACOUNT != 2 ) {
		RING_API_ERROR(RING_API_MISS2PARA);
		return ;
	}
	if ( ! RING_API_ISPOINTER(1) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	if ( ! RING_API_ISPOINTER(2) ) {
		RING_API_ERROR(RING_API_BADPARATYPE);
		return ;
	}
	SDL_RenderCopy((SDL_Renderer *) RING_API_GETCPOINTER(1,"SDL_Renderer"),(SDL_Texture *) RING_API_GETCPOINTER(2,"SDL_Texture"),NULL,NULL);
}
</code>

void SDL_Delay(int)

<comment>
Initialization and Shutdown
</comment>

void SDL_Init(int)
int SDL_InitSubSystem(Uint32 flags)
void SDL_Quit(void)
void SDL_QuitSubSystem(Uint32 flags)
void SDL_SetMainReady(void)
Uint32 SDL_WasInit(Uint32 flags)
<comment>
int SDL_WinRTRunApp(MainFunction mainFunction, void *reserved)
</comment>

<comment>
Configuration Variables
</comment>

<comment>
void SDL_AddHintCallback(const char *name,SDL_HintCallback callback, void *userdata)
</comment>
void SDL_ClearHints(void)
<comment>
void SDL_DelHintCallback(const char *name, SDL_HintCallback callback,void *userdata)
</comment>
const char *SDL_GetHint(const char* name)
SDL_bool SDL_SetHint(const char *name,const char *value)
SDL_bool SDL_SetHintWithPriority(const char *name,const char *value,SDL_HintPriority priority)

<comment>
Error Handling
</comment>

void SDL_ClearError(void)
const char *SDL_GetError(void)
int SDL_SetError(const char *fmt)

<comment>
Log Handling
</comment>

void SDL_Log(const char *fmt)
void SDL_LogCritical(int category,const char *fmt)
void SDL_LogDebug(int category,const char *fmt)
void SDL_LogError(int category,const char* fmt)
<comment>
void SDL_LogGetOutputFunction(SDL_LogOutputFunction *callback,void **userdata)
</comment>
SDL_LogPriority SDL_LogGetPriority(int category)
void SDL_LogInfo(int category, const char *fmt)
void SDL_LogMessage(int category,SDL_LogPriority priority,const char *fmt)
<comment>
void SDL_LogMessageV(int category,SDL_LogPriority priority, const char *fmt,va_list ap)
</comment>
void SDL_LogResetPriorities(void)
void SDL_LogSetAllPriority(SDL_LogPriority priority)
<comment>
void SDL_LogSetOutputFunction(SDL_LogOutputFunction callback,void *userdata)
</comment>
void SDL_LogSetPriority(int category,SDL_LogPriority priority)
void SDL_LogVerbose(int category, const char *fmt)
void SDL_LogWarn(int category,const char *fmt)

<comment>
Assertions
</comment>

<comment>
SDL_AssertionHandler SDL_GetAssertionHandler(void **puserdata)
</comment>
SDL_AssertData *SDL_GetAssertionReport(void)
SDL_AssertionHandler SDL_GetDefaultAssertionHandler(void)
void SDL_ResetAssertionReport(void)
void SDL_SetAssertionHandler(SDL_AssertionHandler handler,void *userdata)
void SDL_TriggerBreakpoint(void)
void SDL_assert(int)
void SDL_assert_paranoid(int)
void SDL_assert_release(int)

<comment>
Querying SDL Version
</comment>

const char* SDL_GetRevision(void)
int SDL_GetRevisionNumber(void)
void SDL_GetVersion(SDL_version *ver)

<comment>
SDL_COMPILEDVERSION
SDL_REVISION
SDL_VERSION
SDL_VERSIONNUM
SDL_VERSION_ATLEAST
</comment>

<comment>
Display and Window Management
</comment>

SDL_Window *SDL_CreateWindow(const char* title,int x, int y,int w,int h,Uint32 flags)
<comment>
int SDL_CreateWindowAndRenderer(int width,int height,Uint32 window_flags,SDL_Window **window,SDL_Renderer **renderer)
</comment>
SDL_Window *SDL_CreateWindowFrom(const void *data)
void SDL_DestroyWindow(SDL_Window *window)
void SDL_DisableScreenSaver(void)
void SDL_EnableScreenSaver(void)
SDL_GLContext SDL_GL_CreateContext(SDL_Window *window)
void SDL_GL_DeleteContext(SDL_GLContext context)
SDL_bool SDL_GL_ExtensionSupported(const char *extension)
int SDL_GL_GetAttribute(SDL_GLattr attr,int *value)
SDL_GLContext SDL_GL_GetCurrentContext(void)
SDL_Window *SDL_GL_GetCurrentWindow(void)
void SDL_GL_GetDrawableSize(SDL_Window *window,int *w,int *h)
void *SDL_GL_GetProcAddress(const char *proc)
int SDL_GL_GetSwapInterval(void)
int SDL_GL_LoadLibrary(const char *path)
int SDL_GL_MakeCurrent(SDL_Window *window,SDL_GLContext context)
void SDL_GL_ResetAttributes(void)
int SDL_GL_SetAttribute(SDL_GLattr attr,int value)
int SDL_GL_SetSwapInterval(int interval)
void SDL_GL_SwapWindow(SDL_Window *window)
void SDL_GL_UnloadLibrary(void)
SDL_DisplayMode *SDL_GetClosestDisplayMode(int displayIndex,SDL_DisplayMode *mode,SDL_DisplayMode *closest)
int SDL_GetCurrentDisplayMode(int displayIndex,SDL_DisplayMode *mode)
const char *SDL_GetCurrentVideoDriver(void)
int SDL_GetDesktopDisplayMode(int displayIndex,SDL_DisplayMode *mode)
int SDL_GetDisplayBounds(int displayIndex,SDL_Rect *rect)
<comment>
int SDL_GetDisplayDPI(int displayIndex,float *ddpi,float *hdpi,float * vdpi)
<comment>
int SDL_GetDisplayMode(int displayIndex,int modeIndex,SDL_DisplayMode* mode)
const char *SDL_GetDisplayName(int displayIndex)
<comment>
int SDL_GetDisplayUsableBounds(int displayIndex,SDL_Rect *rect)
SDL_Window *SDL_GetGrabbedWindow(void)
</comment>
int SDL_GetNumDisplayModes(int displayIndex)
int SDL_GetNumVideoDisplays(void)
int SDL_GetNumVideoDrivers(void)
const char* SDL_GetVideoDriver(int index)
<comment>
int SDL_GetWindowBordersSize(SDL_Window *window,int *top,int *left,int *bottom,int *right)
</comment>
float SDL_GetWindowBrightness(SDL_Window *window)
void *SDL_GetWindowData(SDL_Window *window,const char *name)
int SDL_GetWindowDisplayIndex(SDL_Window *window)
int SDL_GetWindowDisplayMode(SDL_Window *window,SDL_DisplayMode *mode)
Uint32 SDL_GetWindowFlags(SDL_Window *window)
SDL_Window *SDL_GetWindowFromID(Uint32 id)
int SDL_GetWindowGammaRamp(SDL_Window *window,Uint16 *red,Uint16 *green,Uint16 *blue)
SDL_bool SDL_GetWindowGrab(SDL_Window *window)
Uint32 SDL_GetWindowID(SDL_Window* window)
void SDL_GetWindowMaximumSize(SDL_Window *window,int *w,int *h)
void SDL_GetWindowMinimumSize(SDL_Window *window,int *w,int *h)
<comment>
int SDL_GetWindowOpacity(SDL_Window *window,float *opacity)'
</comment>
Uint32 SDL_GetWindowPixelFormat(SDL_Window *window)
void SDL_GetWindowPosition(SDL_Window *window,int *x,int *y)
void SDL_GetWindowSize(SDL_Window *window,int *w,int *h)
SDL_Surface *SDL_GetWindowSurface(SDL_Window *window)
const char *SDL_GetWindowTitle(SDL_Window *window)
<comment>
SDL_bool SDL_GetWindowWMInfo(SDL_Window *window,SDL_SysWMinfo *info)
</comment>
void SDL_HideWindow(SDL_Window *window)
SDL_bool SDL_IsScreenSaverEnabled(void)
void SDL_MaximizeWindow(SDL_Window *window)
void SDL_MinimizeWindow(SDL_Window *window)
void SDL_RaiseWindow(SDL_Window *window)
void SDL_RestoreWindow(SDL_Window *window)
void SDL_SetWindowBordered(SDL_Window *window,SDL_bool bordered)
int SDL_SetWindowBrightness(SDL_Window *window,float brightness)
void *SDL_SetWindowData(SDL_Window *window,const char *name,void *userdata)
int SDL_SetWindowDisplayMode(SDL_Window *window,const SDL_DisplayMode *mode)
int SDL_SetWindowFullscreen(SDL_Window *window,Uint32 flags)
int SDL_SetWindowGammaRamp(SDL_Window *window,const Uint16 *red,const Uint16 *green,const Uint16* blue)
void SDL_SetWindowGrab(SDL_Window *window,SDL_bool grabbed)
<comment>
int SDL_SetWindowHitTest(SDL_Window *window,SDL_HitTest callback,void *callback_data)
</comment>
void SDL_SetWindowIcon(SDL_Window *window,SDL_Surface *icon)
<comment>
int SDL_SetWindowInputFocus(SDL_Window *window)
</comment>
void SDL_SetWindowMaximumSize(SDL_Window *window,int max_w,int max_h)
void SDL_SetWindowMinimumSize(SDL_Window* window,int min_w,int min_h)
<comment>
int SDL_SetWindowModalFor(SDL_Window * modal_window,SDL_Window * parent_window)
int SDL_SetWindowOpacity(SDL_Window * window,float opacity)
</comment>
void SDL_SetWindowPosition(SDL_Window *window,int x,int y)
void SDL_SetWindowSize(SDL_Window *window,int w,int h)
void SDL_SetWindowTitle(SDL_Window *window,const char *title)
int SDL_ShowMessageBox(const SDL_MessageBoxData *messageboxdata,int *buttonid)
int SDL_ShowSimpleMessageBox(Uint32 flags,const char *title,const char *message,SDL_Window *window)
void SDL_ShowWindow(SDL_Window *window)
int SDL_UpdateWindowSurface(SDL_Window *window)
int SDL_UpdateWindowSurfaceRects(SDL_Window *window,const SDL_Rect *rects,int numrects)
int SDL_VideoInit(const char *driver_name)
void SDL_VideoQuit(void)

<comment>
2D Accelerated Rendering
</comment>

SDL_Renderer *SDL_CreateRenderer(SDL_Window *window,int index,Uint32 flags)
SDL_Renderer *SDL_CreateSoftwareRenderer(SDL_Surface *surface)
SDL_Texture *SDL_CreateTexture(SDL_Renderer *renderer,Uint32 format,int access,int w,int h)
SDL_Texture *SDL_CreateTextureFromSurface(SDL_Renderer *renderer,SDL_Surface *surface)
<comment>
int SDL_CreateWindowAndRenderer(int width,int height,Uint32 window_flags,SDL_Window **window,SDL_Renderer **renderer)
</comment>
void SDL_DestroyRenderer(SDL_Renderer *renderer)
void SDL_DestroyTexture(SDL_Texture *texture)
int SDL_GL_BindTexture(SDL_Texture *texture,float *texw,float *texh)
int SDL_GL_UnbindTexture(SDL_Texture *texture)
int SDL_GetNumRenderDrivers(void)
int SDL_GetRenderDrawBlendMode(SDL_Renderer *renderer,SDL_BlendMode *blendMode)
int SDL_GetRenderDrawColor(SDL_Renderer *renderer,Uint8 *r,Uint8 *g,Uint8 *b,Uint8 *a)
int SDL_GetRenderDriverInfo(int index,SDL_RendererInfo *info)
SDL_Texture *SDL_GetRenderTarget(SDL_Renderer *renderer)
SDL_Renderer *SDL_GetRenderer(SDL_Window *window)
int SDL_GetRendererInfo(SDL_Renderer *renderer,SDL_RendererInfo *info)
int SDL_GetRendererOutputSize(SDL_Renderer *renderer,int *w,int *h)
int SDL_GetTextureAlphaMod(SDL_Texture *texture,Uint8 *alpha)
int SDL_GetTextureBlendMode(SDL_Texture *texture,SDL_BlendMode *blendMode)
int SDL_GetTextureColorMod(SDL_Texture *texture,Uint8 *r,Uint8 *g,Uint8 *b)
int SDL_LockTexture(SDL_Texture *texture,const SDL_Rect *rect,void **pixels,int *pitch)
int SDL_QueryTexture(SDL_Texture *texture,Uint32 *format,int *access,int *w,int *h)
int SDL_RenderClear(SDL_Renderer *renderer)
int SDL_RenderCopy(SDL_Renderer *renderer,SDL_Texture *texture,const SDL_Rect *srcrect,const SDL_Rect *dstrect)
int SDL_RenderCopyEx(SDL_Renderer *renderer,SDL_Texture *texture,const SDL_Rect *srcrect,const SDL_Rect *dstrect,const double angle,const SDL_Point *center,const SDL_RendererFlip flip)
int SDL_RenderDrawLine(SDL_Renderer *renderer,int x1,int y1,int x2,int y2)
int SDL_RenderDrawLines(SDL_Renderer *renderer,const SDL_Point *points,int count)
int SDL_RenderDrawPoint(SDL_Renderer *renderer,int x, int y)
int SDL_RenderDrawPoints(SDL_Renderer *renderer,const SDL_Point *points,int count)
int SDL_RenderDrawRect(SDL_Renderer *renderer,const SDL_Rect *rect)
int SDL_RenderDrawRects(SDL_Renderer *renderer,const SDL_Rect *rects,int count)
int SDL_RenderFillRect(SDL_Renderer *renderer,const SDL_Rect *rect)
int SDL_RenderFillRects(SDL_Renderer *renderer,const SDL_Rect* rects,int count)
void SDL_RenderGetClipRect(SDL_Renderer *renderer,SDL_Rect *rect)
<comment>
SDL_bool SDL_RenderGetIntegerScale(SDL_Renderer *renderer)
</comment>
void SDL_RenderGetLogicalSize(SDL_Renderer *renderer,int *w,int *h)
void SDL_RenderGetScale(SDL_Renderer *renderer,float *scaleX,float *scaleY)
void SDL_RenderGetViewport(SDL_Renderer *renderer,SDL_Rect *rect)
<comment>
SDL_bool SDL_RenderIsClipEnabled(SDL_Renderer *renderer)
</comment>
void SDL_RenderPresent(SDL_Renderer *renderer)
int SDL_RenderReadPixels(SDL_Renderer *renderer,const SDL_Rect *rect,Uint32 format,void *pixels,int pitch)
int SDL_RenderSetClipRect(SDL_Renderer *renderer,const SDL_Rect *rect)
<comment>
int SDL_RenderSetIntegerScale(SDL_Renderer *renderer,SDL_bool enable)
</comment>
int SDL_RenderSetLogicalSize(SDL_Renderer *renderer,int w,int h)
int SDL_RenderSetScale(SDL_Renderer *renderer,float scaleX,float scaleY)
int SDL_RenderSetViewport(SDL_Renderer *renderer,const SDL_Rect *rect)
SDL_bool SDL_RenderTargetSupported(SDL_Renderer *renderer)
int SDL_SetRenderDrawBlendMode(SDL_Renderer *renderer,SDL_BlendMode blendMode)
int SDL_SetRenderDrawColor(SDL_Renderer *renderer,Uint8 r,Uint8 g,Uint8 b,Uint8 a)
int SDL_SetRenderTarget(SDL_Renderer *renderer,SDL_Texture *texture)
int SDL_SetTextureAlphaMod(SDL_Texture *texture,Uint8 alpha)
int SDL_SetTextureBlendMode(SDL_Texture *texture,SDL_BlendMode blendMode)
int SDL_SetTextureColorMod(SDL_Texture *texture,Uint8 r,Uint8 g,Uint8 b)
void SDL_UnlockTexture(SDL_Texture *texture)
int SDL_UpdateTexture(SDL_Texture *texture,const SDL_Rect *rect,const void*pixels,int pitch)
int SDL_UpdateYUVTexture(SDL_Texture *texture,const SDL_Rect *rect,const Uint8 *Yplane,int Ypitch,const Uint8 *Uplane,int Upitch,const Uint8 *Vplane,int Vpitch)

<comment>
Pixel Formats and Conversion Routines
</comment>

SDL_PixelFormat *SDL_AllocFormat(Uint32 pixel_format)
SDL_Palette *SDL_AllocPalette(int ncolors)
void SDL_CalculateGammaRamp(float gamma,Uint16 *ramp)
void SDL_FreeFormat(SDL_PixelFormat *format)
void SDL_FreePalette(SDL_Palette *palette)
const char *SDL_GetPixelFormatName(Uint32 format)
void SDL_GetRGB(Uint32 pixel,const SDL_PixelFormat* format,Uint8 *r,Uint8 *g,Uint8 *b)
void SDL_GetRGBA(Uint32 pixel,const SDL_PixelFormat* format,Uint8 *r,Uint8 *g,Uint8 *b,Uint8 *a)
Uint32 SDL_MapRGB(const SDL_PixelFormat* format,Uint8 r,Uint8 g, Uint8 b)
Uint32 SDL_MapRGBA(const SDL_PixelFormat* format,Uint8 r,Uint8 g, Uint8 b, Uint8 a)
Uint32 SDL_MasksToPixelFormatEnum(int bpp,Uint32 Rmask,Uint32 Gmask,Uint32 Bmask,Uint32 Amask)
SDL_bool SDL_PixelFormatEnumToMasks(Uint32 format,int *bpp,Uint32 *Rmask,Uint32 *Gmask,Uint32 *Bmask,Uint32 *Amask)
int SDL_SetPaletteColors(SDL_Palette *palette,const SDL_Color *colors,int firstcolor,int ncolors)
int SDL_SetPixelFormatPalette(SDL_PixelFormat *format,SDL_Palette *palette)

<comment>
Rectangle Functions
</comment>

SDL_bool SDL_EnclosePoints(const SDL_Point* points,int count,const SDL_Rect *clip,SDL_Rect *result)
SDL_bool SDL_HasIntersection(const SDL_Rect *A,const SDL_Rect *B)
SDL_bool SDL_IntersectRect(const SDL_Rect *A,const SDL_Rect *B,SDL_Rect *result)
SDL_bool SDL_IntersectRectAndLine(const SDL_Rect *rect,int *X1,int *Y1,int *X2,int *Y2)
<comment>
SDL_bool SDL_PointInRect(const SDL_Point *p,const SDL_Rect *r)
</comment>
SDL_bool SDL_RectEmpty(const SDL_Rect *r)
SDL_bool SDL_RectEquals(const SDL_Rect *a,const SDL_Rect *b)
void SDL_UnionRect(const SDL_Rect *A,const SDL_Rect *B,SDL_Rect *result)

<comment>
Surface Creation and Simple Drawing
</comment>

int SDL_BlitScaled(SDL_Surface *src,const SDL_Rect *srcrect,SDL_Surface *dst,SDL_Rect *dstrect)
int SDL_BlitSurface(SDL_Surface *src,const SDL_Rect* srcrect,SDL_Surface *dst,SDL_Rect *dstrect)
int SDL_ConvertPixels(int width,int height,Uint32 src_format,const void *src,int src_pitch,Uint32 dst_format,void *dst,int dst_pitch)
SDL_Surface *SDL_ConvertSurface(SDL_Surface *src,const SDL_PixelFormat *fmt,Uint32 flags)
SDL_Surface *SDL_ConvertSurfaceFormat(SDL_Surface *src,Uint32 pixel_format,Uint32 flags)
SDL_Surface *SDL_CreateRGBSurface(Uint32 flags,int width,int height,int depth,Uint32 Rmask,Uint32 Gmask,Uint32 Bmask,Uint32 Amask)
SDL_Surface* SDL_CreateRGBSurfaceFrom(void *pixels,int width,int height,int depth,int pitch,Uint32 Rmask,Uint32 Gmask,Uint32 Bmask,Uint32 Amask)
int SDL_FillRect(SDL_Surface *dst,const SDL_Rect *rect,Uint32 color)
int SDL_FillRects(SDL_Surface *dst,const SDL_Rect *rects,int count,Uint32 color)
void SDL_FreeSurface(SDL_Surface *surface)
void SDL_GetClipRect(SDL_Surface *surface,SDL_Rect *rect)
int SDL_GetColorKey(SDL_Surface *surface,Uint32 *key)
int SDL_GetSurfaceAlphaMod(SDL_Surface *surface,Uint8 *alpha)
int SDL_GetSurfaceBlendMode(SDL_Surface *surface,SDL_BlendMode *blendMode)
int SDL_GetSurfaceColorMod(SDL_Surface *surface,Uint8 *r,Uint8 *g,Uint8 *b)
SDL_Surface *SDL_LoadBMP(const char *file)
SDL_Surface *SDL_LoadBMP_RW(SDL_RWops *src,int freesrc)
int SDL_LockSurface(SDL_Surface *surface)
int SDL_LowerBlit(SDL_Surface *src,SDL_Rect *srcrect,SDL_Surface *dst,SDL_Rect *dstrect)
int SDL_LowerBlitScaled(SDL_Surface *src,SDL_Rect *srcrect,SDL_Surface *dst,SDL_Rect *dstrect)
SDL_bool SDL_MUSTLOCK(SDL_Surface *surface)
int SDL_SaveBMP(SDL_Surface *surface,const char *file)
int SDL_SaveBMP_RW(SDL_Surface *surface,SDL_RWops *dst,int freedst)
SDL_bool SDL_SetClipRect(SDL_Surface *surface,const SDL_Rect *rect)
int SDL_SetColorKey(SDL_Surface *surface,int flag,Uint32 key)
int SDL_SetSurfaceAlphaMod(SDL_Surface *surface,Uint8 alpha)
int SDL_SetSurfaceBlendMode(SDL_Surface *surface,SDL_BlendMode blendMode)
int SDL_SetSurfaceColorMod(SDL_Surface *surface,Uint8 r,Uint8 g,Uint8 b)
int SDL_SetSurfacePalette(SDL_Surface *surface,SDL_Palette *palette)
int SDL_SetSurfaceRLE(SDL_Surface *surface,int flag)
void SDL_UnlockSurface(SDL_Surface* surface)

<comment>
Platform-specific Window Management
</comment>

SDL_bool SDL_GetWindowWMInfo(SDL_Window *window,SDL_SysWMinfo *info)

<comment>
Clipboard Handling
</comment>

char *SDL_GetClipboardText(void)
SDL_bool SDL_HasClipboardText(void)
int SDL_SetClipboardText(const char *text)

<comment>
Event Handling
</comment>

void SDL_AddEventWatch(SDL_EventFilter filter,void *userdata)
void SDL_DelEventWatch(SDL_EventFilter filter,void *userdata)
Uint8 SDL_EventState(Uint32 type,int state)
void SDL_FilterEvents(SDL_EventFilter filter,void *userdata)
void SDL_FlushEvent(Uint32 type)
void SDL_FlushEvents(Uint32 minType,Uint32 maxType)
SDL_bool SDL_GetEventFilter(SDL_EventFilter *filter,void **userdata)
Uint8 SDL_GetEventState(Uint32 type)
int SDL_GetNumTouchDevices(void)
int SDL_GetNumTouchFingers(SDL_TouchID touchID)
SDL_TouchID SDL_GetTouchDevice(int index)
SDL_Finger* SDL_GetTouchFinger(SDL_TouchID touchID,int index)
SDL_bool SDL_HasEvent(Uint32 type)
SDL_bool SDL_HasEvents(Uint32 minType,Uint32 maxType)
int SDL_LoadDollarTemplates(SDL_TouchID touchId,SDL_RWops *src)
int SDL_PeepEvents(SDL_Event *events,int numevents,SDL_eventaction action,Uint32 minType,Uint32 maxType)
int SDL_PollEvent(SDL_Event *event)
void SDL_PumpEvents(void)
int SDL_PushEvent(SDL_Event *event)
SDL_bool SDL_QuitRequested(void)
int SDL_RecordGesture(SDL_TouchID touchId)
Uint32 SDL_RegisterEvents(int numevents)
int SDL_SaveAllDollarTemplates(SDL_RWops *dst)
int SDL_SaveDollarTemplate(SDL_GestureID gestureId,SDL_RWops *dst)
void SDL_SetEventFilter(SDL_EventFilter filter,void *userdata)
int SDL_WaitEvent(SDL_Event *event)
int SDL_WaitEventTimeout(SDL_Event *event,int timeout)
