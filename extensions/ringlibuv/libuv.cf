<nodllstartup>

<code>
/* Copyright (c) 2013-2018 Mahmoud Fayed <msfclipper@yahoo.com> */
#include <uv.h>
#include <ring.h>

</code>

<funcstart>
uv
</funcstart>

<constant>
UV_E2BIG
UV_EACCES
UV_EADDRINUSE
UV_EADDRNOTAVAIL
UV_EAFNOSUPPORT
UV_EAGAIN
UV_EAI_ADDRFAMILY
UV_EAI_AGAIN
UV_EAI_BADFLAGS
UV_EAI_BADHINTS
UV_EAI_CANCELED
UV_EAI_FAIL
UV_EAI_FAMILY
UV_EAI_MEMORY
UV_EAI_NODATA
UV_EAI_NONAME
UV_EAI_OVERFLOW
UV_EAI_PROTOCOL
UV_EAI_SERVICE
UV_EAI_SOCKTYPE
UV_EALREADY
UV_EBADF
UV_EBUSY
UV_ECANCELED
UV_ECHARSET
UV_ECONNABORTED
UV_ECONNREFUSED
UV_ECONNRESET
UV_EDESTADDRREQ
UV_EEXIST
UV_EFAULT
UV_EFBIG
UV_EHOSTUNREACH
UV_EINTR
UV_EINVAL
UV_EIO
UV_EISCONN
UV_EISDIR
UV_ELOOP
UV_EMFILE
UV_EMSGSIZE
UV_ENAMETOOLONG
UV_ENETDOWN
UV_ENETUNREACH
UV_ENFILE
UV_ENOBUFS
UV_ENODEV
UV_ENOENT
UV_ENOMEM
UV_ENONET
UV_ENOPROTOOPT
UV_ENOSPC
UV_ENOSYS
UV_ENOTCONN
UV_ENOTDIR
UV_ENOTEMPTY
UV_ENOTSOCK
UV_ENOTSUP
UV_EPERM
UV_EPIPE
UV_EPROTO
UV_EPROTONOSUPPORT
UV_EPROTOTYPE
UV_ERANGE
UV_EROFS
UV_ESHUTDOWN
UV_ESPIPE
UV_ESRCH
UV_ETIMEDOUT
UV_ETXTBSY
UV_EXDEV
UV_UNKNOWN
UV_EOF
UV_ENXIO
UV_EMLINK
</constant>

const char* uv_strerror(int err)
const char* uv_err_name(int err)
int uv_translate_sys_error(int sys_errno)

<constant>
UV_VERSION_MAJOR
UV_VERSION_MINOR
UV_VERSION_PATCH
UV_VERSION_IS_RELEASE
UV_VERSION_HEX
</constant>

unsigned int uv_version(void)
const char* uv_version_string(void)

<comment>
Event loop
</comment>

<struct>
uv_loop_t { void *data}
</struct>

<runcode>
aEnumTypes + "uv_run_mode"
</runcode>

<constant>
UV_RUN_DEFAULT
UV_RUN_ONCE
UV_RUN_NOWAIT
</constant>

int uv_loop_init(uv_loop_t* loop)
int uv_loop_configure(uv_loop_t* loop, uv_loop_option option, int)
int uv_loop_close(uv_loop_t* loop)
uv_loop_t* uv_default_loop(void)
int uv_run(uv_loop_t* loop, uv_run_mode mode)
int uv_loop_alive(const uv_loop_t* loop)
void uv_stop(uv_loop_t* loop)
size_t uv_loop_size(void)
int uv_backend_fd(const uv_loop_t* loop)
int uv_backend_timeout(const uv_loop_t* loop)
uint64_t uv_now(const uv_loop_t* loop)
void uv_update_time(uv_loop_t* loop)
void uv_walk(uv_loop_t* loop, uv_walk_cb walk_cb, void* arg)
int uv_loop_fork(uv_loop_t* loop)

<comment>
void* uv_loop_get_data(const uv_loop_t* loop)
void* uv_loop_set_data(uv_loop_t* loop, void* data)
</comment>