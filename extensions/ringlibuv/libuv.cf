<nodllstartup>

<code>
/* Copyright (c) 2013-2018 Mahmoud Fayed <msfclipper@yahoo.com> */
#include <uv.h>
#include <ring.h>

</code>

<funcstart>
uv
</funcstart>

<constant>
UV_E2BIG
UV_EACCES
UV_EADDRINUSE
UV_EADDRNOTAVAIL
UV_EAFNOSUPPORT
UV_EAGAIN
UV_EAI_ADDRFAMILY
UV_EAI_AGAIN
UV_EAI_BADFLAGS
UV_EAI_BADHINTS
UV_EAI_CANCELED
UV_EAI_FAIL
UV_EAI_FAMILY
UV_EAI_MEMORY
UV_EAI_NODATA
UV_EAI_NONAME
UV_EAI_OVERFLOW
UV_EAI_PROTOCOL
UV_EAI_SERVICE
UV_EAI_SOCKTYPE
UV_EALREADY
UV_EBADF
UV_EBUSY
UV_ECANCELED
UV_ECHARSET
UV_ECONNABORTED
UV_ECONNREFUSED
UV_ECONNRESET
UV_EDESTADDRREQ
UV_EEXIST
UV_EFAULT
UV_EFBIG
UV_EHOSTUNREACH
UV_EINTR
UV_EINVAL
UV_EIO
UV_EISCONN
UV_EISDIR
UV_ELOOP
UV_EMFILE
UV_EMSGSIZE
UV_ENAMETOOLONG
UV_ENETDOWN
UV_ENETUNREACH
UV_ENFILE
UV_ENOBUFS
UV_ENODEV
UV_ENOENT
UV_ENOMEM
UV_ENONET
UV_ENOPROTOOPT
UV_ENOSPC
UV_ENOSYS
UV_ENOTCONN
UV_ENOTDIR
UV_ENOTEMPTY
UV_ENOTSOCK
UV_ENOTSUP
UV_EPERM
UV_EPIPE
UV_EPROTO
UV_EPROTONOSUPPORT
UV_EPROTOTYPE
UV_ERANGE
UV_EROFS
UV_ESHUTDOWN
UV_ESPIPE
UV_ESRCH
UV_ETIMEDOUT
UV_ETXTBSY
UV_EXDEV
UV_UNKNOWN
UV_EOF
UV_ENXIO
UV_EMLINK
</constant>

const char* uv_strerror(int err)
const char* uv_err_name(int err)
int uv_translate_sys_error(int sys_errno)

<constant>
UV_VERSION_MAJOR
UV_VERSION_MINOR
UV_VERSION_PATCH
UV_VERSION_IS_RELEASE
UV_VERSION_HEX
</constant>

unsigned int uv_version(void)
const char* uv_version_string(void)

<comment>
Event loop
</comment>

<struct>
uv_loop_t { void *data}
</struct>

<runcode>
aEnumTypes + "uv_run_mode"
</runcode>

<constant>
UV_RUN_DEFAULT
UV_RUN_ONCE
UV_RUN_NOWAIT
</constant>

int uv_loop_init(uv_loop_t* loop)
int uv_loop_configure(uv_loop_t* loop, uv_loop_option option, int)
int uv_loop_close(uv_loop_t* loop)
uv_loop_t* uv_default_loop(void)
int uv_run(uv_loop_t* loop, uv_run_mode mode)
int uv_loop_alive(const uv_loop_t* loop)
void uv_stop(uv_loop_t* loop)
size_t uv_loop_size(void)
int uv_backend_fd(const uv_loop_t* loop)
int uv_backend_timeout(const uv_loop_t* loop)
uint64_t uv_now(const uv_loop_t* loop)
void uv_update_time(uv_loop_t* loop)
void uv_walk(uv_loop_t* loop, uv_walk_cb walk_cb, void* arg)
int uv_loop_fork(uv_loop_t* loop)

<comment>
void* uv_loop_get_data(const uv_loop_t* loop)
void* uv_loop_set_data(uv_loop_t* loop, void* data)
</comment>

<struct>
uv_handle_t { uv_loop_t *loop, type, void *data }
</struct>

<runcode>
aEnumTypes + "uv_handle_type"
</runcode>

<constant>
UV_UNKNOWN_HANDLE
UV_ASYNC
UV_CHECK
UV_FS_EVENT
UV_FS_POLL
UV_HANDLE
UV_IDLE
UV_NAMED_PIPE
UV_POLL
UV_PREPARE
UV_PROCESS
UV_STREAM
UV_TCP
UV_TIMER
UV_TTY
UV_UDP
UV_SIGNAL
UV_FILE
UV_HANDLE_TYPE_MAX
</constant>

int uv_is_active(const uv_handle_t* handle)
int uv_is_closing(const uv_handle_t* handle)
void uv_close(uv_handle_t* handle, uv_close_cb close_cb)
void uv_ref(uv_handle_t* handle)
void uv_unref(uv_handle_t* handle)
int uv_has_ref(const uv_handle_t* handle)
size_t uv_handle_size(uv_handle_type type)
int uv_send_buffer_size(uv_handle_t* handle, int* value)
int uv_recv_buffer_size(uv_handle_t* handle, int* value)
int uv_fileno(const uv_handle_t* handle, uv_os_fd_t* fd)

<comment>
uv_loop_t* uv_handle_get_loop(const uv_handle_t* handle)
void* uv_handle_get_data(const uv_handle_t* handle)
void* uv_handle_set_data(uv_handle_t* handle, void* data)
uv_handle_type uv_handle_get_type(const uv_handle_t* handle)
const char* uv_handle_type_name(uv_handle_type type)
</comment>

<comment>
Base request
</comment>

<struct>
uv_req_t { void *data, type }
</struct>

<constant>
UV_UNKNOWN_REQ
UV_REQ
UV_CONNECT
UV_WRITE
UV_SHUTDOWN
UV_UDP_SEND
UV_FS
UV_WORK
UV_GETADDRINFO
UV_GETNAMEINFO
UV_REQ_TYPE_MAX
</constant>

<comment>
UV_REQ_TYPE_PRIVATE
</comment>

int uv_cancel(uv_req_t* req)
size_t uv_req_size(uv_req_type type)

<comment>
void* uv_req_get_data(const uv_req_t* req)
void* uv_req_set_data(uv_req_t* req, void* data)
uv_req_type uv_req_get_type(const uv_req_t* req)
const char* uv_req_type_name(uv_req_type type)
</comment>

<comment>
Timer handle
</comment>

<struct>
uv_timer_t
</struct>

int uv_timer_init(uv_loop_t* loop, uv_timer_t* handle)
int uv_timer_start(uv_timer_t* handle, uv_timer_cb cb, uint64_t timeout, uint64_t repeat)
int uv_timer_stop(uv_timer_t* handle)
int uv_timer_again(uv_timer_t* handle)
void uv_timer_set_repeat(uv_timer_t* handle, uint64_t repeat)
uint64_t uv_timer_get_repeat(const uv_timer_t* handle)

<comment>
Prepare handle
</comment>

<struct>
uv_prepare_t
</struct>

int uv_prepare_init(uv_loop_t* loop, uv_prepare_t* prepare)
int uv_prepare_start(uv_prepare_t* prepare, uv_prepare_cb cb)
int uv_prepare_stop(uv_prepare_t* prepare)

<comment>
Check handle
</comment>

<struct>
uv_check_t
</struct>

int uv_check_init(uv_loop_t* loop, uv_check_t* check)
int uv_check_start(uv_check_t* check, uv_check_cb cb)
int uv_check_stop(uv_check_t* check)

<comment>
Idle handle
</comment>

<struct>
uv_idle_t
</struct>

int uv_idle_init(uv_loop_t* loop, uv_idle_t* idle)
int uv_idle_start(uv_idle_t* idle, uv_idle_cb cb)
int uv_idle_stop(uv_idle_t* idle)

<comment>
Async handle
</comment>

<struct>
uv_async_t
</struct>

int uv_async_init(uv_loop_t* loop, uv_async_t* async, uv_async_cb async_cb)
int uv_async_send(uv_async_t* async)
