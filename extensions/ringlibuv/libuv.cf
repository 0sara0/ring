<nodllstartup>

<code>
/* Copyright (c) 2013-2018 Mahmoud Fayed <msfclipper@yahoo.com> */
#include <uv.h>
#include <ring.h>

</code>

<funcstart>
uv
</funcstart>

<constant>
UV_E2BIG
UV_EACCES
UV_EADDRINUSE
UV_EADDRNOTAVAIL
UV_EAFNOSUPPORT
UV_EAGAIN
UV_EAI_ADDRFAMILY
UV_EAI_AGAIN
UV_EAI_BADFLAGS
UV_EAI_BADHINTS
UV_EAI_CANCELED
UV_EAI_FAIL
UV_EAI_FAMILY
UV_EAI_MEMORY
UV_EAI_NODATA
UV_EAI_NONAME
UV_EAI_OVERFLOW
UV_EAI_PROTOCOL
UV_EAI_SERVICE
UV_EAI_SOCKTYPE
UV_EALREADY
UV_EBADF
UV_EBUSY
UV_ECANCELED
UV_ECHARSET
UV_ECONNABORTED
UV_ECONNREFUSED
UV_ECONNRESET
UV_EDESTADDRREQ
UV_EEXIST
UV_EFAULT
UV_EFBIG
UV_EHOSTUNREACH
UV_EINTR
UV_EINVAL
UV_EIO
UV_EISCONN
UV_EISDIR
UV_ELOOP
UV_EMFILE
UV_EMSGSIZE
UV_ENAMETOOLONG
UV_ENETDOWN
UV_ENETUNREACH
UV_ENFILE
UV_ENOBUFS
UV_ENODEV
UV_ENOENT
UV_ENOMEM
UV_ENONET
UV_ENOPROTOOPT
UV_ENOSPC
UV_ENOSYS
UV_ENOTCONN
UV_ENOTDIR
UV_ENOTEMPTY
UV_ENOTSOCK
UV_ENOTSUP
UV_EPERM
UV_EPIPE
UV_EPROTO
UV_EPROTONOSUPPORT
UV_EPROTOTYPE
UV_ERANGE
UV_EROFS
UV_ESHUTDOWN
UV_ESPIPE
UV_ESRCH
UV_ETIMEDOUT
UV_ETXTBSY
UV_EXDEV
UV_UNKNOWN
UV_EOF
UV_ENXIO
UV_EMLINK
</constant>

const char* uv_strerror(int err)
const char* uv_err_name(int err)
int uv_translate_sys_error(int sys_errno)

<constant>
UV_VERSION_MAJOR
UV_VERSION_MINOR
UV_VERSION_PATCH
UV_VERSION_IS_RELEASE
UV_VERSION_HEX
</constant>

unsigned int uv_version(void)
const char* uv_version_string(void)

<comment>
Event loop
</comment>

<struct>
uv_loop_t { void *data}
</struct>

<runcode>
aEnumTypes + "uv_run_mode"
</runcode>

<constant>
UV_RUN_DEFAULT
UV_RUN_ONCE
UV_RUN_NOWAIT
</constant>

int uv_loop_init(uv_loop_t* loop)
int uv_loop_configure(uv_loop_t* loop, uv_loop_option option, int)
int uv_loop_close(uv_loop_t* loop)
uv_loop_t* uv_default_loop(void)
int uv_run(uv_loop_t* loop, uv_run_mode mode)
int uv_loop_alive(const uv_loop_t* loop)
void uv_stop(uv_loop_t* loop)
size_t uv_loop_size(void)
int uv_backend_fd(const uv_loop_t* loop)
int uv_backend_timeout(const uv_loop_t* loop)
uint64_t uv_now(const uv_loop_t* loop)
void uv_update_time(uv_loop_t* loop)
void uv_walk(uv_loop_t* loop, uv_walk_cb walk_cb, void* arg)
int uv_loop_fork(uv_loop_t* loop)

<comment>
void* uv_loop_get_data(const uv_loop_t* loop)
void* uv_loop_set_data(uv_loop_t* loop, void* data)
</comment>

<struct>
uv_handle_t { uv_loop_t *loop, type, void *data }
</struct>

<runcode>
aEnumTypes + "uv_handle_type"
</runcode>

<constant>
UV_UNKNOWN_HANDLE
UV_ASYNC
UV_CHECK
UV_FS_EVENT
UV_FS_POLL
UV_HANDLE
UV_IDLE
UV_NAMED_PIPE
UV_POLL
UV_PREPARE
UV_PROCESS
UV_STREAM
UV_TCP
UV_TIMER
UV_TTY
UV_UDP
UV_SIGNAL
UV_FILE
UV_HANDLE_TYPE_MAX
</constant>

int uv_is_active(const uv_handle_t* handle)
int uv_is_closing(const uv_handle_t* handle)
void uv_close(uv_handle_t* handle, uv_close_cb close_cb)
void uv_ref(uv_handle_t* handle)
void uv_unref(uv_handle_t* handle)
int uv_has_ref(const uv_handle_t* handle)
size_t uv_handle_size(uv_handle_type type)
int uv_send_buffer_size(uv_handle_t* handle, int* value)
int uv_recv_buffer_size(uv_handle_t* handle, int* value)
int uv_fileno(const uv_handle_t* handle, uv_os_fd_t* fd)

<comment>
uv_loop_t* uv_handle_get_loop(const uv_handle_t* handle)
void* uv_handle_get_data(const uv_handle_t* handle)
void* uv_handle_set_data(uv_handle_t* handle, void* data)
uv_handle_type uv_handle_get_type(const uv_handle_t* handle)
const char* uv_handle_type_name(uv_handle_type type)
</comment>

<comment>
Base request
</comment>

<struct>
uv_req_t { void *data, type }
</struct>

<constant>
UV_UNKNOWN_REQ
UV_REQ
UV_CONNECT
UV_WRITE
UV_SHUTDOWN
UV_UDP_SEND
UV_FS
UV_WORK
UV_GETADDRINFO
UV_GETNAMEINFO
UV_REQ_TYPE_MAX
</constant>

<comment>
UV_REQ_TYPE_PRIVATE
</comment>

int uv_cancel(uv_req_t* req)
size_t uv_req_size(uv_req_type type)

<comment>
void* uv_req_get_data(const uv_req_t* req)
void* uv_req_set_data(uv_req_t* req, void* data)
uv_req_type uv_req_get_type(const uv_req_t* req)
const char* uv_req_type_name(uv_req_type type)
</comment>

<comment>
Timer handle
</comment>

<struct>
uv_timer_t
</struct>

int uv_timer_init(uv_loop_t* loop, uv_timer_t* handle)
int uv_timer_start(uv_timer_t* handle, uv_timer_cb cb, uint64_t timeout, uint64_t repeat)
int uv_timer_stop(uv_timer_t* handle)
int uv_timer_again(uv_timer_t* handle)
void uv_timer_set_repeat(uv_timer_t* handle, uint64_t repeat)
uint64_t uv_timer_get_repeat(const uv_timer_t* handle)

<comment>
Prepare handle
</comment>

<struct>
uv_prepare_t
</struct>

int uv_prepare_init(uv_loop_t* loop, uv_prepare_t* prepare)
int uv_prepare_start(uv_prepare_t* prepare, uv_prepare_cb cb)
int uv_prepare_stop(uv_prepare_t* prepare)

<comment>
Check handle
</comment>

<struct>
uv_check_t
</struct>

int uv_check_init(uv_loop_t* loop, uv_check_t* check)
int uv_check_start(uv_check_t* check, uv_check_cb cb)
int uv_check_stop(uv_check_t* check)

<comment>
Idle handle
</comment>

<struct>
uv_idle_t
</struct>

int uv_idle_init(uv_loop_t* loop, uv_idle_t* idle)
int uv_idle_start(uv_idle_t* idle, uv_idle_cb cb)
int uv_idle_stop(uv_idle_t* idle)

<comment>
Async handle
</comment>

<struct>
uv_async_t
</struct>

int uv_async_init(uv_loop_t* loop, uv_async_t* async, uv_async_cb async_cb)
int uv_async_send(uv_async_t* async)

<comment>
Poll handle
</comment>

<struct>
uv_poll_t
</struct>

<runcode>
aEnumTypes + "uv_poll_event"
</runcode>

<constant>
UV_READABLE
UV_WRITABLE
UV_DISCONNECT
UV_PRIORITIZED
</constant>

int uv_poll_init(uv_loop_t* loop, uv_poll_t* handle, int fd)
int uv_poll_init_socket(uv_loop_t* loop, uv_poll_t* handle, uv_os_sock_t socket)
int uv_poll_start(uv_poll_t* handle, int events, uv_poll_cb cb)
int uv_poll_stop(uv_poll_t* poll)

<comment>
Signal handle
</comment>

<struct>
uv_signal_t {signum}
</struct>

int uv_signal_init(uv_loop_t* loop, uv_signal_t* signal)
int uv_signal_start(uv_signal_t* signal, uv_signal_cb cb, int signum)
int uv_signal_start_oneshot(uv_signal_t* signal, uv_signal_cb cb, int signum)
int uv_signal_stop(uv_signal_t* signal)

<comment>
Process handle
</comment>

<struct>
uv_process_t {pid}
uv_process_options_t
uv_stdio_container_t  
</struct>

<runcode>
aEnumTypes + "uv_process_flags"
aEnumTypes + "uv_stdio_flags"
</runcode>

<constant>
UV_PROCESS_SETUID 
UV_PROCESS_SETGID
UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS
UV_PROCESS_DETACHED
UV_PROCESS_WINDOWS_HIDE
UV_IGNORE
UV_CREATE_PIPE
UV_INHERIT_FD
UV_INHERIT_STREAM
UV_READABLE_PIPE
UV_WRITABLE_PIPE
</constant>

void uv_disable_stdio_inheritance(void)
int uv_spawn(uv_loop_t* loop, uv_process_t* handle, const uv_process_options_t* options)
int uv_process_kill(uv_process_t* handle, int signum)
int uv_kill(int pid, int signum)
<comment>
uv_pid_t uv_process_get_pid(const uv_process_t* handle)
</comment>

<comment>
Stream handle
</comment>

<struct>
uv_stream_t  
uv_connect_t  
uv_shutdown_t  
uv_write_t 
</struct>

int uv_shutdown(uv_shutdown_t* req, uv_stream_t* handle, uv_shutdown_cb cb)
int uv_listen(uv_stream_t* stream, int backlog, uv_connection_cb cb)
int uv_accept(uv_stream_t* server, uv_stream_t* client)
int uv_read_start(uv_stream_t* stream, uv_alloc_cb alloc_cb, uv_read_cb read_cb)
int uv_read_stop(uv_stream_t*)
<comment>
int uv_write(uv_write_t* req, uv_stream_t* handle, const uv_buf_t bufs[], unsigned int nbufs, uv_write_cb cb)
int uv_write2(uv_write_t* req, uv_stream_t* handle, const uv_buf_t bufs[], unsigned int nbufs, uv_stream_t* send_handle, uv_write_cb cb)
int uv_try_write(uv_stream_t* handle, const uv_buf_t bufs[], unsigned int nbufs)
</comment>
int uv_is_readable(const uv_stream_t* handle)
int uv_is_writable(const uv_stream_t* handle)
int uv_stream_set_blocking(uv_stream_t* handle, int blocking)
<comment>
size_t uv_stream_get_write_queue_size(const uv_stream_t* stream)
</comment>

<comment>
TCP handle
</comment>

<struct>
uv_tcp_t
</struct>

int uv_tcp_init(uv_loop_t* loop, uv_tcp_t* handle)
int uv_tcp_init_ex(uv_loop_t* loop, uv_tcp_t* handle, unsigned int flags)
int uv_tcp_open(uv_tcp_t* handle, uv_os_sock_t sock)
int uv_tcp_nodelay(uv_tcp_t* handle, int enable)
int uv_tcp_keepalive(uv_tcp_t* handle, int enable, unsigned int delay)
int uv_tcp_simultaneous_accepts(uv_tcp_t* handle, int enable)
int uv_tcp_bind(uv_tcp_t* handle, const struct sockaddr* addr, unsigned int flags)
int uv_tcp_getsockname(const uv_tcp_t* handle, struct sockaddr* name, int* namelen)
int uv_tcp_getpeername(const uv_tcp_t* handle, struct sockaddr* name, int* namelen)
int uv_tcp_connect(uv_connect_t* req, uv_tcp_t* handle, const struct sockaddr* addr, uv_connect_cb cb)

<comment>
Pipe handle
</comment>

<struct>
uv_pipe_t
</struct>

int uv_pipe_init(uv_loop_t* loop, uv_pipe_t* handle, int ipc)
int uv_pipe_open(uv_pipe_t* handle, uv_file file)
int uv_pipe_bind(uv_pipe_t* handle, const char* name)
void uv_pipe_connect(uv_connect_t* req, uv_pipe_t* handle, const char* name, uv_connect_cb cb)
int uv_pipe_getsockname(const uv_pipe_t* handle, char* buffer, size_t* size)
int uv_pipe_getpeername(const uv_pipe_t* handle, char* buffer, size_t* size)
void uv_pipe_pending_instances(uv_pipe_t* handle, int count)
int uv_pipe_pending_count(uv_pipe_t* handle)
uv_handle_type uv_pipe_pending_type(uv_pipe_t* handle)
int uv_pipe_chmod(uv_pipe_t* handle, int flags)

<comment>
TTY handle
</comment>

<struct>
uv_tty_t
</struct>

<runcode>
aEnumTypes + "uv_tty_mode_t"
</runcode>

<constant>
UV_TTY_MODE_NORMAL
UV_TTY_MODE_RAW
UV_TTY_MODE_IO
</constant>

int uv_tty_init(uv_loop_t* loop, uv_tty_t* handle, uv_file fd, int readable)
int uv_tty_set_mode(uv_tty_t* handle, uv_tty_mode_t mode)
int uv_tty_reset_mode(void)
int uv_tty_get_winsize(uv_tty_t* handle, int* width, int* height)

<comment>
UDP handle
</comment>

<struct>
uv_udp_t {send_queue_size,send_queue_count}
uv_udp_send_t 
</struct>

<runcode>
aEnumTypes + "uv_udp_flags"
aEnumTypes + "uv_membership"
</runcode>

<constant>
UV_UDP_IPV6ONLY 
UV_UDP_PARTIAL
UV_UDP_REUSEADDR
UV_LEAVE_GROUP
UV_JOIN_GROUP
</constant>

int uv_udp_init(uv_loop_t* loop, uv_udp_t* handle)
int uv_udp_init_ex(uv_loop_t* loop, uv_udp_t* handle, unsigned int flags)
int uv_udp_open(uv_udp_t* handle, uv_os_sock_t sock)
int uv_udp_bind(uv_udp_t* handle, const struct sockaddr* addr, unsigned int flags)
int uv_udp_getsockname(const uv_udp_t* handle, struct sockaddr* name, int* namelen)
int uv_udp_set_membership(uv_udp_t* handle, const char* multicast_addr, const char* interface_addr, uv_membership membership)
int uv_udp_set_multicast_loop(uv_udp_t* handle, int on)
int uv_udp_set_multicast_ttl(uv_udp_t* handle, int ttl)
int uv_udp_set_multicast_interface(uv_udp_t* handle, const char* interface_addr)
int uv_udp_set_broadcast(uv_udp_t* handle, int on)
int uv_udp_set_ttl(uv_udp_t* handle, int ttl)
<comment>
int uv_udp_send(uv_udp_send_t* req, uv_udp_t* handle, const uv_buf_t bufs[], unsigned int nbufs, const struct sockaddr* addr, uv_udp_send_cb send_cb)
int uv_udp_try_send(uv_udp_t* handle, const uv_buf_t bufs[], unsigned int nbufs, const struct sockaddr* addr)
</comment>
int uv_udp_recv_start(uv_udp_t* handle, uv_alloc_cb alloc_cb, uv_udp_recv_cb recv_cb)
int uv_udp_recv_stop(uv_udp_t* handle)
<comment>
size_t uv_udp_get_send_queue_size(const uv_udp_t* handle)
size_t uv_udp_get_send_queue_count(const uv_udp_t* handle)
</comment>

<comment>
FS Event handle
</comment>

<struct>
uv_fs_event_t
</struct>

<runcode>
aEnumTypes + "uv_fs_event"
aEnumTypes + "uv_fs_event_flags"
</runcode>

<constant>
UV_RENAME
UV_CHANGE
UV_FS_EVENT_WATCH_ENTRY
UV_FS_EVENT_STAT
UV_FS_EVENT_RECURSIVE
</constant>

int uv_fs_event_init(uv_loop_t* loop, uv_fs_event_t* handle)
int uv_fs_event_start(uv_fs_event_t* handle, uv_fs_event_cb cb, const char* path, unsigned int flags)
int uv_fs_event_stop(uv_fs_event_t* handle)
int uv_fs_event_getpath(uv_fs_event_t* handle, char* buffer, size_t* size)

<comment>
FS Poll handle
</comment>

<struct>
uv_fs_poll_t
</struct>

int uv_fs_poll_init(uv_loop_t* loop, uv_fs_poll_t* handle)
int uv_fs_poll_start(uv_fs_poll_t* handle, uv_fs_poll_cb poll_cb, const char* path, unsigned int interval)
int uv_fs_poll_stop(uv_fs_poll_t* handle)
int uv_fs_poll_getpath(uv_fs_poll_t* handle, char* buffer, size_t* size)

<comment>
File system operations
</comment>

<struct>
uv_fs_t
uv_timespec_t
uv_stat_t
</struct>

<runcode>
aEnumTypes + "uv_fs_type"
aEnumTypes + "uv_dirent_t"
</runcode>

<constant>
UV_FS_UNKNOWN
UV_FS_CUSTOM
UV_FS_OPEN
UV_FS_CLOSE
UV_FS_READ
UV_FS_WRITE
UV_FS_SENDFILE
UV_FS_STAT
UV_FS_LSTAT
UV_FS_FSTAT
UV_FS_FTRUNCATE
UV_FS_UTIME
UV_FS_FUTIME
UV_FS_ACCESS
UV_FS_CHMOD
UV_FS_FCHMOD
UV_FS_FSYNC
UV_FS_FDATASYNC
UV_FS_UNLINK
UV_FS_RMDIR
UV_FS_MKDIR
UV_FS_MKDTEMP
UV_FS_RENAME
UV_FS_SCANDIR
UV_FS_LINK
UV_FS_SYMLINK
UV_FS_READLINK
UV_FS_CHOWN
UV_FS_FCHOWN
UV_FS_REALPATH
UV_FS_COPYFILE
UV_DIRENT_UNKNOWN
UV_DIRENT_FILE
UV_DIRENT_DIR
UV_DIRENT_LINK
UV_DIRENT_FIFO
UV_DIRENT_SOCKET
UV_DIRENT_CHAR
UV_DIRENT_BLOCK
UV_FS_O_APPEND
UV_FS_O_CREAT
UV_FS_O_DIRECT
UV_FS_O_DIRECTORY
UV_FS_O_DSYNC
UV_FS_O_EXCL
UV_FS_O_EXLOCK
UV_FS_O_NOATIME
UV_FS_O_NOCTTY
UV_FS_O_NOFOLLOW
UV_FS_O_NONBLOCK
UV_FS_O_RANDOM
UV_FS_O_RDONLY
UV_FS_O_RDWR
UV_FS_O_SEQUENTIAL
UV_FS_O_SHORT_LIVED
UV_FS_O_SYMLINK
UV_FS_O_SYNC
UV_FS_O_TEMPORARY
UV_FS_O_TRUNC
UV_FS_O_WRONLY
</constant>

void uv_fs_req_cleanup(uv_fs_t* req)
int uv_fs_close(uv_loop_t* loop, uv_fs_t* req, uv_file file, uv_fs_cb cb)
int uv_fs_open(uv_loop_t* loop, uv_fs_t* req, const char* path, int flags, int mode, uv_fs_cb cb)
<comment>
int uv_fs_read(uv_loop_t* loop, uv_fs_t* req, uv_file file, const uv_buf_t bufs[], unsigned int nbufs, int64_t offset, uv_fs_cb cb)
<comment>
int uv_fs_unlink(uv_loop_t* loop, uv_fs_t* req, const char* path, uv_fs_cb cb)
<comment>
int uv_fs_write(uv_loop_t* loop, uv_fs_t* req, uv_file file, const uv_buf_t bufs[], unsigned int nbufs, int64_t offset, uv_fs_cb cb)
</comment>
int uv_fs_mkdir(uv_loop_t* loop, uv_fs_t* req, const char* path, int mode, uv_fs_cb cb)
int uv_fs_mkdtemp(uv_loop_t* loop, uv_fs_t* req, const char* tpl, uv_fs_cb cb)
int uv_fs_rmdir(uv_loop_t* loop, uv_fs_t* req, const char* path, uv_fs_cb cb)
int uv_fs_scandir(uv_loop_t* loop, uv_fs_t* req, const char* path, int flags, uv_fs_cb cb)
int uv_fs_scandir_next(uv_fs_t* req, uv_dirent_t* ent)
int uv_fs_stat(uv_loop_t* loop, uv_fs_t* req, const char* path, uv_fs_cb cb)
int uv_fs_fstat(uv_loop_t* loop, uv_fs_t* req, uv_file file, uv_fs_cb cb)
int uv_fs_lstat(uv_loop_t* loop, uv_fs_t* req, const char* path, uv_fs_cb cb)
int uv_fs_rename(uv_loop_t* loop, uv_fs_t* req, const char* path, const char* new_path, uv_fs_cb cb)
int uv_fs_fsync(uv_loop_t* loop, uv_fs_t* req, uv_file file, uv_fs_cb cb)
int uv_fs_fdatasync(uv_loop_t* loop, uv_fs_t* req, uv_file file, uv_fs_cb cb)
int uv_fs_ftruncate(uv_loop_t* loop, uv_fs_t* req, uv_file file, int64_t offset, uv_fs_cb cb)
int uv_fs_copyfile(uv_loop_t* loop, uv_fs_t* req, const char* path, const char* new_path, int flags, uv_fs_cb cb)
int uv_fs_sendfile(uv_loop_t* loop, uv_fs_t* req, uv_file out_fd, uv_file in_fd, int64_t in_offset, size_t length, uv_fs_cb cb)
int uv_fs_access(uv_loop_t* loop, uv_fs_t* req, const char* path, int mode, uv_fs_cb cb)
int uv_fs_chmod(uv_loop_t* loop, uv_fs_t* req, const char* path, int mode, uv_fs_cb cb)
int uv_fs_fchmod(uv_loop_t* loop, uv_fs_t* req, uv_file file, int mode, uv_fs_cb cb)
int uv_fs_utime(uv_loop_t* loop, uv_fs_t* req, const char* path, double atime, double mtime, uv_fs_cb cb)
int uv_fs_futime(uv_loop_t* loop, uv_fs_t* req, uv_file file, double atime, double mtime, uv_fs_cb cb)
int uv_fs_link(uv_loop_t* loop, uv_fs_t* req, const char* path, const char* new_path, uv_fs_cb cb)
int uv_fs_symlink(uv_loop_t* loop, uv_fs_t* req, const char* path, const char* new_path, int flags, uv_fs_cb cb)
int uv_fs_readlink(uv_loop_t* loop, uv_fs_t* req, const char* path, uv_fs_cb cb)
int uv_fs_realpath(uv_loop_t* loop, uv_fs_t* req, const char* path, uv_fs_cb cb)
int uv_fs_chown(uv_loop_t* loop, uv_fs_t* req, const char* path, uv_uid_t uid, uv_gid_t gid, uv_fs_cb cb)
int uv_fs_fchown(uv_loop_t* loop, uv_fs_t* req, uv_file file, uv_uid_t uid, uv_gid_t gid, uv_fs_cb cb)
<comment>
uv_fs_type uv_fs_get_type(const uv_fs_t* req)
ssize_t uv_fs_get_result(const uv_fs_t* req)
void* uv_fs_get_ptr(const uv_fs_t* req)
const char* uv_fs_get_path(const uv_fs_t* req)
uv_stat_t* uv_fs_get_statbuf(uv_fs_t* req)
</comment>
 uv_os_fd_t uv_get_osfhandle(int fd)